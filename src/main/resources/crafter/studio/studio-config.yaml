##################################################
##################################################
##       Studio Core Configuration File         ##
##################################################
##################################################

##################################################
##     Location of Override Config File         ##
##################################################
# Load override configuration files (to override what's defined here)
studio.config.overrideConfig: crafter/studio/extension/studio-config-override.yaml

##################################################
##              Content Repository              ##
##################################################
# Absolute path to repository base (all actual repositories will be under this)
studio.repo.basePath: ${sys:crafter.data.dir}/repos
# Global repository path (automatically goes under repo-base-path)
studio.repo.globalRepoPath: global
# Sites repositories base path (automatically goes under repo-base-path)
studio.repo.sitesRepoBasePath: sites
# Sandbox git repository name under every site
studio.repo.siteSandboxPath: sandbox
# Sandbox git repository branch for every site
studio.repo.siteSandboxBranch: master
# Published git repository name under every site
studio.repo.sitePublishedPath: published
# If not using environment-config.xml, environments are configured here
# Git repository branch for the `live` environment, default "live"
studio.repo.published.live: live
# Git repository branch for the `staging` environment, default "staging"
studio.repo.published.staging: staging
# Blueprints folder name under global
studio.repo.blueprintsPath: blueprints
# Blueprints descriptor filename under global
studio.repo.blueprints.descriptor.filename: descriptor.yaml
# Bootstrap the repository with fresh content if no repository is detected in the paths specified. Default is true.
studio.repo.bootstrapRepo: true
# Sandbox repository write commit message
studio.repo.sandbox.write.commitMessage: "User {username} wrote content {path}"
# Published repository commit message
studio.repo.published.commitMessage: "Publish event triggered by {username} on {datetime} via {source}.\n\nPublish note from user: \"{message}\"\n\nCommit ID: {commit_id}\n\nPackage ID: {package_id}"
# Commit message to mark commit not to process when syncing database
studio.repo.syncDB.commitMessage.noProcessing: "STUDIO: NO PROCESSING"
# Create new repository commit message
studio.repo.createRepository.commitMessage: "Create new repository."
# Create sandbox branch commit message
studio.repo.createSandboxBranch.commitMessage: "Create {sandbox} branch."
# Initial commit message
studio.repo.initialCommit.commitMessage: "Initial commit."
# Blueprints updated commit message
studio.repo.blueprintsUpdated.commitMessage: "Blueprints updated."
# Create folder commit message
studio.repo.createFolder.commitMessage: "Created folder site: {site} path: {path}"
# Delete content commit message
studio.repo.deleteContent.commitMessage: "Delete file {path}"
# Move content commit message
studio.repo.moveContent.commitMessage: "Moving {fromPath} to {toPath}"
# Copy content commit message
studio.repo.copyContent.commitMessage: "Copying {fromPath} to {toPath}"
# The cron expression used on scheduled cleanup of repositories
studio.repo.cleanup.cron: '0 0 3 ? * SUN'

############################################################
##                   Site Configuration                   ##
############################################################
# Location where global configuration files are stored.
studio.configuration.global.configBasePath: /configuration
# File name where global menu configuration is stored
studio.configuration.global.menuFileName: global-menu-config.xml
# File name where global configuration of user role mappings is stored.
studio.configuration.global.roleMappingFileName: global-role-mappings-config.xml
# File name where global configuration of user permissions mappings is stored.
studio.configuration.global.permissionMappingFileName: global-permission-mappings-config.xml
# UI Resource override path
studio.configuration.global.ui.resource.override.path: crafter/studio/ui
# Studio system site name
studio.configuration.global.systemSite: studio_root
# Root location where configuration for all sites is stored inside repository.
studio.configuration.site.configBasePath: /config/studio
# Root location where configuration for all sites is stored inside repository.
studio.configuration.site.multiEnvironment.configBasePath: /config/studio/env/{environment}
# Location pattern where environment specific configuration for a site is stored
studio.configuration.site.environment.configBasePath: /config/studio/environment
# Location where content types are stored for a site.
studio.configuration.site.contentTypes.configBasePath: /config/studio/content-types
# Location where content types configuration files are stored for a site.
studio.configuration.site.contentTypes.configPath: /config/studio/content-types/{content-type}
# File name where site configuration is stored.
studio.configuration.site.generalConfigFileName: site-config.xml
# File name where configuration of user permissions mappings is stored for a site.
studio.configuration.site.permissionMappingsFileName: permission-mappings-config.xml
# File name where configuration of user role mappings is stored for a site.
studio.configuration.site.roleMappingsFileName: role-mappings-config.xml
# Defines name used for environment specific configuration. It is used for environment overrides in studio. Default value is local.
studio.configuration.site.environment: local
# File name where environment specific configuration is stored
studio.configuration.site.environment.configFileName: environment-config.xml
# File name where configuration of content type is stored.
studio.configuration.site.contentTypes.configFileName: config.xml
# Default user groups when site is created
studio.configuration.defaultGroups: site_author,site_publisher,site_developer,site_reviewer,site_admin
# Default admin group when site is created to add creator as admin
studio.configuration.defaultAdminGroup: site_admin
# Location where data sources configuration is stored for a site.
studio.configuration.site.dataSources.configBasePath: /config/studio/data-sources
# File name where data sources configuration is stored.
studio.configuration.site.dataSources.configFileName: cmis-config.xml
# Destroy site context url for preview engine
studio.configuration.site.preview.destroy.context.url: /api/1/site/context/destroy.json?crafterSite={siteName}
# Location pattern where dependency resolver specific configuration for a site is stored
studio.configuration.site.dependencyResolver.configBasePath: /config/studio/dependency
# File name where dependency specific configuration is stored
studio.configuration.site.dependencyResolver.configFileName: resolver-config.xml
# Repo path to read the AWS configuration
studio.configuration.site.aws.configurationPath: /config/studio/aws/aws.xml
# Repo path to read the Box configuration
studio.configuration.site.box.configurationPath: /config/studio/box/box.xml
# Repo path to read the WebDAV configuration
studio.configuration.site.webdav.configurationPath: /config/studio/webdav/webdav.xml
# Regex pattern for item specific dependencies
studio.configuration.dependency.itemSpecificPatterns: /site/components/page/.*,/static-assets/page/.*,/site/components/item/.*,/static-assets/item/.*
# Repo path to the asset processing config
studio.configuration.site.asset.processing.configurationPath: /config/studio/asset-processing/asset-processing-config.xml
# Default preview URL
studio.configuration.site.defaultPreviewUrl: ^https?://localhost:8080/?
# Default authoring URL
studio.configuration.site.defaultAuthoringUrl: ^https?://localhost:8080/studio/?

########################################################
##                   Import Service                   ##
########################################################
# Defines content processor workflow assignee for import process.
studio.import.assignee: admin
# Defines content processor chain name used for processing xml content.
studio.import.xmlChainName: importContent
# Defines content processor chain name used for processing assets.
studio.import.assetChainName: assetContent

##############################################################
##                   Notification Service                   ##
##############################################################
# Path where the notification configuration is located
studio.notification.configurationFile: /config/studio/workflow/notification-config.xml
# Timezone for the email template engine (which determines how FreeMarker interprets `now` etc.)
studio.notification.timezone: UTC

##########################################################
##                   Workflow Service                   ##
##########################################################
# Turn on/off (value true/false) publishing without dependencies.
# When turned on workflow service does not perform check if deployment package includes all necessary dependencies for content that is being published.
studio.workflow.publishingWithoutDependencies.enabled: false

##########################################################
##                   Activity Service                   ##
##########################################################
studio.activity.user.name.caseSensitive: false

##############################################################
##                   Object State Service                   ##
##############################################################
# Defines size of a batch when executing object state operation on big path packages (bulk operations). Limitation on bulk operations is imposed by jdbc drivers and limits on number of parameters for sql statements.
studio.objectState.bulkOperationsBatchSize: 500

##########################################################
##                   Security Service                   ##
##########################################################
# HTTP Session timeout for studio (value is in minutes).
studio.security.sessionTimeout: 60
# Urls to be treated as exception to the rules.
studio.security.ignoreRenewTokenUrls: /api/1/services/api/1/security/validate-session.json,/api/1/services/api/1/publish/status.json
# Public URLs
studio.security.publicUrls: /api/1/services/api/1/server/get-available-languages.json, /api/1/services/api/1/server/get-ui-resource-override.json, /api/1/services/api/1/monitor/status.json
# Defines security provider for accessing repository. Possible values:
# db (users are stored in database)
# ldap (users are imported from LDAP into the database)
studio.security.type: db
# Salt for encrypting
studio.security.cipher.salt: DgGN9xhq3GOn6zxg
# Key for encrypting
studio.security.cipher.key: zEtRii1jWUuUUB0W
# Cipher type
studio.security.cipher.type: AES
# Cipher algorithm
studio.security.cipher.algorithm: AES/CBC/PKCS5Padding
# Forgot password email subject
studio.security.forgotPassword.message.subject: Forgot Password
# Forgot password email template
studio.security.forgotPassword.email.template: /templates/system/email/forgotPassword.ftl
# Forgot password token time-out period in minutes
studio.security.forgotPassword.token.timeout: 60
# Reset password service url
studio.security.resetPassword.serviceUrl: "#/reset-password"
# Enable/disable logout for headers authenticated users (SSO)
studio.authentication.headers.logout.enabled: false
# If logout is enabled for headers authenticated users (SSO), set the endpoint of the SP or IdP logout, which should
# be called after local logout. The {baseUrl} macro is provided so that the browser is redirected back to Studio
# after logout (https://STUDIO_SERVER:STUDIO_PORT/studio)
studio.authentication.headers.logout.url: /mellon/logout?ReturnTo={baseUrl}
# Studio authentication chain configuration
studio.authentication.chain:
  # Authentication provider type
  - provider: HEADERS
    # Authentication via headers enabled
    enabled: false
    # Authentication header for secure key
    secureKeyHeader: secure_key
    # Authentication headers secure key that is expected to match secure key value from headers
    # Typically this is placed in the header by the authentication agent, e.g. Apache mod_mellon
    secureKeyHeaderValue: secure
    # Authentication header for username
    usernameHeader: username
    # Authentication header for first name
    firstNameHeader: firstname
    # Authentication header for last name
    lastNameHeader: lastname
    # Authentication header for email
    emailHeader: email
    # Authentication header for groups: comma separated list of sites and groups
    #   Example:
    #   site_author,site_xyz_developer
    groupsHeader: groups
  # Authentication provider type
  - provider: LDAP
    # Authentication via LDAP enabled
    enabled: false
    # LDAP Server url
    ldapUrl: ldap://localhost:389
    # LDAP bind DN (user)
    ldapUsername: cn=Manager,dc=my-domain,dc=com
    # LDAP bind password
    ldapPassword: secret
    # LDAP base context (directory root)
    ldapBaseContext: dc=my-domain,dc=com
    # LDAP username attribute
    usernameLdapAttribute: uid
    # LDAP first name attribute
    firstNameLdapAttribute: cn
    # LDAP last name attribute
    lastNameLdapAttribute: sn
    # Authentication header for email
    emailLdapAttribute: mail
    # LDAP groups attribute
    groupNameLdapAttribute: crafterGroup
    # LDAP groups attribute name regex
    groupNameLdapAttributeRegex: .*
    # LDAP groups attribute match index
    groupNameLdapAttributeMatchIndex: 0
# Authentication provider type
  - provider: DB
    # Authentication via DB enabled
    enabled: true
###############################################################
##               Page Navigation Order Service               ##
###############################################################
# Defines base increment for page navigation order when new content is created.
studio.pageNavigationOrder.increment: 1000

############################################################
##                   Content Processors                   ##
############################################################
# Location where groovy script for content lifecycle processor is stored.
studio.contentProcessor.contentLifeCycle.scriptLocation: /config/studio/content-types/{content-type}/controller.groovy

#######################################################
##                   Email Service                   ##
#######################################################
# Default value for from header when sending emails.
studio.mail.from.default: admin@example.com
# SMTP server name to send emails.
studio.mail.host: localhost
# SMTP port number to send emails.
studio.mail.port: 25
# SMTP username for authenticated access when sending emails.
studio.mail.username:
# SMTP password for authenticated access when sending emails.
studio.mail.password:
# Turn on/off (value true/false) SMTP authenaticated access protocol.
studio.mail.smtp.auth: false
# Enable/disable (value true/false) SMTP TLS protocol when sending emails.
studio.mail.smtp.starttls.enable: true
# Enable/disable (value true/false) SMTP EHLO protocol when sending emails.
studio.mail.smtp.ehlo: true
# Enable/disable (value true/false) debug mode for email service. Enabling debug mode allows tracking/debugging communication between email service and SMTP server.
studio.mail.debug: false

#####################################################
##                   Studio Jobs                   ##
#####################################################
# Turn on/off (value true/false) check if mandatory dependencies of deployed content are included in deployment package.
studio.job.deployContentToEnvironment.mandatoryDependenciesCheckEnabled: true
# Publishing default status message
studio.job.deployContentToEnvironment.status.message.default: "idle|Idle"
# Publishing idle status message
studio.job.deployContentToEnvironment.status.message.idle: "idle|Last successful publish was for package:
{package_id} on {datetime} with {package_size} items"
# Publishing busy status message
studio.job.deployContentToEnvironment.status.message.busy: "busy|Currently publishing item: {item_path} on {datetime}"
# Publishing publishing status message
studio.job.deployContentToEnvironment.status.message.publishing: "publishing|Currently publishing package: {package_id} on {datetime}"
# Publishing queued status message
studio.job.deployContentToEnvironment.status.message.queued: "queued|Items queued for publishing"
# Publishing stopped by error status message
studio.job.deployContentToEnvironment.status.message.stopped.error: "stopped|Stopped while trying to publish item: {item_path} on {datetime}"
# Publishing stopped by user status message
studio.job.deployContentToEnvironment.status.message.stopped.user: "stopped|User {username} disabled publishing for
site on {datetime}"
# Publishing stopped by user status message
studio.job.deployContentToEnvironment.status.message.started.user: "started|User {username} enabled publishing for
site on {datetime}"
# Defines master publishing node in clustered environment. Value false disables publishing (even in non-clustered environment).
studio.job.deployment.masterPublishingNode: true

######################################################################
##                   Content Type Filter Patterns                   ##
######################################################################
# Define dashboard filter pattern for pages. Value is regular expression executed against content path.
studio.contentTypes.filter.pages.includePattern: ^/page/.*
# Define dashboard filter pattern for components. Value is regular expression executed against content path.
studio.contentTypes.filter.components.includePattern: ^/component/.*
# Define dashboard filter pattern for documents. Value is regular expression executed against content path.
studio.contentTypes.filter.documents.includePattern: ^/document/.*

############################################################
##                    Preview Deployer                    ##
############################################################
# Default preview deployer URL (can be overridden per site)
studio.preview.defaultPreviewDeployerUrl: http://localhost:9191/api/1/target/deploy/{siteEnv}/{siteName}
# Default preview create target URL (can be overridden per site)
studio.preview.createTargetUrl: http://localhost:9191/api/1/target/upsert
# Default preview create target URL (can be overridden per site)
studio.preview.deleteTargetUrl: http://localhost:9191/api/1/target/delete-if-exists/{siteEnv}/{siteName}
# URL to the preview repository (aka Sandbox) where authors save work-in-progress
studio.preview.repoUrl: ${sys:crafter.data.dir}/repos/sites/{siteName}/sandbox
# URL to the preview Crafter Engine
studio.preview.engineUrl: http://localhost:8080
# Name of template to use with the deployer for preview
studio.preview.templateName: local
# Replace existing configuration if one exists?
studio.preview.replace: true
# Disable deploy cron job for preview target
studio.preview.disableDeployCron: true

# Name of the template to use with the deployer for authoring
studio.authoring.templateName: authoring

############################################################
##                   Preview Search                       ##
############################################################
studio.preview.search.createUrl: http://localhost:8080/crafter-search/api/2/admin/index/create
studio.preview.search.deleteUrl: http://localhost:8080/crafter-search/api/2/admin/index/delete/{siteName}

############################################################
##                   Publishing Manager                   ##
############################################################
# Defines file name for index files (page containers). Default value is index.xml
studio.publishingManager.indexFile: index.xml
# Turn on/off (value true/false) publishing without dependencies.
# When turned on, deployment engine does not check for missing mandatory dependencies of published content.
studio.publishingManager.publishingWithoutDependencies.enabled: false

##################################################
##                   Database                   ##
##################################################
# Embedded database configuration
# JDBC driver and Java class used for accessing crafter database
studio.db.driver: org.mariadb.jdbc.Driver
# Username used for authentication to access crafter database.
studio.db.username: crafter
# Password used for authentication to access crafter database.
studio.db.password: crafter
# Connection string used when connecting database with JDBC driver
# Format:
# jdbc:DATABASE_PLATFORM;databaseName=DATABASE_NAME;create=true;user=DATABASE_USERNAME;password=DATABASE_USER_PASSWORD
# Note that a relative path is not suitable for a production deployment
studio.db.url: jdbc:mariadb://127.0.0.1:33306/crafter?user=crafter&password=crafter
# Defines initial number of database connections in database connection pool
studio.db.pool.initialConnections: 10
# Defines maximum number of active database connections in database connection pool
studio.db.pool.maxActiveConnections: 100
# Defines maximum number of idle database connections to retain in database connection pool.
studio.db.pool.maxIdleConnections: 30
# Defines minimum number of idle database connections to retain in database connection pool.
studio.db.pool.minIdleConnections: 10
# Defines maximum waiting time for a database connection to become available (value is in milliseconds).
studio.db.pool.maxWaitTime: 10000
# Turn database initializer on (value true) or off (value false).
# When initializer is turned off, system will not try to initialize database on startup.
# When system is starting for the first time initializer must be turned on.
# When database already exists, initializer can be turned off for faster startup. If database is deleted or dropped
# for any reason, initializer needs to be turned on.
studio.db.initializer.enabled: true
# Connection string used to initialize database
studio.db.initializer.url: jdbc:mariadb://127.0.0.1:33306?user=root&password=
# Configure database SQL script location
studio.db.initializer.configureDbscriptLocation: crafter/studio/database/configureDB.sql
# Create schema SQL script location
studio.db.initializer.createSchemaScriptLocation: crafter/studio/database/createSchema.sql
# Create database SQL script location
studio.db.initializer.createDbscriptLocation: crafter/studio/database/createDDL.sql
# Enable random admin password generation
studio.db.initializer.randomAdminPassword.enabled: false
# Random admin password length
studio.db.initializer.randomAdminPassword.length: 16
# Random admin password allowed chars
studio.db.initializer.randomAdminPassword.chars: ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*_=+-/
# Test database connections retrieved from the pool before being used (value true).
# If value is set to false database connection will not be tested before being used.
studio.db.testOnBorrow: true
# The SQL query to validate the connection for database
studio.db.validationQuery: SELECT 1
# Defines the amount of time, in seconds, that connection validation will wait for a response from the database when executing a validation query.
# Use a value less than or equal to 0 for no timeout.
studio.db.validationInterval: 34000
# Base folder for the embedded database
studio.db.basePath: ${sys:crafter.home}/dbms
# Data folder for the embedded database
studio.db.dataPath: ${sys:crafter.data.dir}/db
# Port number for the embedded database (note this must match what's in the connection URLs in this config file)
studio.db.port: 33306
# Socket path for the embedded database
studio.db.socket: /tmp/MariaDB4j.33306.sock

##########################################################
##                   Asset Processing                   ##
##########################################################
# The global Tinify API key used for image processing (empty by default)
studio.configuration.asset.processing.tinify.apiKey:

##########################################################
##             Upgrade Configuration                    ##
##########################################################

# Name of the branch to do upgrade commits
studio.upgrade.branchName: site-upgrade
# Message for the merge commit after upgrading
studio.upgrade.commitMessage: Successful site upgrade
# Path for the site version file
studio.upgrade.versionFile: /config/studio/studio_version.xml
# Path for the site version template
studio.upgrade.versionTemplate: classpath:crafter/studio/upgrade/update-version.xslt
# Path for the site version default file
studio.upgrade.versionDefault: classpath:crafter/studio/upgrade/studio_version.xml
# XPath for querying the version
studio.upgrade.versionXPath: '/*[1]/version/text()'
# Default version for sites when there is none (avoid any upgrade)
studio.upgrade.defaultVersion.site: 3.0.x
# Default version for files when there is none
studio.upgrade.defaultVersion.file: 1
# Pipelines configuration file
studio.upgrade.configurationFile: classpath:crafter/studio/upgrade/pipelines.yaml
# Common prefix for the pipelines
studio.upgrade.pipeline.prefix: pipelines
# Name for the system pipeline
studio.upgrade.pipeline.system: system
# Name for the site pipeline
studio.upgrade.pipeline.site: site
# Name for the blueprint pipeline
studio.upgrade.pipeline.blueprint: blueprint
# Prefix for the configuration file pipeline
studio.upgrade.pipeline.configurations: configurations
# Folder to look for database scripts
studio.upgrade.scriptFolder: crafter/studio/database/

################################################################
##                   Publishing Thread Pool                   ##
################################################################
# Thread name prefix
studio.publishing.threadPool.namePrefix: Studio_Publisher_Thread_Pool
# Thread pool size
studio.publishing.threadPool.corePoolSize: 10
# Thread pool max size
studio.publishing.threadPool.maxPoolSize: 20

################################################################
##                   Clustering Thread Pool                   ##
################################################################
# Sandbox Sync Job interval
studio.clustering.sandboxSyncJob.interval: 5000
# Published Sync Job interval
studio.clustering.publishedSyncJob.interval: 60000
# Heartbeat Job interval
studio.clustering.heartbeatJob.interval: 10000
# Inactivty Check Job interval
studio.clustering.inactivtyCheckJob.interval: 30000
# Thread name prefix
studio.clustering.threadPool.namePrefix: Studio_Clustering_Thread_Pool
# Thread pool size
studio.clustering.threadPool.corePoolSize: 10
# Thread pool max size
studio.clustering.threadPool.maxPoolSize: 20
# Cluster member after heartbeat stale for amount of minutes will be declared inactive
studio.clustering.heartbeatStale.timeLimit: 5
# Cluster member after being inactive for amount of minutes will be removed from cluster
studio.clustering.incativity.timeLimit: 5

################################################################
##                             CORS                           ##
################################################################
# This is configured as permissive by default for ease of deployment
# Remember to tighten this up for production

# Disable CORS headers completely
studio.cors.disable: false
# Value for the Access-Control-Allow-Origin header
studio.cors.origins: '*'
# Value for the Access-Control-Allow-Headers header
studio.cors.headers: '*'
# Value for the Access-Control-Allow-Methods header
studio.cors.methods: '*'
# Value for the Access-Control-Allow-Credentials header
studio.cors.credentials: true
# Value for the Access-Control-Max-Age header
studio.cors.maxage: -1
