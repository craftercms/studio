<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (C) 2007-2023 Crafter Software Corporation. All Rights Reserved.
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License version 3 as published by
  ~ the Free Software Foundation.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- Listeners -->

    <bean id="loginAuditListener" class="org.craftercms.studio.impl.v2.security.listener.AuditLoginListener">
        <constructor-arg name="studioConfiguration" ref="studioConfiguration"/>
        <constructor-arg name="cstudioSiteServiceSimple" ref="cstudioSiteServiceSimple"/>
        <constructor-arg name="auditServiceInternal" ref="auditServiceInternal"/>
    </bean>

    <bean id="logoutAuditListener" class="org.craftercms.studio.impl.v2.security.listener.AuditLogoutListener">
        <constructor-arg name="studioConfiguration" ref="studioConfiguration"/>
        <constructor-arg name="cstudioSiteServiceSimple" ref="cstudioSiteServiceSimple"/>
        <constructor-arg name="auditServiceInternal" ref="auditServiceInternal"/>
    </bean>

    <bean id="accessTokenAuthenticationListener"
          class="org.craftercms.studio.impl.v2.security.listener.AccessTokenAuthenticationListener">
        <constructor-arg name="accessTokenService" ref="accessTokenService"/>
    </bean>

    <bean id="loginAttemptListener" class="org.craftercms.studio.impl.v2.security.listener.LoginAttemptListener">
        <constructor-arg name="loginAttemptManager" ref="loginAttemptManager"/>
    </bean>

    <!-- Users -->

    <bean id="passwordEncoder" class="org.craftercms.studio.impl.v2.security.crypto.PasswordEncoder"/>

    <bean id="userDetailsCache" class="org.craftercms.commons.cache.GuavaCacheFactoryBean">
        <property name="maxSize" value="#{studioConfiguration.getProperty('studio.security.db.cache.maxSize')}"/>
        <property name="timeToLive" value= "#{studioConfiguration.getProperty('studio.security.db.cache.timeToLive')}"/>
    </bean>

    <bean id="studioUserDetailsService" class="org.craftercms.studio.impl.v2.security.userdetails.DbUserDetailsService">
        <constructor-arg name="userDao" ref="userDao"/>
        <constructor-arg name="loginAttemptManager" ref="loginAttemptManager"/>
    </bean>

    <bean id="daoAuthenticationUserDetailsService"
          class="org.craftercms.studio.impl.v2.security.userdetails.DbAuthenticationUserDetailsService">
        <constructor-arg name="userDao" ref="userDao"/>
        <constructor-arg name="cache" ref="userDetailsCache"/>
    </bean>

    <!-- Authentication -->

    <bean id="dbAuthenticationProvider"
          class="org.craftercms.studio.impl.v2.security.authentication.db.DbAuthenticationProvider">
        <property name="userDetailsService" ref="studioUserDetailsService"/>
        <property name="passwordEncoder" ref="passwordEncoder"/>
        <property name="preAuthenticationChecks" ref="deletedUserDetailsChecker"/>
    </bean>

    <bean id="publicUrlMatcher" class="org.craftercms.studio.impl.v2.utils.spring.security.OrRegexRequestMatcher">
        <constructor-arg name="patterns"
                         value="#{studioConfiguration.getProperty(T(org.craftercms.studio.api.v2.utils.StudioConfiguration).SECURITY_PUBLIC_URLS)}"/>
    </bean>

    <bean id="deletedUserDetailsChecker"
          class="org.craftercms.studio.impl.v2.security.authentication.DeletedUserDetailsChecker"/>

    <bean id="sessionExpiredStrategy"
          class="org.craftercms.studio.impl.v2.security.web.session.StatusCodeSessionInformationExpiredStrategy"/>

    <bean id="loginAttemptManager" class="org.craftercms.studio.impl.v2.security.LoginAttemptManagerImpl">
        <constructor-arg name="maxTrackedUsernames"
                         value="#{studioConfiguration.getProperty('studio.security.login.lock.maxTrackedUsernames')}"/>
        <constructor-arg name="baseTimeSeconds"
                         value="#{studioConfiguration.getProperty('studio.security.login.lock.baseTimeSeconds')}"/>
        <constructor-arg name="maxTimeSeconds"
                         value="#{studioConfiguration.getProperty('studio.security.login.lock.maxTimeSeconds')}"/>
        <constructor-arg name="enabled"
                         value="#{studioConfiguration.getProperty('studio.security.login.lock.enabled')}"/>
    </bean>

    <!-- Permissions -->

    <bean id="crafter.studioSubjectResolver" class="org.craftercms.studio.permissions.SubjectResolverImpl">
        <constructor-arg name="securityService" ref="cstudioSecurityService"/>
    </bean>

    <bean id="crafter.studioPermissionResolver" class="org.craftercms.studio.permissions.PermissionResolverImpl">
        <constructor-arg name="securityService" ref="cstudioSecurityService"/>
        <constructor-arg name="studioConfiguration" ref="studioConfiguration" />
    </bean>

    <bean id="crafter.studioCompositePermissionResolver"
          class="org.craftercms.studio.permissions.CompositePermissionResolverImpl">
        <constructor-arg name="securityService" ref="cstudioSecurityService"/>
        <constructor-arg name="studioConfiguration" ref="studioConfiguration" />
    </bean>

    <bean id="crafter.studioPermissionOrOwnershipResolver"
          class="org.craftercms.studio.permissions.PermissionOrOwnershipResolverImpl">
        <property name="securityService" ref="cstudioSecurityService"/>
        <property name="studioConfiguration" ref="studioConfiguration" />
        <property name="itemServiceInternal" ref="itemServiceInternal" />
    </bean>

    <bean id="crafter.studioPermissionEvaluator"
          class="org.craftercms.commons.security.permissions.impl.PermissionEvaluatorImpl">
        <constructor-arg name="subjectResolver" ref="crafter.studioSubjectResolver"/>
        <constructor-arg name="permissionResolver" ref="crafter.studioPermissionResolver"/>
    </bean>

    <bean id="crafter.studioCompositePermissionEvaluator"
          class="org.craftercms.commons.security.permissions.impl.PermissionEvaluatorImpl">
        <constructor-arg name="subjectResolver" ref="crafter.studioSubjectResolver"/>
        <constructor-arg name="permissionResolver" ref="crafter.studioCompositePermissionResolver"/>
    </bean>

    <bean id="crafter.studioPermissionOrOwnershipEvaluator"
          class="org.craftercms.commons.security.permissions.impl.PermissionEvaluatorImpl">
        <constructor-arg name="subjectResolver" ref="crafter.studioSubjectResolver"/>
        <constructor-arg name="permissionResolver" ref="crafter.studioPermissionOrOwnershipResolver"/>
    </bean>

    <bean id="crafter.HasPermissionAnnotationHandler"
          class="org.craftercms.commons.security.permissions.annotations.HasPermissionAnnotationHandler">
        <constructor-arg name="permissionEvaluators">
            <map>
                <entry key="org.craftercms.commons.security.permissions.DefaultPermission"
                       value-ref="crafter.studioPermissionEvaluator"/>
                <entry key="org.craftercms.studio.permissions.CompositePermission"
                       value-ref="crafter.studioCompositePermissionEvaluator"/>
                <entry key="org.craftercms.studio.permissions.PermissionOrOwnership"
                       value-ref="crafter.studioPermissionOrOwnershipEvaluator"/>
            </map>
        </constructor-arg>
        <constructor-arg name="managementToken" value="#{studioConfiguration.getProperty('studio.configuration.management.authorizationToken')}" />
    </bean>

    <bean id="studio.HasAnyPermissionsAnnotationHandler"
          class="org.craftercms.studio.api.v2.security.HasAnyPermissionsAnnotationHandler">
        <constructor-arg name="permissionEvaluators">
            <map>
                <entry key="org.craftercms.commons.security.permissions.DefaultPermission"
                       value-ref="crafter.studioPermissionEvaluator"/>
                <entry key="org.craftercms.studio.permissions.CompositePermission"
                       value-ref="crafter.studioCompositePermissionEvaluator"/>
            </map>
        </constructor-arg>
        <constructor-arg name="securityService" ref="cstudioSecurityService" />
    </bean>

    <bean id="studio.HasAllPermissionsAnnotationHandler"
          class="org.craftercms.studio.api.v2.security.HasAllPermissionsAnnotationHandler">
        <constructor-arg name="permissionEvaluators">
            <map>
                <entry key="org.craftercms.commons.security.permissions.DefaultPermission"
                       value-ref="crafter.studioPermissionEvaluator"/>
                <entry key="org.craftercms.studio.permissions.CompositePermission"
                       value-ref="crafter.studioCompositePermissionEvaluator"/>
            </map>
        </constructor-arg>
        <constructor-arg name="securityService" ref="cstudioSecurityService" />
    </bean>

    <bean id="studio.requireSiteExistsAnnotationHandler" class="org.craftercms.studio.api.v2.annotation.RequireSiteExistsAnnotationHandler">
        <constructor-arg name="sitesService" ref="sitesService"/>
    </bean>

    <bean id="studio.requireContentExistsAnnotationHandler" class="org.craftercms.studio.api.v2.annotation.RequireContentExistsAnnotationHandler">
        <constructor-arg name="contentRepository" ref="contentRepository"/>
    </bean>

    <bean id="studio.logExecutionTimeAnnotationHandler" class="org.craftercms.studio.api.v2.annotation.LogExecutionTimeAnnotationHandler" />

    <!-- CORS -->

    <bean id="crafter.corsConfigSource" class="org.craftercms.commons.spring.cors.FixedCorsConfigurationSource">
        <constructor-arg name="disableCORS" value="#{studioConfiguration.getProperty('studio.cors.disable')}"/>
        <constructor-arg name="allowOrigins" value="#{studioConfiguration.getProperty('studio.cors.origins')}"/>
        <constructor-arg name="allowMethods" value="#{studioConfiguration.getProperty('studio.cors.headers')}"/>
        <constructor-arg name="allowHeaders" value="#{studioConfiguration.getProperty('studio.cors.methods')}"/>
        <constructor-arg name="allowCredentials" value="#{studioConfiguration.getProperty('studio.cors.credentials')}"/>
        <constructor-arg name="maxAge" value="#{studioConfiguration.getProperty('studio.cors.maxage')}"/>
    </bean>

    <!-- Secure Headers -->

    <bean id="crafter.secureHeaderWriterFilter"
          class="org.craftercms.engine.util.spring.security.ConditionalHeaderWriterFilter">
        <constructor-arg name="enabled" value="#{studioConfiguration.getProperty('studio.security.headers.enabled')}"/>
        <constructor-arg name="headerWriters">
            <list>
                <bean class="org.springframework.security.web.header.writers.CacheControlHeadersWriter"/>
                <bean class="org.springframework.security.web.header.writers.HstsHeaderWriter"/>
                <bean class="org.springframework.security.web.header.writers.XXssProtectionHeaderWriter"/>
                <bean class="org.springframework.security.web.header.writers.frameoptions.XFrameOptionsHeaderWriter">
                    <constructor-arg index="0" value="SAMEORIGIN"/>
                </bean>
                <bean class="org.springframework.security.web.header.writers.XContentTypeOptionsHeaderWriter"/>
                <bean class="org.springframework.security.web.header.writers.ReferrerPolicyHeaderWriter"/>
                <bean class="org.springframework.security.web.header.writers.ContentSecurityPolicyHeaderWriter">
                    <constructor-arg value="#{studioConfiguration.getProperty('studio.security.headers.contentSecurityPolicy.value')}"/>
                    <property name="reportOnly" value="#{studioConfiguration.getProperty('studio.security.headers.contentSecurityPolicy.reportOnly')}"/>
                </bean>
                <bean class="org.springframework.security.web.header.writers.StaticHeadersWriter">
                    <constructor-arg name="headers">
                        <list>
                            <bean class="org.springframework.security.web.header.Header">
                                <constructor-arg name="headerName" value="X-Permitted-Cross-Domain-Policies"/>
                                <constructor-arg name="headerValues" value="#{studioConfiguration.getProperty('studio.security.headers.permittedCrossDomainPolicies.value')}"/>
                            </bean>
                        </list>
                    </constructor-arg>
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <!-- CSRF -->

    <!-- If we replace the session in the future we can remove CSRF completely -->
    <bean id="csrfTokenRepository" class="org.springframework.security.web.csrf.CookieCsrfTokenRepository">
        <!-- The UI needs to have access to the cookie -->
        <property name="cookieHttpOnly" value="false"/>
    </bean>

    <bean id="csrfTokenRequestHandler" class="org.craftercms.studio.api.v2.security.StudioCsrfTokenRequestHandler" />

    <!--  Available Actions  -->
    <bean id="studio.availableActionsResolver"
          class="org.craftercms.studio.impl.v2.security.AvailableActionsResolverImpl" >
        <constructor-arg name="studioConfiguration" ref="studioConfiguration"/>
        <constructor-arg name="configurationService" ref="configurationService"/>
        <constructor-arg name="userServiceInternal" ref="userServiceInternal"/>
        <constructor-arg name="cache" ref="configurationCache"/>
    </bean>

    <bean id="studio.semanticsAvailableActionsResolver"
          class="org.craftercms.studio.impl.v2.security.SemanticsAvailableActionsResolverImpl">
        <property name="availableActionsResolver" ref="studio.availableActionsResolver" />
        <property name="contentServiceInternal" ref="contentServiceInternal" />
        <property name="servicesConfig" ref="cstudioServicesConfig" />
        <property name="workflowServiceInternal" ref="studio.workflowServiceInternal" />
        <property name="userServiceInternal" ref="userServiceInternal" />
        <property name="studioBlobStoreResolver" ref="blobStoreResolver" />
        <property name="contentTypeServiceInternal" ref="contentTypeServiceInternal"/>
        <property name="securityServiceV1" ref="cstudioSecurityService"/>
    </bean>

    <bean id="studio.loginPageFilter"
        class="org.craftercms.studio.impl.v2.security.LoginPageFilter" />

    <!--  Forgot Password  -->
    <!-- Implemented as an ObjectFactoryCreatingFactoryBean so we can easily create
     new tasks programmatically as needed -->
    <bean id="forgotPasswordTaskFactory"
          class="org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean">
        <property name="targetBeanName" value="forgotPasswordTask"/>
    </bean>
    <!-- 'prototype' so we get a new object every time -->
    <bean id="forgotPasswordTask" class="org.craftercms.studio.impl.v2.security.password.EmailForgotPasswordTaskFactory"
          scope="prototype">
        <constructor-arg name="userServiceInternal" ref="userServiceInternal"/>
        <constructor-arg name="userService" ref="userService"/>
        <constructor-arg name="studioConfiguration" ref="studioConfiguration"/>
        <constructor-arg name="freeMarkerConfig" ref="crafter.freeMarkerConfigFactory"/>
        <constructor-arg name="emailService" ref="mailSender"/>
        <constructor-arg name="emailServiceNoAuth" ref="mailSenderNoAuth"/>
    </bean>

</beans>
