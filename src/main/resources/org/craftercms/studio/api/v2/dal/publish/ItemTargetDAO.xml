<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (C) 2007-2024 Crafter Software Corporation. All Rights Reserved.
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License version 3 as published by
  ~ the Free Software Foundation.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.craftercms.studio.api.v2.dal.publish.ItemTargetDAO">
    <resultMap id="ItemTargetMap" type="org.craftercms.studio.api.v2.dal.publish.ItemTarget" autoMapping="true">
    </resultMap>

    <select id="getByItemId" resultMap="ItemTargetMap">
        SELECT it.*
        FROM item_target it
        WHERE it.item_id = #{itemId}
    </select>

    <update id="updateForCompletePackage">
        INSERT INTO item_target
        (item_id, target, previous_path, last_published_on, published_commit_id)
        SELECT itemIds.item_id, #{target}, null, #{timestamp}, #{commitId}
        FROM <include refid="org.craftercms.studio.api.v2.dal.publish.PublishDAO.getSuccessfulItemsForPackage"/> AS itemIds
        ON DUPLICATE KEY UPDATE
        previous_path = null,
        last_published_on = #{timestamp},
        published_commit_id = #{commitId}
    </update>

    <update id="clearPreviousPathForCompletePackage">
        UPDATE item_target
        SET previous_path = null
        WHERE target = #{target}
        AND previous_path IN (
            SELECT successfulItems.path
            FROM <include refid="org.craftercms.studio.api.v2.dal.publish.PublishDAO.getSuccessfulItemsForPackage"/> AS successfulItems
        )
    </update>

    <insert id="insertForInitialPublish">
        INSERT INTO item_target
        (item_id, target, previous_path, published_commit_id, last_published_on)
        SELECT i.id, t.target, null, #{commitId}, #{timestamp}
        FROM item i,
        (
            <foreach collection="targets" item="target" index="index" separator="UNION" >
                (SELECT #{target} target)
            </foreach>
        ) AS t
        WHERE i.site_id = #{siteId}
    </insert>

    <insert id="initStaging">
        INSERT INTO item_target
        (item_id, target, previous_path, last_published_on, published_commit_id)
        SELECT i.id, #{stagingTarget}, it.previous_path, it.last_published_on, it.published_commit_id
        FROM item i INNER JOIN item_target it ON i.id = it.item_id
        WHERE i.site_id = #{siteId}
        AND it.target = #{liveTarget}
    </insert>
</mapper>
