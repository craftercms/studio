<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (C) 2007-2020 Crafter Software Corporation. All Rights Reserved.
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License version 3 as published by
  ~ the Free Software Foundation.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.craftercms.studio.api.v2.dal.ClusterDAO">

    <resultMap id="ClusterMap" type="org.craftercms.studio.api.v2.dal.ClusterMember">
        <id property="id" column="id"/>
        <result property="localAddress" column="local_address" />
        <result property="state" column="state" />
        <result property="heartbeat" column="heartbeat" />
        <result property="gitUrl" column="git_url" />
        <result property="gitRemoteName" column="git_remote_name" />
        <result property="gitAuthType" column="git_auth_type" />
        <result property="gitUsername" column="git_username" />
        <result property="gitPassword" column="git_password" />
        <result property="gitToken" column="git_token" />
        <result property="gitPrivateKey" column="git_private_key" />
        <result property="available" column="available" />
    </resultMap>

    <resultMap id="RemoteRepositoryMap" type="org.craftercms.studio.api.v2.dal.RemoteRepository">
        <id property="id" column="id"/>
        <result property="siteId" column="site_id"/>
        <result property="remoteName" column="remote_name"/>
        <result property="remoteUrl" column="remote_url"/>
        <result property="authenticationType" column="authentication_type"/>
        <result property="remoteUsername" column="remote_username"/>
        <result property="remotePassword" column="remote_password"/>
        <result property="remoteToken" column="remote_token"/>
        <result property="remotePrivateKey" column="remote_private_key"/>
    </resultMap>

    <resultMap id="ClusterSiteRecordMap" type="org.craftercms.studio.api.v2.dal.ClusterSiteRecord">
        <id property="clusterNodeId" column="cluster_node_id"/>
        <id property="siteId" column="site_id" />
        <result property="clusterNodeLocalAddress" column="cluster_node_local_address" />
        <result property="siteIdString" column="site_id_string" />
        <result property="nodeLastCommitId" column="node_last_commit_id" />
        <result property="nodeLastVerifiedGitlogCommitId" column="node_last_verified_gitlog_commit_id" />
        <result property="nodeLastSyncedGitlogCommitId" column="node_last_synced_gitlog_commit_id" />
        <result property="state" column="site_state" />
        <result property="publishedRepoCreated" column="site_published_repo_created" />
    </resultMap>

    <select id="getAllMembers" resultMap="ClusterMap">
        SELECT * FROM cluster WHERE available = 1
    </select>

    <select id="getOtherMembers" resultMap="ClusterMap" parameterType="Map">
        SELECT * FROM cluster WHERE local_address &lt;&gt; #{localAddress} AND state = #{state} AND available = 1
    </select>

    <select id="countActiveMembers" resultType="int" parameterType="Map">
        SELECT count(*) FROM cluster WHERE state = #{state} AND available = 1
    </select>

    <select id="getMemberById" resultMap="ClusterMap" parameterType="long">
        SELECT * FROM cluster WHERE id = #{clusterMemberId}
    </select>

    <select id="memberExists" resultType="int" parameterType="String">
        SELECT COUNT(*) FROM cluster WHERE git_url = #{memberUrl} AND available = 1
    </select>

    <select id="memberPrimaryPublisher" resultType="int" parameterType="Map">
        SELECT COUNT(*) FROM cluster c INNER JOIN cluster_status cs ON c.id = cs.primary_publisher_id
        WHERE c.local_address = #{localAddress} AND c.available = 1 AND c.state = #{state}
    </select>

    <insert id="addMember" parameterType="org.craftercms.studio.api.v2.dal.ClusterMember">
        INSERT INTO cluster (local_address, state, git_url, git_remote_name, git_auth_type, git_username,
        git_password, git_token, git_private_key, available)
        VALUES (#{localAddress}, #{state}, #{gitUrl}, #{gitRemoteName}, #{gitAuthType}, #{gitUsername},
        #{gitPassword}, #{gitToken}, #{gitPrivateKey}, 1)
    </insert>

    <update id="updateMember" parameterType="org.craftercms.studio.api.v2.dal.ClusterMember">
        UPDATE cluster SET
        state = #{state},
        git_url = #{gitUrl},
        git_remote_name = #{gitRemoteName},
        git_auth_type = #{gitAuthType},
        git_username = #{gitUsername},
        git_password = #{gitPassword},
        git_token = #{gitToken},
        git_private_key = #{gitPrivateKey},
        available = #{available}
        WHERE id = #{id}
    </update>

    <delete id="deleteRecords" parameterType="java.util.Map">
        DELETE FROM cluster WHERE state = #{inactiveState} AND id IN
        <foreach collection="memberIds" index="index" separator="," item="memberId" open="(" close=")">
            #{memberId}
        </foreach>
    </delete>

    <update id="removeMembers" parameterType="java.util.Map">
        UPDATE cluster SET available = 0 WHERE state = #{inactiveState} AND id IN
        <foreach collection="memberIds" index="index" separator="," item="memberId" open="(" close=")">
            #{memberId}
        </foreach>
    </update>

    <select id="countRegistrations" resultType="int" parameterType="java.util.Map" >
        SELECT COUNT(*) FROM cluster WHERE local_address = #{localAddress} AND available = 1
    </select>

    <delete id="deleteRecordByLocalAddress" parameterType="java.util.Map">
        DELETE FROM cluster WHERE local_address = #{localAddress}
    </delete>

    <update id="removeMemberByLocalAddress" parameterType="java.util.Map">
        UPDATE cluster SET available = 0 WHERE local_address = #{localAddress}
    </update>

    <update id="updateHeartbeat" parameterType="java.util.Map">
        UPDATE cluster SET
        heartbeat = CURRENT_TIMESTAMP,
        state = #{state},
        available = #{available}
        WHERE local_address = #{localAddress}
    </update>

    <select id="getMembersWithStaleHeartbeat" resultMap="ClusterMap" parameterType="java.util.Map">
        SELECT * FROM cluster
        WHERE heartbeat &lt; (CURRENT_TIMESTAMP - INTERVAL #{heartbeatStaleLimit} MINUTE)
        AND available = 1
    </select>

    <select id="getInactiveMembersWithStaleHeartbeat" resultMap="ClusterMap" parameterType="java.util.Map">
        SELECT * FROM cluster
        WHERE heartbeat &lt; (CURRENT_TIMESTAMP - INTERVAL #{inactivityLimit} MINUTE)
        AND state = #{inactiveState}
        AND available = 1
    </select>

    <select id="getMemberByRemoteName" resultMap="ClusterMap" parameterType="java.util.Map">
        SELECT * FROM cluster
        WHERE git_remote_name = #{remoteName}
        AND available = 1
    </select>

    <select id="getMissingClusterNodeRemoteRepositories" resultMap="RemoteRepositoryMap" >
        SELECT rr.* FROM
            (SELECT * FROM cluster c INNER JOIN cluster_remote_repository crr ON c.id = crr.cluster_id
            WHERE c.local_address = #{localAddress} AND c.available = 1) as c2
                RIGHT JOIN remote_repository rr ON rr.id = c2.remote_repository_id
        WHERE rr.site_id = #{siteId} AND c2.id IS NULL
    </select>

    <insert id="addClusterRemoteRepository">
        INSERT INTO cluster_remote_repository (cluster_id, remote_repository_id)
        VALUES (#{clusterId}, #{remoteRepositoryId})
        ON DUPLICATE KEY
        UPDATE
            record_last_updated = CURRENT_TIMESTAMP
    </insert>

    <select id="getMemberByLocalAddress" resultMap="ClusterMap" parameterType="java.util.Map">
        SELECT * FROM cluster
        WHERE local_address = #{localAddress}
        LIMIT 1
    </select>

    <insert id="insertClusterSiteSyncRepo">
        INSERT INTO cluster_site_sync_repo (cluster_node_id, site_id, node_last_commit_id,
        node_last_verified_gitlog_commit_id, node_last_synced_gitlog_commit_id)
        VALUES (#{clusterNodeId}, #{siteId}, #{nodeLastCommitId}, #{nodeLastVerifiedGitlogCommitId},
        #{nodeLastSyncedGitlogCommitId})
        ON DUPLICATE KEY
        UPDATE
            node_last_commit_id = #{nodeLastCommitId},
            node_last_verified_gitlog_commit_id = #{nodeLastVerifiedGitlogCommitId},
            node_last_synced_gitlog_commit_id = #{nodeLastSyncedGitlogCommitId}
    </insert>

    <update id="updateNodeLastVerifiedGitlogCommitId" >
        UPDATE cluster_site_sync_repo SET node_last_verified_gitlog_commit_id = #{commitId}
        WHERE site_id = #{siteId} AND cluster_node_id = #{clusterNodeId}
    </update>

    <update id="updateNodeLastCommitId" >
        UPDATE cluster_site_sync_repo SET node_last_commit_id = #{commitId}
        WHERE site_id = #{siteId} AND cluster_node_id = #{clusterNodeId}
    </update>

    <update id="updateNodeLastSyncedGitlogCommitId" >
        UPDATE cluster_site_sync_repo SET node_last_synced_gitlog_commit_id = #{commitId}
        WHERE site_id = #{siteId} AND cluster_node_id = #{clusterNodeId}
    </update>

    <select id="getNodeLastCommitId" resultType="java.lang.String">
        SELECT cssr.node_last_commit_id
        FROM cluster c INNER JOIN cluster_site_sync_repo cssr ON c.id = cssr.cluster_node_id
                       INNER JOIN site s on s.id = cssr.site_id
        WHERE c.id = #{clusterNodeId}
        AND c.available = 1
        AND cssr.site_id = #{siteId} AND s.deleted = 0 limit 1
    </select>

    <select id="getNodeLastVerifiedGitlogCommitId" resultType="java.lang.String">
        SELECT cssr.node_last_verified_gitlog_commit_id
        FROM cluster c INNER JOIN cluster_site_sync_repo cssr ON c.id = cssr.cluster_node_id
                       INNER JOIN site s on s.id = cssr.site_id
        WHERE c.id = #{clusterNodeId}
        AND c.available = 1
        AND cssr.site_id = #{siteId} AND s.deleted = 0 limit 1
    </select>

    <select id="existsClusterSiteSyncRepo" resultType="int">
        SELECT count(1)
        FROM site s INNER JOIN cluster_site_sync_repo cssr INNER JOIN cluster c
        ON s.id = cssr.site_id AND cssr.cluster_node_id = c.id
        WHERE s.id = #{siteId}
        AND c.available = 1
        AND c.id = #{clusterNodeId}
    </select>

    <update id="setSiteState" >
        UPDATE cluster_site_sync_repo SET site_state = #{state}
        WHERE site_id = #{siteId} AND cluster_node_id = #{clusterNodeId}
    </update>

    <update id="setPublishedRepoCreated" >
        UPDATE cluster_site_sync_repo SET site_published_repo_created = 1
        WHERE site_id = #{siteId} AND cluster_node_id = #{clusterNodeId}
    </update>

    <select id="getSiteStateAcrossCluster" resultMap="ClusterSiteRecordMap">
        SELECT cssr.*, s.site_id AS site_id_string, c.local_address as cluster_node_local_address
        FROM site s INNER JOIN cluster_site_sync_repo cssr INNER JOIN cluster c
            ON s.id = cssr.site_id AND cssr.cluster_node_id = c.id
        WHERE s.site_id = #{siteId}
        AND c.available = 1
    </select>

    <select id="getClusterSiteRecord" resultMap="ClusterSiteRecordMap">
        SELECT cssr.*, s.site_id AS site_id_string, c.local_address as cluster_node_local_address
        FROM site s INNER JOIN cluster_site_sync_repo cssr INNER JOIN cluster c
            ON s.id = cssr.site_id AND cssr.cluster_node_id = c.id
        WHERE s.id = #{siteId} AND cluster_node_id = #{clusterNodeId} AND c.available = 1
    </select>

    <insert id="upsertClusterPrimary" >
        INSERT INTO cluster_status (primary_publisher_id) VALUES (#{clusterNodeId})
        ON DUPLICATE KEY
        UPDATE primary_publisher_id = #{clusterNodeId}
    </insert>
</mapper>