<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (C) 2007-2024 Crafter Software Corporation. All Rights Reserved.
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License version 3 as published by
  ~ the Free Software Foundation.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.craftercms.studio.api.v2.dal.ItemDAO">
    <resultMap id="ItemMap" type="org.craftercms.studio.api.v2.dal.Item">
        <id property="id" column="id" />
        <result property="siteId" column="site_id" />
        <result property="siteName" column="site_name" />
        <result property="path" column="path" />
        <result property="previewUrl" column="preview_url" />
        <result property="state" column="state" />
        <result property="lockedBy" column="locked_by" />
        <result property="createdBy" column="created_by" />
        <result property="createdOn" column="created_on" />
        <result property="lastModifiedBy" column="last_modified_by" />
        <result property="lastModifiedOn" column="last_modified_on" />
        <result property="lastPublishedOn" column="last_published_on" />
        <result property="submittedOn" column="submitted_on" />
        <result property="label" column="label" />
        <result property="contentTypeId" column="content_type_id" />
        <result property="systemType" column="system_type" />
        <result property="mimeType" column="mime_type" />
        <result property="localeCode" column="locale_code" />
        <result property="translationSourceId" column="translation_source_id" />
        <result property="size" column="size" />
        <result property="parentId" column="parent_id" />
        <result property="previewUrl" column="preview_url" />
        <result property="ignoredAsInt" column="ignored" />
        <result property="childrenCount" column="children_count" />
        <association property="modifier" column="modifier"
                     select="org.craftercms.studio.api.v2.dal.UserDAO.getPerson"/>
        <association property="creator" column="creator"
                     select="org.craftercms.studio.api.v2.dal.UserDAO.getPerson"/>
        <association property="lockOwner" column="lock_owner"
                     select="org.craftercms.studio.api.v2.dal.UserDAO.getPerson"/>
        <association property="submitter" column="submitter"
                     select="org.craftercms.studio.api.v2.dal.UserDAO.getPerson"/>
    </resultMap>

    <resultMap id="DetailedItemMap" type="org.craftercms.studio.api.v2.dal.DetailedItem"
    extends="ItemMap">
        <result property="stagingScheduledDate" column="staging_scheduleddate" />
        <result property="stagingPublishedOn" column="staging_published_on" />
        <result property="stagingUsername" column="staging_username" />
        <result property="liveScheduledDate" column="live_scheduleddate" />
        <result property="livePublishedOn" column="live_published_on" />
        <result property="liveUsername" column="live_username" />
        <association property="lockOwner" column="lock_owner"
                     select="org.craftercms.studio.api.v2.dal.UserDAO.getPerson"/>
    </resultMap>

    <insert id="upsertEntry" parameterType="org.craftercms.studio.api.v2.dal.Item">
        INSERT INTO item (site_id, path, preview_url, state, locked_by, created_by, created_on, last_modified_by,
        last_modified_on, last_published_on, label, content_type_id, system_type, mime_type, locale_code,
        translation_source_id, size, parent_id, ignored) VALUES
        (#{siteId}, #{path}, #{previewUrl}, #{state}, #{lockedBy}, #{createdBy}, #{createdOn}, #{lastModifiedBy},
         #{lastModifiedOn}, #{lastPublishedOn}, #{label}, #{contentTypeId}, #{systemType}, #{mimeType},
         #{localeCode}, #{translationSourceId}, #{size}, #{parentId}, #{ignoredAsInt})
        ON DUPLICATE KEY
        UPDATE
        site_id = #{siteId},
        path = #{path},
        preview_url = #{previewUrl},
        state = #{state},
        locked_by = #{lockedBy},
        last_modified_by = #{lastModifiedBy},
        last_modified_on = #{lastModifiedOn},
        last_published_on = #{lastPublishedOn},
        label = #{label},
        content_type_id = #{contentTypeId},
        system_type = #{systemType},
        mime_type = #{mimeType},
        locale_code = #{localeCode},
        translation_source_id = #{translationSourceId},
        size = #{size},
        parent_id = #{parentId},
        ignored = #{ignoredAsInt}
    </insert>

    <sql id="getChildrenByPathFilters">
        <if test="localeCode != null">
            AND child.locale_code = #{localeCode}
        </if>
        <if test="keyword != null &amp;&amp; keyword.length > 0">
            <bind name="pattern" value="'%' + keyword + '%'" />
            AND child.label LIKE #{pattern}
        </if>
        <if test="excludes != null &amp;&amp; !excludes.isEmpty()">
            AND child.path NOT IN
            <foreach collection="excludes" item="exclude" open="(" separator="," close=")">
                #{exclude}, CONCAT(#{exclude}, '/index.xml')
            </foreach>
        </if>
        <if test="systemTypes != null &amp;&amp; !systemTypes.isEmpty()">
            AND child.system_type IN
            <foreach collection="systemTypes" item="type" open="(" separator="," close=")">
                #{type}
            </foreach>
        </if>
        <if test="excludeSystemTypes != null &amp;&amp; !excludeSystemTypes.isEmpty()">
            AND child.system_type NOT IN
            <foreach collection="excludeSystemTypes" item="type" open="(" separator="," close=")">
                #{type}
            </foreach>
        </if>
    </sql>

    <select id="getChildrenByPath" resultMap="ItemMap">
        SELECT child.*, child.locked_by AS lock_owner, child.created_by AS creator,
                child.last_modified_by AS modifier,
                submission.submitted_on AS submitted_on,
                submission.submitter AS submitter,
               COUNT(
                <choose>
                    <!-- if filtering by types, then narrow down the count -->
                    <when test="systemTypes != null &amp;&amp; !systemTypes.isEmpty()">
                        CASE WHEN grand_child.system_type IN
                        <foreach collection="systemTypes" item="type" open="(" separator="," close=")">
                            #{type}
                        </foreach>
                        THEN 1 ELSE NULL END
                    </when>
                    <!-- otherwise, count all children -->
                    <otherwise>grand_child.id</otherwise>
                </choose>
               ) as children_count
        FROM item child
            LEFT JOIN item parent ON child.parent_id = parent.id
            LEFT JOIN item grand_child ON grand_child.parent_id = child.id
            LEFT OUTER JOIN (
                        SELECT ipi1.item_id as item_id, pp1.submitter_id AS submitter, pp1.submitted_on AS submitted_on
                        FROM item_publish_item ipi1
                            INNER JOIN publish_item pi1 ON ipi1.publish_item_id = pi1.id
                            INNER JOIN publish_package pp1 ON pi1.package_id = pp1.id
                        WHERE pp1.package_state = 'READY'
                        AND pp1.approval_state IN ('SUBMITTED', 'APPROVED')
                        ORDER BY pp1.submitted_on DESC LIMIT 0, 1 <!-- Get the most recently submitted active publish request -->
                ) as submission ON submission.item_id = child.id
        WHERE parent.site_id = #{siteId}
        AND (parent.path = #{path} OR parent.path = CONCAT(#{path}, '/index.xml'))
        AND (parent.system_type != #{systemTypeFolder}
             OR
             NOT EXISTS(SELECT *
                        FROM item page
                        WHERE page.site_id = parent.site_id
                        AND page.system_type = 'page'
                        AND page.path = CONCAT(parent.path, '/index.xml')))
        AND child.ignored = 0
        AND (child.system_type != #{systemTypeFolder}
             OR
             NOT EXISTS (select * from item page where page.site_id = child.site_id and page.path = concat(child.path, '/index.xml')))
        <include refid="getChildrenByPathFilters"/>
        AND (grand_child.ignored = 0 OR grand_child.ignored IS NULL)
        AND (grand_child.system_type != #{systemTypeFolder}
             OR
             NOT EXISTS (select * from item page where page.site_id = grand_child.site_id and page.path = concat(grand_child.path, '/index.xml')))
        GROUP BY child.id, child.label, child.path, child.system_type
        <choose>
            <when test="sortStrategy == 'alphabetic'">
                ORDER BY child.label ${order}, child.path ${order}
            </when>
            <when test="sortStrategy == 'foldersFirst'">
                ORDER BY IF(FIELD(child.system_type, 'folder')=0,1,0), FIELD(child.system_type, 'folder'),
                    child.label ${order}, child.path ${order}
            </when>
            <when test="sortStrategy == 'lastUpdate'">
                ORDER BY child.last_modified_on ${order}, child.label ${order}, child.path ${order}
            </when>
            <otherwise>
                ORDER BY child.label ${order}, child.path ${order}
            </otherwise>
        </choose>
        LIMIT #{offset},#{limit}
    </select>

    <select id="getChildrenByPathTotal" resultType="Integer">
        SELECT COUNT(1)
        FROM item child
             LEFT JOIN item parent ON child.parent_id = parent.id
        WHERE parent.site_id = #{siteId}
        AND (parent.path = #{path} OR parent.path = CONCAT(#{path}, '/index.xml'))
        AND (parent.system_type != 'folder'
             OR
             NOT EXISTS(SELECT *
                        FROM item page
                        WHERE page.site_id = parent.site_id
                        AND page.system_type = 'page'
                        AND page.path = CONCAT(parent.path, '/index.xml')))
        AND child.ignored = 0
        AND (child.system_type != 'folder'
             OR
             NOT EXISTS (select * from item page where page.site_id = child.site_id and page.path = concat(child.path, '/index.xml')))
        <include refid="getChildrenByPathFilters"/>
    </select>

    <sql id="detailedItemSelect">
        SELECT i.*, i.locked_by AS lock_owner, i.created_by AS creator, i.last_modified_by AS modifier,
                        (
                            SELECT pp1.schedule
                            FROM item_publish_item ipi1
                                INNER JOIN publish_item pi1 ON ipi1.publish_item_id = pi1.id
                                INNER JOIN publish_package pp1 ON pi1.package_id = pp1.id
                            WHERE ipi1.item_id = i.id
                            AND pp1.target = #{stagingEnvironment}
                            AND pp1.package_state = 'READY'
                            AND pp1.approval_state = 'APPROVED'
                            ORDER BY pp1.submitted_on DESC LIMIT 0, 1
                        ) AS staging_scheduleddate,
                        (
                            SELECT pp1.schedule
                            FROM item_publish_item ipi1
                                INNER JOIN publish_item pi1 ON ipi1.publish_item_id = pi1.id
                                INNER JOIN publish_package pp1 ON pi1.package_id = pp1.id
                            WHERE ipi1.item_id = i.id
                            AND pp1.target = #{liveEnvironment}
                            AND pp1.package_state = 'READY'
                            AND pp1.approval_state = 'APPROVED'
                            ORDER BY pp1.submitted_on DESC LIMIT 0, 1
                    ) as live_scheduleddate,
                publishStaging.published_on AS staging_published_on,
                publishStaging.submitter_username AS staging_username,
                publishLive.published_on AS live_published_on,
                publishLive.submitter_username AS live_username,
                COUNT(DISTINCT ichild.id) AS children_count
        FROM item i
            INNER JOIN site s1 ON i.site_id = s1.id
            LEFT OUTER JOIN item ichild ON i.id = ichild.parent_id
            LEFT OUTER JOIN (
                    SELECT ipi1.item_id, pp1.published_on, u.username AS submitter_username
                    FROM item_publish_item ipi1
                        INNER JOIN publish_item pi1 ON ipi1.publish_item_id = pi1.id
                        INNER JOIN publish_package pp1 ON pi1.package_id = pp1.id
                        INNER JOIN user u ON u.id = pp1.submitter_id
                    WHERE pp1.target = #{stagingEnvironment}
                    AND pi1.state = 'PUBLISHED'
                    ORDER BY pp1.published_on desc LIMIT 0, 1
            ) as publishStaging ON publishStaging.item_id = i.id
            LEFT OUTER JOIN (
                    SELECT ipi1.item_id, pp1.published_on, u.username AS submitter_username
                    FROM item_publish_item ipi1
                        INNER JOIN publish_item pi1 ON ipi1.publish_item_id = pi1.id
                        INNER JOIN publish_package pp1 ON pi1.package_id = pp1.id
                        INNER JOIN user u ON u.id = pp1.submitter_id
                    WHERE pp1.target = #{liveEnvironment}
                    AND pi1.state = 'PUBLISHED'
                    ORDER BY pp1.published_on desc LIMIT 0, 1
            ) as publishLive ON publishLive.item_id = i.id
    </sql>

    <select id="getItemById" resultMap="DetailedItemMap">
        <include refid="detailedItemSelect"/>
        WHERE i.id = #{id}
          <!-- Count not ignored children
               Avoid counting both the '/child/' folder and the '/child/index.xml'
          -->
          AND (ichild.ignored = 0 OR ichild.ignored IS NULL)
          AND (ichild.system_type &lt;&gt; #{systemTypeFolder} OR NOT EXISTS
            (SELECT * FROM item i10 WHERE i10.site_id = ichild.site_id AND i10.path = CONCAT(ichild.path, '/index.xml')))
        GROUP BY i.id
        LIMIT 0, 1
    </select>

    <select id="getDetailedItemsByStates" resultMap="DetailedItemMap">
        <include refid="detailedItemSelect"/>
            WHERE i.site_id = #{siteId}
                AND (ichild.ignored = 0 OR ichild.ignored IS NULL)
                AND (ichild.system_type &lt;&gt; #{systemTypeFolder} OR NOT EXISTS
                    (SELECT * FROM item i10 WHERE i10.site_id = ichild.site_id AND i10.path = CONCAT(ichild.path, '/index.xml')))
                AND (i.state &amp; #{statesBitMap}) > 0
                AND i.system_type != #{systemTypeFolder}
            <include refid="filterBySystemType"/>
            GROUP BY i.id
            <include refid="orderBySortFields"/>
            LIMIT #{offset}, #{limit}
    </select>

    <select id="getSandboxItemsById" resultMap="ItemMap">
        SELECT i.*, i.locked_by AS lock_owner, i.created_by AS creator,
                i.last_modified_by AS modifier,
                submission.submitted_on AS submitted_on,
                submission.submitter AS submitter,
               COUNT(DISTINCT i3.id) AS children_count
        FROM item i
            LEFT OUTER JOIN item i3 ON i.id = i3.parent_id
            LEFT OUTER JOIN (
                        SELECT ipi1.item_id as item_id, pp1.submitter_id AS submitter, pp1.submitted_on AS submitted_on
                        FROM item_publish_item ipi1
                            INNER JOIN publish_item pi1 ON ipi1.publish_item_id = pi1.id
                            INNER JOIN publish_package pp1 ON pi1.package_id = pp1.id
                        WHERE pp1.package_state = 'READY'
                        AND pp1.approval_state IN ('SUBMITTED', 'APPROVED')
                        ORDER BY pp1.submitted_on DESC LIMIT 0, 1 <!-- Get the most recently submitted active publish request -->
                ) as submission ON submission.item_id = i.id
        WHERE i.id IN
        <foreach collection="itemIds" item="id" index="index" open="(" close=")" separator=",">
            #{id}
        </foreach>
        AND (i3.ignored = 0 OR i3.ignored IS NULL)
        AND (i3.system_type &lt;&gt; #{systemTypeFolder} OR NOT EXISTS
            (SELECT * from item i10 WHERE i10.site_id = i3.site_id AND i10.path = CONCAT(i3.path, '/index.xml')))
        GROUP BY i.id
        <include refid="orderBySortFields"/>
    </select>

    <select id="getSandboxItemsByIdPreferContent" resultMap="ItemMap">
        <!-- Refactor to reuse selects for ItemMap results -->
        SELECT tbl.*
        FROM (
        (SELECT i1.*, i1.locked_by AS lock_owner, i1.created_by AS creator,
                i1.last_modified_by AS modifier,
                submission.submitted_on AS submitted_on,
                submission.submitter AS submitter,
               COUNT(DISTINCT i5.id ) AS children_count
        FROM item i1
            LEFT OUTER JOIN item i5 ON i1.id = i5.parent_id,
            LEFT OUTER JOIN (
                        SELECT ipi1.item_id as item_id, pp1.submitter_id AS submitter, pp1.submitted_on AS submitted_on
                        FROM item_publish_item ipi1
                            INNER JOIN publish_item pi1 ON ipi1.publish_item_id = pi1.id
                            INNER JOIN publish_package pp1 ON pi1.package_id = pp1.id
                        WHERE pp1.package_state = 'READY'
                        AND pp1.approval_state IN ('SUBMITTED', 'APPROVED')
                        ORDER BY pp1.submitted_on DESC LIMIT 0, 1 <!-- Get the most recently submitted active publish request -->
                ) as submission ON submission.item_id = i1.id, item i2
        WHERE i2.id IN
        <foreach collection="itemIds" item="id" index="index" open="(" close=")" separator=",">
            #{id}
        </foreach>
        AND i1.site_id = i2.site_id
        AND i1.path RLIKE(CONCAT('^', i2.path, '/index\.xml$'))
        AND (i5.ignored = 0 OR i5.ignored IS NULL)
        AND (i5.system_type &lt;&gt; #{systemTypeFolder} OR NOT EXISTS
            (SELECT * FROM item i10 WHERE i10.site_id = i5.site_id AND i10.path = concat(i5.path, '/index.xml')))
        GROUP BY i1.id)
        UNION
        (SELECT i3.*, i3.locked_by AS lock_owner, i3.created_by AS creator,
                i3.last_modified_by AS modifier,
                submission.submitted_on AS submitted_on,
                submission.submitter AS submitter,
               COUNT(DISTINCT i6.id) AS children_count
        FROM item i3
            LEFT OUTER JOIN item i6 ON i3.id = i6.parent_id
            LEFT OUTER JOIN (
                        SELECT ipi1.item_id as item_id, pp1.submitter_id AS submitter, pp1.submitted_on AS submitted_on
                        FROM item_publish_item ipi1
                            INNER JOIN publish_item pi1 ON ipi1.publish_item_id = pi1.id
                            INNER JOIN publish_package pp1 ON pi1.package_id = pp1.id
                        WHERE pp1.package_state = 'READY'
                        AND pp1.approval_state IN ('SUBMITTED', 'APPROVED')
                        ORDER BY pp1.submitted_on DESC LIMIT 0, 1 <!-- Get the most recently submitted active publish request -->
                ) as submission ON submission.item_id = i3.id
        WHERE i3.id IN
        <foreach collection="itemIds" item="id" index="index" open="(" close=")" separator=",">
            #{id}
        </foreach>
        AND CONCAT(i3.path, '/index.xml') NOT IN
            (SELECT i4.path FROM item i4 WHERE i4.site_id = i3.site_id
        AND i4.path RLIKE(CONCAT('^', i3.path, '/index\.xml$')))
        AND (i6.ignored = 0 OR i6.ignored IS NULL)
        AND (i6.system_type &lt;&gt; #{systemTypeFolder} OR NOT EXISTS
            (SELECT * FROM item i11 WHERE i11.site_id = i6.site_id AND i11.path = CONCAT(i6.path, '/index.xml')))
        GROUP BY i3.id)
        ) AS tbl
        <include refid="orderBySortFields"/>
    </select>

    <select id="getSandboxItemsByPath" resultMap="ItemMap">
        SELECT item.*, item.locked_by AS lock_owner, item.created_by AS creator, item.last_modified_by AS modifier,
                submission.submitted_on AS submitted_on,
                submission.submitter AS submitter,
               COUNT(child.id) AS children_count
        FROM item
            LEFT JOIN item child ON child.parent_id = item.id
            LEFT OUTER JOIN (
                    SELECT ipi1.item_id as item_id, pp1.submitter_id AS submitter, pp1.submitted_on AS submitted_on
                    FROM item_publish_item ipi1
                        INNER JOIN publish_item pi1 ON ipi1.publish_item_id = pi1.id
                        INNER JOIN publish_package pp1 ON pi1.package_id = pp1.id
                    WHERE pp1.package_state = 'READY'
                    AND pp1.approval_state IN ('SUBMITTED', 'APPROVED')
                    ORDER BY pp1.submitted_on DESC LIMIT 0, 1 <!-- Get the most recently submitted active publish request -->
            ) as submission ON submission.item_id = item.id
        WHERE item.site_id = #{siteId} AND item.ignored = 0
        <if test="preferContent">
            AND (item.system_type != #{systemTypeFolder}
                 OR
                 NOT EXISTS(SELECT *
                            FROM item page
                            WHERE page.site_id = item.site_id
                            AND page.system_type = 'page'
                            AND page.path = CONCAT(item.path, '/index.xml')))
        </if>
        AND (child.ignored = 0 OR child.ignored IS NULL)
        AND (child.system_type != #{systemTypeFolder}
            OR
            NOT EXISTS(SELECT *
                       FROM item page
                       WHERE page.site_id = child.site_id
                       AND page.system_type = 'page'
                       AND page.path = CONCAT(child.path, '/index.xml')))
        AND item.path IN
            <foreach collection="paths" item="path" index="index" open="(" close=")" separator=",">
                #{path}<if test="preferContent">, CONCAT(#{path}, '/index.xml')</if>
            </foreach>
        GROUP BY item.id
    </select>

    <select id="getItemBySiteIdAndPath" resultMap="DetailedItemMap">
        <include refid="detailedItemSelect"/>
        WHERE s1.id = #{siteId}
          AND i.path = #{path}
        <!-- Count not ignored children
             Avoid counting both the '/child/' folder and the '/child/index.xml'
        -->
          AND (ichild.ignored = 0 OR ichild.ignored IS NULL)
          AND (ichild.system_type &lt;&gt; #{systemTypeFolder} OR NOT EXISTS
                (SELECT * FROM item i10 WHERE i10.site_id = ichild.site_id AND i10.path = CONCAT(ichild.path, '/index.xml')))
        GROUP BY i.id
        LIMIT 0, 1
    </select>

    <select id="getItemBySiteIdAndPathPreferContent" resultMap="DetailedItemMap">
            (
                <include refid="detailedItemSelect"/>
                WHERE s1.id = #{siteId}
                    AND i.ignored = 0
                    <!-- Look for an index.xml at the given path -->
                    AND i.path = CONCAT(TRIM(TRAILING '/' FROM #{path}), '/index.xml')
                    <!-- Count not ignored children
                         Avoid counting both the '/child/' folder and the '/child/index.xml'
                    -->
                    AND (ichild.ignored = 0 OR ichild.ignored IS NULL)
                    AND (ichild.system_type &lt;&gt; #{systemTypeFolder} OR NOT EXISTS
                        (SELECT * FROM item i10 WHERE i10.site_id = ichild.site_id AND i10.path = concat(ichild.path, '/index.xml')))
                GROUP BY i.id
            )
            UNION
            (
                <include refid="detailedItemSelect"/>
                WHERE s1.id = #{siteId}
                    AND i.path = #{path}
                    AND i.ignored = 0
                        <!-- Count not ignored children
                             Avoid counting both the '/child/' folder and the '/child/index.xml'
                        -->
                    AND (ichild.ignored = 0 OR ichild.ignored IS NULL)
                    AND (ichild.system_type &lt;&gt; #{systemTypeFolder} OR NOT EXISTS
                        (SELECT * FROM item i11 WHERE i11.site_id = ichild.site_id AND i11.path = CONCAT(ichild.path, '/index.xml')))
                GROUP BY i.id
            )
            LIMIT 0, 1
    </select>

    <update id="updateItem" parameterType="org.craftercms.studio.api.v2.dal.Item">
        UPDATE item SET
            site_id = #{siteId},
            path = #{path},
            preview_url = #{previewUrl},
            state = #{state},
            locked_by = #{lockedBy},
            last_modified_by = #{lastModifiedBy},
            last_modified_on = #{lastModifiedOn},
            last_published_on = #{lastPublishedOn},
            label = #{label},
            content_type_id = #{contentTypeId},
            system_type = #{systemType},
            mime_type = #{mimeType},
            locale_code = #{localeCode},
            translation_source_id = #{translationSourceId},
            size = #{size},
            parent_id = #{parentId}
        WHERE id = #{id}
    </update>

    <delete id="deleteBySiteAndPath" >
        DELETE FROM item WHERE site_id = #{siteId} and path = #{path}
    </delete>

    <update id="setStatesBySiteAndPathBulk" >
        UPDATE item SET state = state | #{statesBitMap}
        WHERE site_id = #{siteId} AND path IN
        <foreach collection="paths" item="path" index="index" open="(" separator=","  close=")">
            #{path}
        </foreach>
    </update>

    <update id="resetStatesBySiteAndPathBulk" >
        UPDATE item SET state = state &amp; ~#{statesBitMap}
        WHERE site_id = #{siteId} AND path IN
        <foreach collection="paths" item="path" index="index" open="(" separator=","  close=")">
            #{path}
        </foreach>
    </update>

    <update id="updateStatesBySiteAndPathBulk">
        UPDATE item set state = (state | #{onStatesBitMap}) &amp; ~#{offStatesBitMap}
        WHERE site_id = #{siteId} AND path IN
        <foreach collection="paths" item="path" index="index" open="(" separator=","  close=")">
            #{path}
        </foreach>
    </update>

    <update id="updateStatesForSite">
        UPDATE item set state = (state | #{onStatesBitMap}) &amp; ~#{offStatesBitMap}
        WHERE site_id = #{siteId}
    </update>

    <delete id="deleteItemsForSite">
        DELETE FROM item WHERE site_id = #{siteId}
    </delete>

    <delete id="deleteBySiteAndPathForFolder">
        <bind name="pattern" value="folderPath + '/%'" />
        DELETE FROM item WHERE site_id = #{siteId} AND (path = #{folderPath} OR path LIKE #{pattern})
    </delete>

    <update id="moveItem">
        UPDATE item i INNER JOIN site s ON i.site_id = s.id
        SET path = #{newPath},
            i.state = (i.state | #{onStatesBitMap}) &amp; ~#{offStatesBitMap},
            i.preview_url = REPLACE(i.preview_url, #{oldPreviewUrl}, #{newPreviewUrl})
        <!-- We should populate new item_target table with previous path
            i.previous_path = IFNULL(i.previous_path, #{oldPath}) -->
        <if test="label != null">
            , i.label = #{label}
        </if>
        <if test="parentId != null">
            , i.parent_id = #{parentId}
        </if>
        WHERE s.site_id = #{siteId} AND s.deleted = 0 AND i.path = #{oldPath}
    </update>

    <select id="getMandatoryParentsForPublishing" resultType="String">
        SELECT i3.path AS path
        FROM item i1 INNER JOIN site s ON i1.site_id = s.id INNER JOIN item i3 ON i1.parent_id = i3.id
        WHERE s.site_id = #{siteId}
        AND s.deleted = 0
        AND i1.ignored = 0
        AND i1.path IN
        <foreach item="path" index="index" collection="possibleParents"
                 open="(" separator="," close=")">
            #{path}
        </foreach>
        AND (i3.state &amp; #{newMask}) > 0
        UNION
        SELECT i4.path AS path
        FROM item i2 INNER JOIN site s2 ON i2.site_id = s2.id INNER JOIN item i4 ON i2.parent_id = i4.id
        WHERE s2.site_id = #{siteId}
        <!-- TODO: Implement this check with the new item_target table
        AND TRIM(IFNULL(i4.previous_path, '')) &lt;&gt; ''
        -->
        AND i2.ignored = 0
        AND i2.path IN
        <foreach item="path" index="index" collection="possibleParents"
                 open="(" separator="," close=")">
            #{path}
        </foreach>
        AND (i4.state &amp; #{modifiedMask}) > 0
    </select>

    <select id="getExistingRenamedChildrenOfMandatoryParentsForPublishing" parameterType="java.util.Map" resultType="String">
        SELECT i1.path as path
        FROM item i1 INNER JOIN site s1 ON i1.site_id = s1.id
        WHERE s1.site_id = #{siteId}
        AND s1.deleted = 0
        AND i1.ignored = 0
        <!-- TODO: Implement this check with the new item_target table
        AND NULLIF(TRIM(i1.previous_path), '') IS NOT NULL
        -->
        AND (i1.state &amp; #{modifiedMask}) > 0
        AND (i1.state &amp; #{newMask}) = 0
        AND i1.parent_id IN
        (SELECT 12.id FROM item i2 INNER JOIN site s2 ON i2.site_id = s2.id
        WHERE s2.site_id = #{siteId} AND s2.deleted = 0
        AND i2.ignored = 0
        AND i2.path IN
        <foreach item="path" index="index" collection="parents" open="(" separator="," close=")">
            #{path}
        </foreach>)
    </select>

    <select id="countAllContentItems" resultType="java.lang.Integer">
        SELECT count(1)
        FROM item i INNER JOIN site s ON i.site_id = s.id
        WHERE s.deleted = 0
        AND i.system_type NOT IN
        <foreach collection="nonContentItemTypes" separator="," index="index" item="type" open="(" close=")">
            #{type}
        </foreach>
    </select>

    <select id="getInProgressItems" resultMap="ItemMap">
        SELECT i.*
        FROM item i INNER JOIN site s ON i.site_id = s.id
        WHERE s.site_id = #{siteId}
        AND s.deleted = 0
        AND i.ignored = 0
        AND (i.state &amp; #{inProgressMask}) &gt; 0
    </select>

    <select id="getUnpublishedPaths">
        SELECT i.path
        FROM item i
        WHERE i.site_id = #{siteId}
        AND i.ignored = 0
        AND (i.state &amp; #{states}) &gt; 0
    </select>

    <select id="getChangeSetForSubtree" resultType="java.lang.String">
        SELECT i.path
        FROM item i INNER JOIN site s ON i.site_id = s.id
        WHERE s.site_id = #{siteId}
        AND s.deleted = 0
        AND i.ignored = 0
        AND i.system_type NOT IN
        <foreach collection="nonContentItemTypes" separator="," index="index" item="type" open="(" close=")">
            #{type}
        </foreach>
        AND (i.path = #{path} or i.path like #{likePath})
        AND (i.state &amp; #{inProgressMask}) &gt; 0
    </select>

    <update id="updateLastPublishedOn">
        UPDATE item i INNER JOIN site s ON i.site_id = s.id
        SET i.last_published_on = #{lastPublishedOn}
        WHERE s.site_id = #{siteId}
          AND s.deleted = 0
          AND i.path = #{path}
    </update>

    <update id="updateSiteLastPublishedOn">
        UPDATE item i INNER JOIN site s ON i.site_id = s.id
        SET i.last_published_on = #{lastPublishedOn}
        WHERE s.site_id = #{siteId}
        AND s.deleted = 0
    </update>

    <select id="getContentTypeUsages" resultType="org.craftercms.studio.api.v2.dal.Item">
        SELECT
          I.path, I.system_type AS systemType
        FROM
          item I
        INNER JOIN
          site S
        ON
          I.site_id = S.id
        WHERE
          S.site_id = #{siteId}
        AND
          (
            (I.system_type IN ('page', 'component') AND I.content_type_id = #{contentType})
          OR
            (I.system_type = 'script' AND I.path = #{scriptPath})
          )
    </select>

    <update id="lockItemByPath">
        UPDATE item i INNER JOIN site s ON i.site_id = s.id
        SET i.locked_by = #{lockOwnerId}, i.state = i.state | #{lockedBitOn}
        WHERE s.site_id = #{siteId}
        AND s.deleted = 0
        AND i.path =  #{path}
        AND i.system_type &lt;&gt; #{systemTypeFolder}
    </update>

    <update id="unlockItemByPath">
        UPDATE item i INNER JOIN site s ON i.site_id = s.id
        SET i.locked_by = null, i.state = i.state &amp; #{lockedBitOff}
        WHERE s.site_id = #{siteId}
          AND s.deleted = 0
          AND i.path =  #{path}
    </update>

    <select id="getItemStatesTotal" resultType="Integer">
        SELECT count(1)
        FROM item i INNER JOIN site s ON i.site_id = s.id
        WHERE s.site_id = #{siteId}
        AND s.deleted = 0
        AND i.ignored = 0
        AND i.system_type != 'folder'
        <if test="path != null">
        AND i.path RLIKE(#{path})
        </if>
        <if test="statesBitMap != null">
        AND (i.state &amp; #{statesBitMap}) &gt; 0
        </if>
        <include refid="filterBySystemType"/>
    </select>

    <select id="getItemStates" resultMap="ItemMap">
        SELECT i.*, i.locked_by AS lock_owner, i.created_by AS creator, i.last_modified_by AS modifier
        FROM item i INNER JOIN site s ON i.site_id = s.id
        WHERE s.site_id = #{siteId}
        AND s.deleted = 0
        AND i.ignored = 0
        AND i.system_type != 'folder'
        <if test="path != null">
        AND i.path RLIKE(#{path})
        </if>
        <if test="statesBitMap != null">
        AND (i.state &amp; #{statesBitMap}) > 0
        </if>
        <include refid="filterBySystemType"/>
        <include refid="orderBySortFields"/>
        LIMIT #{offset}, #{limit}
    </select>

    <sql id="filterBySystemType">
        <if test="systemTypes != null &amp;&amp; !systemTypes.isEmpty()">
            AND i.system_type IN
            <foreach collection="systemTypes" item="systemType" separator="," open="(" close=")">
                #{systemType}
            </foreach>
        </if>
    </sql>

    <sql id="orderBySortFields">
        <if test="sortFields != null &amp;&amp; !sortFields.isEmpty()">
            ORDER BY
            <foreach collection="sortFields" item="sortField" separator=",">
                ${sortField.field} ${sortField.order}
            </foreach>
        </if>
    </sql>

    <update id="updateStatesByQuery" >
        UPDATE item i INNER JOIN site s ON i.site_id = s.id
        SET i.state = (i.state | #{onStatesBitMap}) &amp; ~#{offStatesBitMap}
        WHERE s.site_id = #{siteId}
        AND s.deleted = 0
        AND i.ignored = 0
        <if test="path != null">
            AND i.path RLIKE(#{path})
        </if>
        <if test="statesBitMap != null">
            AND (i.state &amp; #{statesBitMap}) &gt; 0
        </if>
    </update>

    <select id="getSubtreeForDelete" resultType="java.lang.String">
        SELECT i.path
        FROM item i INNER JOIN site s ON i.site_id = s.id
        WHERE s.site_id = #{siteId}
        AND s.deleted = 0
        AND i.path LIKE #{likePath}
    </select>

    <update id="updateNewPageChildren">
        UPDATE item,
            (SELECT child.id AS childId,
                            (SELECT i.id
                            FROM item i INNER JOIN site s on s.id = i.site_id
                            WHERE s.site_id = #{siteId} AND s.deleted = 0
                            AND i.path = concat(#{path}, '/index.xml')) AS newParentId
            FROM item child
                INNER JOIN item parent ON child.parent_id = parent.id
                INNER JOIN site s ON s.id = child.site_id
            WHERE s.site_id = #{siteId} AND s.deleted = 0
                AND parent.path = #{path}
            ) AS updates
        SET item.parent_id = updates.newParentId
        WHERE item.id = updates.childId
    </update>

    <select id="getChildrenPaths">
        WITH RECURSIVE CTE AS (
            SELECT i.id, i.path, i.site_id, i.system_type
            FROM item i
            WHERE i.path = TRIM(TRAILING '/' from #{path})
                AND i.site_id = #{siteId}
        UNION
            SELECT i.id, i.path, i.site_id, i.system_type
            FROM cte, item i
            WHERE cte.id = i.parent_id
                AND cte.site_id = #{siteId}
                AND i.ignored = 0
        )
        SELECT cte.path
        FROM cte
        WHERE cte.system_type &lt;&gt; 'folder'
    </select>

    <update id="updateStateBitsByIds">
        UPDATE item
        SET state = (state | #{onStatesBitMap}) &amp; ~#{offStatesBitMap}
        WHERE id IN
        <foreach collection="itemIds" item="itemId" index="index" open="(" separator="," close=")">
            #{itemId}
        </foreach>
    </update>
</mapper>
