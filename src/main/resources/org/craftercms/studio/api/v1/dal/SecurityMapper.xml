<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Crafter Studio Web-content authoring solution
  ~ Copyright (C) 2007-2016 Crafter Software Corporation.
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  ~
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.craftercms.studio.api.v1.dal.SecurityMapper">

    <resultMap id="UserMap" type="org.craftercms.studio.api.v1.dal.User">
        <id property="username" column="username"/>
        <result property="password" column="password"/>
        <result property="firstname" column="firstname"/>
        <result property="lastname" column="lastname" />
        <result property="email" column="email" />
        <result property="active" column="enabled" />
        <result property="externallyManaged" column="externally_managed" />
    </resultMap>

    <resultMap id="GroupMap" type="org.craftercms.studio.api.v1.dal.Group">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="description" column="description"/>
        <result property="siteId" column="site_id"/>
        <result property="externallyManaged" column="externally_managed" />
    </resultMap>

    <resultMap id="UserProfileResultMap" type="org.craftercms.studio.api.v1.dal.UserProfileResult">
        <id property="username" column="username"/>
        <result property="firstName" column="firstname"/>
        <result property="lastName" column="lastname" />
        <result property="email" column="email" />
        <result property="externallyManaged" column="externally_managed" />
        <result property="groupName" column="groupname" />
        <result property="siteId" column="siteid"/>
        <result property="siteName" column="siteName" />
    </resultMap>

    <resultMap id="GroupResultMap" type="org.craftercms.studio.api.v1.dal.GroupResult">
        <result property="siteId" column="site_id"/>
        <result property="siteName" column="site_name"/>
        <result property="groupName" column="group_name"/>
        <result property="groupDescription" column="group_description"/>
    </resultMap>

    <resultMap id="GroupPerSiteResultMap" type="org.craftercms.studio.api.v1.dal.GroupPerSiteResult">
        <result property="groupName" column="group_name"/>
        <result property="groupDescription" column="group_description"/>
        <result property="username" column="username"/>
        <result property="firstName" column="first_name"/>
        <result property="lastName" column="last_name"/>
        <result property="email" column="email"/>
        <result property="externallyManaged" column="externally_managed" />
    </resultMap>

    <select id="getUser" resultMap="UserMap">
        SELECT * FROM user WHERE username = #{username}
    </select>

    <select id="getUserDetails" resultMap="UserProfileResultMap">
        SELECT cu.username AS username, cu.firstname AS firstname, cu.lastname AS lastname, cu.email AS email, cu.externally_managed AS externally_managed, cg.name AS groupname, cs.site_id AS siteid, cs.name AS sitename
        FROM `user` cu LEFT JOIN group_user cug ON cu.username = cug.username
          LEFT JOIN `group` cg ON cug.groupId = cg.id
          LEFT JOIN site cs ON cg.site_id=cs.id
        WHERE cu.username = #{username}
    </select>

    <select id="getAllUsersQuery" resultType="java.lang.String" parameterType="java.util.Map">
        SELECT DISTINCT cu.username AS username
        FROM `user` cu LEFT JOIN group_user cug ON cu.username = cug.username
        LEFT JOIN `group` cg ON cug.groupId = cg.id
        LEFT JOIN site cs ON cg.site_id=cs.id
        ORDER BY username
        LIMIT #{start}, #{number}
    </select>
    <select id="getAllUsersQueryTotal" resultType="int" parameterType="java.util.Map">
        SELECT COUNT(DISTINCT cu.username)
        FROM `user` cu LEFT JOIN group_user cug ON cu.username = cug.username
        LEFT JOIN `group` cg ON cug.groupId = cg.id
        LEFT JOIN site cs ON cg.site_id=cs.id
    </select>


    <select id="getAllUsersData" resultMap="UserProfileResultMap" parameterType="java.util.Map">
        SELECT cu.username AS username, cu.firstname AS firstname, cu.lastname AS lastname, cu.email AS email, cu.externally_managed AS externally_managed, cg.name AS groupname, cs.site_id AS siteid, cs.name AS sitename
        FROM `user` cu LEFT JOIN group_user cug ON cu.username = cug.username
        LEFT JOIN `group` cg ON cug.groupId = cg.id
        LEFT JOIN site cs ON cg.site_id=cs.id
        WHERE cu.username IN
        <foreach item="username" index="index" collection="usernames"
                 open="(" separator="," close=")">
            #{username}
        </foreach>
        ORDER BY username, siteid, groupname
    </select>

    <select id="getUsersPerSiteData" resultMap="UserProfileResultMap" parameterType="java.util.Map">
        SELECT cu.username AS username, cu.firstname AS firstname, cu.lastname AS lastname, cu.email AS email, cu.externally_managed AS externally_managed, cg.name AS groupname, cs.site_id AS siteid, cs.name AS sitename
        FROM `user` cu INNER JOIN group_user cug ON cu.username = cug.username
        INNER JOIN `group` cg ON cug.groupId = cg.id
        INNER JOIN site cs ON cg.site_id=cs.id
        WHERE cs.site_id = #{siteId}
        AND cu.username IN
        <foreach item="username" index="index" collection="usernames"
                 open="(" separator="," close=")">
            #{username}
        </foreach>
        ORDER BY username
    </select>

    <select id="getUsersPerSiteQuery" resultType="java.lang.String" parameterType="java.util.Map">
        SELECT DISTINCT cu.username AS username
        FROM `user` cu INNER JOIN group_user cug ON cu.username = cug.username
        INNER JOIN `group` cg ON cug.groupId = cg.id
        INNER JOIN site cs ON cg.site_id=cs.id
        WHERE cs.site_id = #{siteId}
        ORDER BY username
        LIMIT #{start}, #{number}
    </select>

    <select id="getUsersPerSiteQueryTotal" resultType="int" parameterType="java.util.Map">
        SELECT COUNT(DISTINCT cu.username)
        FROM `user` cu INNER JOIN group_user cug ON cu.username = cug.username
        INNER JOIN `group` cg ON cug.groupId = cg.id
        INNER JOIN site cs ON cg.site_id=cs.id
        WHERE cs.site_id = #{siteId}
    </select>

    <select id="getUserGroups" resultType="Group">
        SELECT `group`.* FROM
        ((`user` INNER JOIN group_user ON `user`.username = group_user.username)
        INNER JOIN `group` ON group_user.groupid = `group`.id)
        WHERE `user`.username = #{username}
    </select>

    <insert id="createUser" parameterType="java.util.Map">
        INSERT INTO `user` (username, password, firstname, lastname, email, enabled, externally_managed)
        VALUES (#{username}, #{password}, #{firstname}, #{lastname}, #{email}, 1, #{externallyManaged})
    </insert>

    <delete id="deleteUser" parameterType="java.util.Map">
        DELETE FROM `user` WHERE username = #{username}
    </delete>

    <update id="updateUser" parameterType="java.util.Map">
        UPDATE `user`
        <trim prefix="SET" suffixOverrides=",">
            <if test="firstname != null">firstname = #{firstname},</if>
            <if test="lastname != null">lastname = #{lastname},</if>
            <if test="email != null">email = #{email}</if>
        </trim>
        WHERE username = #{username}
    </update>

    <update id="enableUser" parameterType="java.util.Map">
        UPDATE `user`
        SET enabled = #{enabled}
        WHERE username = #{username}
    </update>

    <insert id="createGroup" parameterType="java.util.Map">
        INSERT INTO `group` (name, description, site_id, externally_managed)
        VALUES (#{name}, #{description}, #{siteId}, #{externallyManaged})
    </insert>

    <select id="getGroup" parameterType="java.util.Map" resultType="java.util.Map">
        SELECT cg.name AS group_name, cg.description AS description, cs.site_id AS site_id
        FROM `group` cg INNER JOIN site cs ON cg.site_id = cs.id
        WHERE cs.site_id = #{siteId} AND cg.name = #{groupName}
    </select>

    <select id="getGroupObject" parameterType="java.util.Map" resultMap="GroupMap">
        SELECT cg.*
        FROM `group` cg INNER JOIN site cs ON cg.site_id = cs.id
        WHERE cs.site_id = #{siteId} AND cg.name = #{groupName}
    </select>

    <select id="getAllGroupsQuery" resultType="long" parameterType="java.util.Map">
        SELECT DISTINCT cg.id
        FROM `group` cg INNER JOIN site cs ON cg.site_id = cs.id
        ORDER BY cs.name, cg.name
        LIMIT #{start},#{number}
    </select>

    <select id="getAllGroupsData" resultMap="GroupResultMap" parameterType="java.util.Map">
        SELECT cs.site_id AS site_id, cs.name AS site_name, cg.name AS group_name, cg.description AS group_description
        FROM `group` cg INNER JOIN site cs ON cg.site_id = cs.id
        WHERE cg.id IN
        <foreach item="groupid" index="index" collection="groupids"
                 open="(" separator="," close=")">
            #{groupid}
        </foreach>
        ORDER BY cs.name, cg.name
    </select>

    <select id="getGroupsPerSiteQuery" resultType="long" parameterType="java.util.Map">
        SELECT
          DISTINCT cg.id AS groupid
        FROM `group` cg INNER JOIN site cs ON cg.site_id = cs.id
          LEFT JOIN group_user cug ON cg.id = cug.groupid
          LEFT JOIN `user` cu ON cug.username = cu.username
        WHERE cs.site_id = #{site}
        ORDER BY cg.name
        LIMIT #{start},#{number}
    </select>

    <select id="getGroupsPerSiteQueryTotal" resultType="int" parameterType="java.util.Map">
        SELECT
        COUNT(DISTINCT cg.id)
        FROM `group` cg INNER JOIN site cs ON cg.site_id = cs.id
        LEFT JOIN group_user cug ON cg.id = cug.groupid
        LEFT JOIN `user` cu ON cug.username = cu.username
        WHERE cs.site_id = #{site}
        ORDER BY cg.name
    </select>

    <select id="getGroupsPerSiteData" resultMap="GroupPerSiteResultMap" parameterType="java.util.Map">
        SELECT
        cg.name AS group_name,
        cg.description AS group_description,
        cu.username AS username,
        cu.firstname AS first_name,
        cu.lastname AS last_name,
        cu.externally_managed AS externally_managed,
        cu.email AS email
        FROM `group` cg INNER JOIN site cs ON cg.site_id = cs.id
        LEFT JOIN group_user cug ON cg.id = cug.groupid
        LEFT JOIN `user` cu ON cug.username = cu.username
        WHERE cs.site_id = #{site}
        AND cg.id IN
        <foreach item="groupid" index="index" collection="groupids"
                 open="(" separator="," close=")">
            #{groupid}
        </foreach>
        ORDER BY cg.name
    </select>

    <select id="getUsersPerGroup" resultMap="UserMap" parameterType="java.util.Map">
        SELECT cu.*
        FROM `group` cg INNER JOIN site cs ON cg.site_id = cs.id
          INNER JOIN group_user cug ON cg.id = cug.groupid
          INNER JOIN `user` cu ON cug.username = cu.username
        WHERE cs.site_id = #{siteId}
        AND cg.name = #{groupName}
        LIMIT #{start},#{number}
    </select>

    <select id="getUsersPerGroupTotal" resultType="int" parameterType="java.util.Map">
        SELECT COUNT(1)
        FROM `group` cg INNER JOIN site cs ON cg.site_id = cs.id
        INNER JOIN group_user cug ON cg.id = cug.groupid
        INNER JOIN `user` cu ON cug.username = cu.username
        WHERE cs.site_id = #{siteId}
        AND cg.name = #{groupName}
    </select>

    <update id="updateGroup" parameterType="java.util.Map">
        UPDATE `group`
        SET description = #{description}
        WHERE site_id = #{siteId}
        AND name = #{groupName}
    </update>

    <update id="deleteGroup" parameterType="java.util.Map">
        DELETE FROM `group` WHERE name=#{groupName} AND site_id=#{siteId}
    </update>

    <insert id="addUserToGroup" parameterType="java.util.Map">
        INSERT INTO group_user (username, groupid) VALUES (#{username}, #{groupId})
    </insert>

    <insert id="removeUserFromGroup" parameterType="java.util.Map">
        DELETE FROM group_user WHERE username = #{username} AND groupid = #{groupId}
    </insert>

    <update id="setUserPassword" parameterType="java.util.Map">
        UPDATE `user`
        SET password = #{password}
        WHERE username = #{username}
    </update>

    <select id="userExistsInGroup" resultType="Integer" parameterType="java.util.Map">
        SELECT COUNT (1)
        FROM `group` cg INNER JOIN site cs ON cg.site_id = cs.id
        INNER JOIN group_user cug ON cg.id = cug.groupid
        INNER JOIN `user` cu ON cug.username = cu.username
        WHERE cs.site_id = #{siteId} AND cu.username = #{username}
        AND cg.name = #{groupName}
    </select>

    <select id="userExists" resultType="Integer" parameterType="java.util.Map">
        SELECT COUNT (1)
        FROM `user` cu
        WHERE cu.username = #{username}
    </select>

    <select id="groupExists" resultType="Integer" parameterType="java.util.Map">
        SELECT COUNT (1)
        FROM `group` cg INNER JOIN site cs ON cg.site_id = cs.id
        WHERE cs.site_id = #{siteId} AND cg.name = #{groupName}
    </select>

    <select id="isSystemUser" resultType="int" parameterType="java.util.Map">
        SELECT COUNT(1)
        FROM `user` cu INNER JOIN group_user cug ON cu.username = cug.username
        INNER JOIN `group` cg ON cug.groupId = cg.id
        INNER JOIN site cs ON cg.site_id=cs.id
        WHERE cu.username = #{username}
        AND cs.system = 1
    </select>
</mapper>