openapi: 3.0.0
servers:
  - url: 'http://localhost:8080/studio'
info:
  description: |-
    Crafter Studio API
  version: '4.2.0.0'
  title: Crafter Studio
  termsOfService: ''
  contact:
    email: info@craftercms.org
  license:
    name: GPL 3.0
    url: 'https://www.gnu.org/licenses/gpl-3.0.en.html'
externalDocs:
  description: CrafterCMS - Studio
  url: 'https://docs.craftercms.org/current/reference/modules/studio/index.html'
tags:
  - name: groups
    description: Group management operations
  - name: users
    description: User management operations
  - name: ui
    description: UI support operations
  - name: aws
    description: AWS operations
  - name: cluster
    description: Cluster management operations
  - name: sites
    description: Site management operations
  - name: search
    description: Search operations
  - name: audit
    description: Audit log operations
  - name: monitoring
    description: Monitoring operations
  - name: repository
    description: Repository operations
  - name: content
    description: Content operations
  - name: configuration
    description: Configuration operations
  - name: plugin
    description: Plugin operations
  - name: dependency
    description: Dependencies operations
  - name: marketplace
    description: Marketplace operations
  - name: webdav
    description: WebDAV operations
  - name: box
    description: Box operations
  - name: publishing
    description: Publishing operations
  - name: security
    description: Security operations
  - name: dashboard
    description: Dashboard operations
#  - name: translation
#    description: Translation operations
  - name: workflow
    description: Workflow operations
#  - name: tasks
#    description: tasks operations
  - name: loggers
    description: Logger configuration operations
  - name: server
    description: Server operations

paths:

  /api/2/groups:
    get:
      tags:
        - groups
      summary: Get all groups
      operationId: getGroups
      description: 'Required Permission: "READ_GROUPS"'
      parameters:
        - name: keyword
          in: query
          description: The keyword to filter groups
          required: false
          schema:
            type: string
        - name: offset
          in: query
          description: Offset of first group in the response
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Number of groups to return
          required: false
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: |-
            The fields to use for sorting, plus the `asc` or `desc` keyword case-insensitive. Multiple fields are separated by
            commas. Example: `column1 ASC, column2 DESC`.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  groups:
                    type: array
                    items:
                      $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - groups
      summary: Create group
      description: 'Required Permission: "CREATE_GROUPS"'
      operationId: createGroup
      requestBody:
        description: Group entity to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  group:
                    $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - groups
      summary: Update group
      description: 'Required Permission: "UPDATE_GROUPS"'
      operationId: updateGroup
      requestBody:
        description: Group entity to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroupRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  group:
                    $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - groups
      summary: Delete group(s)
      description: 'Required Permission: "DELETE_GROUPS"'
      operationId: deleteGroup
      parameters:
        - name: id
          in: query
          description: The group ID(s). Can be repeated for multiple deletes (id=1&id=2&id=3)
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/groups/{id}:
    get:
      tags:
        - groups
      summary: Get group by ID
      description: 'Required Permission: "READ_GROUPS"'
      operationId: getGroup
      parameters:
        - name: id
          in: path
          description: The group ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  group:
                    $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/groups/{id}/members:
    get:
      tags:
        - groups
      summary: Get all the members of the specified group
      description: 'Required Permission: "READ_GROUPS"'
      operationId: getGroupMembers
      parameters:
        - name: id
          in: path
          description: The group ID
          required: true
          schema:
            type: integer
            format: int64
        - name: offset
          in: query
          description: Offset of first record in the response
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Number of records to return
          required: false
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: |-
            The fields to use for sorting, plus the `asc` or `desc` keyword case-insensitive. Multiple fields are separated by
            commas. Example: `column1 ASC, column2 DESC`.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - groups
      summary: Add member(s) to the specified group
      description: 'Required Permission: "UPDATE_GROUPS"'
      operationId: addGroupMembers
      parameters:
        - name: id
          in: path
          description: The group ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: List of user IDs and/or usernames to add
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: string
                usernames:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - groups
      summary: |-
        Remove member(s) from the specified group
      description: 'Required Permission: "DELETE_GROUPS"'
      operationId: removeGroupMembers
      parameters:
        - name: id
          in: path
          description: The group ID
          required: true
          schema:
            type: integer
            format: int64
        - name: userId
          in: query
          description: The user ID(s) to remove. Can be repeated for multiple deletes (userId=1&userId=2&userId=3)
          required: false
          schema:
            type: array
            items:
              type: string
        - name: username
          in: query
          description: The username(s) to remove. Can be repeated for multiple deletes (username=john&username=mark)
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/users:
    get:
      tags:
        - users
      summary: Get all users
      description: 'Required Permission: "READ_USERS"'
      operationId: getUsers
      parameters:
        - name: site_id
          in: query
          description: The site ID to filter users for a particular site
          required: false
          schema:
            type: string
        - name: keyword
          in: query
          description: The keyword to filter users
          required: false
          schema:
            type: string
        - name: offset
          in: query
          description: Offset of first record in the response
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Number of records to return
          required: false
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: |-
            The fields to use for sorting, plus the `asc` or `desc` keyword case-insensitive. Multiple fields are separated by
            commas. Example: `column1 ASC, column2 DESC`.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - users
      summary: Create user
      description: 'Required Permission: "CREATE_USERS"'
      operationId: createUser
      requestBody:
        description: User entity to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  users:
                    $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - users
      summary: Update user
      description: 'Required Permission: "UPDATE_USERS"'
      operationId: updateUser
      requestBody:
        description: User entity to update. Supported update attributes are firstName, lastName, email and enabled.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  user:
                    $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - users
      summary: Delete user(s)
      description: 'Required Permission: "DELETE_USERS"'
      operationId: deleteUser
      parameters:
        - name: id
          in: query
          description: The user ID(s). Can be repeated for multiple deletes (id=1&id=2&id=3)
          required: false
          schema:
            type: array
            items:
              type: string
        - name: username
          in: query
          description: The username(s). Can be repeated for multiple deletes (username=john&username=mark)
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/users/{id}:
    get:
      tags:
        - users
      summary: Get user by user ID or username
      description: 'Required Permission: "READ_USERS"'
      operationId: getUser
      parameters:
        - name: id
          in: path
          description: The user ID. Username can also be used
          required: true
          schema:
            type: string
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  user:
                    $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/users/enable:
    patch:
      tags:
        - users
      summary: Enable user(s)
      description: 'Required Permission: "UPDATE_USERS"'
      operationId: enableUser
      requestBody:
        description: List of user IDs and/or usernames to enable
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: string
                usernames:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/users/disable:
    patch:
      tags:
        - users
      summary: Disable user(s)
      description: 'Required Permission: "UPDATE_USERS"'
      operationId: disableUser
      requestBody:
        description: List of user IDs and/or usernames to disable
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: string
                usernames:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/users/{id}/sites:
    get:
      tags:
        - users
      summary: Get all the sites the specified user has access to
      description: 'Required Permission: "READ_USERS"'
      operationId: getUserSites
      parameters:
        - name: id
          in: path
          description: The user ID. Username can also be used
          required: true
          schema:
            type: string
        - name: offset
          in: query
          description: Offset of first site in the response
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Number of sites to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  sites:
                    type: array
                    items:
                      $ref: '#/components/schemas/Site'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/users/{id}/sites/{site}/roles:
    get:
      tags:
        - users
      summary: Get the site roles for the specified user
      description: 'Required Permission: "READ_USERS"'
      operationId: getUserSiteRoles
      parameters:
        - name: id
          in: path
          description: The user ID. Username can also be used
          required: true
          schema:
            type: string
        - name: site
          in: path
          description: The site ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  roles:
                    type: array
                    items:
                      type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/users/{id}/reset_password:
    post:
      tags:
        - users
      summary: Reset password for user
      description: 'Required Permission: "UPDATE_USERS"'
      operationId: resetUserPassword
      parameters:
        - name: id
          in: path
          description: The user ID. Username can also be used
          required: true
          schema:
            type: string
      requestBody:
        description: request body to reset password for user
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                new:
                  type: string
                  description: new password
              required:
                - username
                - new
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/users/set_password:
    post:
      tags:
        - users
      summary: Change password for user
      description: 'Required Permission: "ANONYMOUS"'
      operationId: setUserPassword
      requestBody:
        description: request body to change password
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                new:
                  type: string
                  description: new password
              required:
                - token
                - new
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  user:
                    $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/users/me:
    get:
      tags:
        - users
      summary: Get current authenticated user
      description: 'Required Permission: "LOGGED_IN"'
      operationId: getCurrentUser
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  authenticatedUser:
                    $ref: '#/components/schemas/AuthenticatedUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/users/me/sites:
    get:
      tags:
        - users
      summary: Get all the sites the current authenticated user has access to
      description: 'Required Permission: "LOGGED_IN"'
      operationId: getCurrentUserSites
      parameters:
        - name: offset
          in: query
          description: Offset of first record in the response
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Number of records to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  sites:
                    type: array
                    items:
                      $ref: '#/components/schemas/Site'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/users/me/sites/{site}/roles:
    get:
      tags:
        - users
      summary: Get the site roles for the current authenticated user
      description: 'Required Permission: "LOGGED_IN"'
      operationId: getCurrentUserSiteRoles
      parameters:
        - name: site
          in: path
          description: The site ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  roles:
                    type: array
                    items:
                      type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/users/me/sites/{site}/permissions:
    get:
      tags:
        - users
      summary: Get the site permissions for the current authenticated user
      description: 'Required Permission: "LOGGED_IN"'
      operationId: getCurrentUserSitePermissions
      parameters:
        - name: site
          in: path
          description: The site ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  'permissions':
                    type: array
                    items:
                      type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/users/me/sites/{site}/has_permissions:
    post:
      tags:
        - users
      summary: Check if the current authenticated user has given permissions
      description: 'Required Permission: "LOGGED_IN"'
      operationId: hasCurrentUserSitePermissions
      parameters:
        - name: site
          in: path
          description: The site ID
          required: true
          schema:
            type: string
      requestBody:
        description: request body to check if current authenticated user has permissions
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                'permissions':
                  type: array
                  items:
                    type: string
              required:
                - permissions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  'permissions':
                    type: object
                    example:
                      create: true
                      update: true
                      delete: false
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/users/me/global/permissions:
    get:
      tags:
        - users
      summary: Get the global for the current authenticated user
      description: 'Required Permission: "LOGGED_IN"'
      operationId: getCurrentUserGlobalPermissions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  'permissions':
                    type: array
                    items:
                      type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/users/me/global/has_permissions:
    post:
      tags:
        - users
      summary: Check if the current authenticated user has given global permissions
      description: 'Required Permission: "LOGGED_IN"'
      operationId: hasCurrentUserGlobalPermissions
      requestBody:
        description: request body to check if current authenticated user has permissions
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                'permissions':
                  type: array
                  items:
                    type: string
              required:
                - permissions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  'permissions':
                    type: object
                    example:
                      create: true
                      update: true
                      delete: false
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/users/me/logout/sso/url:
    get:
      tags:
        - users
      summary: Get the SSO Service Provide logout URL for the current authenticated user
      description: |-
        * Required Permission: "LOGGED_IN"
        * The system should redirect to this logout URL `AFTER` local logout. Response entity can be null if user is
        not authenticated through SSO or if logout is disabled
      operationId: getCurrentUserSsoLogoutUrl
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  logoutUrl:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/users/me/change_password:
    post:
      tags:
        - users
      summary: Change password for current user
      description: 'Required Permission: "LOGGED_IN"'
      operationId: currentUserChangePassword
      requestBody:
        description: request body to change password
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                current:
                  type: string
                  description: current password
                new:
                  type: string
                  description: new password
              required:
                - username
                - current
                - new
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  user:
                    $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/users/me/properties:
    get:
      tags:
        - users
      summary: Retrieve properties for the current user
      description: 'Required Permission: "LOGGED_IN"'
      operationId: getUserProperties
      parameters:
        - name: siteId
          schema:
            type: string
          in: query
          description: The id of the site (defaults to global)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  properties:
                    type: object
                    additionalProperties:
                      type: object
                      additionalProperties:
                        type: string
                    description: The properties of the current user grouped by site
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - users
      summary: Update properties for the current user
      description: 'Required Permission: "LOGGED_IN"'
      operationId: updateUserProperties
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: The id of the site (defaults to global)
                properties:
                  type: object
                  additionalProperties:
                    type: string
                  description: Properties to update or add
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  properties:
                    type: object
                    additionalProperties:
                      type: string
                    description: |-
                      The properties of the current user after the updates
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - users
      summary: Delete properties for the current user
      description: 'Required Permission: "LOGGED_IN"'
      operationId: deleteUserProperties
      parameters:
        - name: siteId
          in: query
          schema:
            type: string
          description: The id of the site (defaults to global)
        - name: properties
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
          description: List of keys to delete
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  properties:
                    type: object
                    additionalProperties:
                      type: string
                    description: |-
                      The properties of the current user after the updates
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/users/forgot_password:
    get:
      tags:
        - users
      summary: Forgot password
      description: 'Required Permission: "ANONYMOUS"'
      operationId: forgotPassword
      parameters:
        - name: username
          in: query
          description: The username of user that forgot password
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/users/validate_token:
    get:
      tags:
        - users
      summary: Validate forgot password token
      description: 'Required Permission: "ANONYMOUS"'
      operationId: validateToken
      parameters:
        - name: token
          in: query
          description: forgot password token to be validated
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/ui/views/global_menu:
    get:
      tags:
        - ui
      summary: Get the global menu items available to the current user
      operationId: getGlobalMenu
      description: 'Required Permission: "LOGGED_IN"'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  menuItems:
                    type: array
                    items:
                      $ref: '#/components/schemas/MenuItem'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/ui/system/active_environment:
    get:
      tags:
        - ui
      summary: Get the current active environment for the system
      operationId: getActiveEnv
      description: 'Required Permission: "LOGGED_IN"'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  environment:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/aws/s3/list:
    get:
      tags:
        - aws
      summary: Get a list of items from an S3 bucket
      operationId: listItems
      description: 'Required Permission: "s3_read"'
      parameters:
        - name: siteId
          in: query
          description: The site ID
          required: true
          schema:
            type: string
        - name: profileId
          in: query
          description: The profile ID
          required: true
          schema:
            type: string
        - name: path
          in: query
          description: The path of the directory to list (defaults to the root)
          required: false
          schema:
            type: string
        - name: type
          in: query
          description: The type of items to list (defaults to all types)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/S3Item'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/aws/s3/upload:
    post:
      tags:
        - aws
      summary: Upload a file to an S3 bucket
      operationId: uploadItem
      description: 'Required Permission: "s3_write"'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: The site ID
                profileId:
                  type: string
                  description: The profile ID
                path:
                  type: string
                  description: The path where the file will be uploaded (will be used as part of the key in S3)
                filename:
                  type: string
                  description: The name of the file (will be used as part of the item key in S3)
                file:
                  type: string
                  format: binary
                  description: The content of the file to upload
              required:
                - siteId
                - profileId
                - filename
                - file
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  item:
                    $ref: '#/components/schemas/S3Item'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/aws/mediaconvert/upload:
    post:
      tags:
        - aws
      summary: Upload a file to an S3 bucket and trigger a MediaConvert job
      operationId: uploadVideo
      description: 'Required Permission: "s3_write"'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: The site ID
                inputProfileId:
                  type: string
                  description: The MediaConvert profile ID
                outputProfileId:
                  type: string
                  description: The S3 profile ID for the generated URLs
                file:
                  type: string
                  format: binary
                  description: The content of the file to upload
              required:
                - siteId
                - inputProfileId
                - outputProfileId
                - file
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  item:
                    $ref: '#/components/schemas/MediaConvertResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/webdav/list:
    get:
      tags:
        - webdav
      summary: Get a list of items from a WebDAV server
      description: 'Required Permission: "webdav_read"'
      operationId: listItemsWebdav
      parameters:
        - name: siteId
          in: query
          description: The site ID
          required: true
          schema:
            type: string
        - name: profileId
          in: query
          description: The profile ID
          required: true
          schema:
            type: string
        - name: path
          in: query
          description: The path of the directory to list (defaults to the root)
          required: false
          schema:
            type: string
        - name: type
          in: query
          description: The MIME-type of items to list, defaults to all
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/WebDavItem'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/webdav/upload:
    post:
      tags:
        - webdav
      summary: Upload a file to a WebDAV server
      description: 'Required Permission: "webdav_write"'
      operationId: uploadItemWebdav
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: The site ID
                profileId:
                  type: string
                  description: The profile ID
                path:
                  type: string
                  description: The path where the file will be uploaded
                file:
                  type: string
                  format: binary
                  description: The content of the file to upload
              required:
                - siteId
                - profileId
                - file
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  item:
                    $ref: '#/components/schemas/WebDavItem'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/cluster:
    get:
      tags:
        - cluster
      summary: Get all the members of the cluster
      description: 'Required Permission: "read_cluster"'
      operationId: getClusterMembers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  clusterMembers:
                    type: array
                    items:
                      $ref: '#/components/schemas/ClusterMember'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/2/cluster/mode:
    get:
      tags:
        - cluster
      summary: Get the local Studio instance cluster mode
      description: 'Required Permission: "read_cluster"'
      operationId: getClusterMode
      parameters:
        - name: token
          in: query
          description: Management token - not required for authenticated users
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  mode:
                    type: string
                    enum:
                      - PRIMARY
                      - REPLICA
                      - UNKNOWN
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/2/sites/available_blueprints:
    get:
      tags:
        - sites
      summary: Get all available blueprints
      description: 'Required Permission: "LOGGED_IN"'
      operationId: availableBlueprints
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  blueprints:
                    type: array
                    items:
                      $ref: '#/components/schemas/PluginDescriptor'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/sites/create_site_from_marketplace:
    post:
      tags:
        - sites
      summary: Create a site from a Marketplace blueprint
      operationId: createSiteFromMarketplace
      requestBody:
        description: The site information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSiteFromMarketplace'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/sites/{siteId}:
    post:
      tags:
        - sites
      summary: Updates the name and description for a given site
      description: 'Required Permission: "edit_site"'
      operationId: updateSite
      parameters:
        - name: siteId
          in: path
          required: true
          description: The site ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: The name of the site
                  type: string
                description:
                  description: The description of the site
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - sites
      summary: Deletes a site
      description: 'Required Permission: "delete_site"'
      operationId: deleteSite
      parameters:
        - name: siteId
          in: path
          required: true
          description: The site ID
          schema:
            type: string
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/sites/{siteId}/unlock:
    post:
      tags:
        - sites
      summary: Unlock a site locked with state LOCKED
      description: 'Required Permission: "edit_site"'
      operationId: unlockSite
      parameters:
        - name: siteId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  result:
                    $ref: '#/components/schemas/ContentValidationResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/sites/{siteId}/policy/validate:
    post:
      tags:
        - sites
      summary: Verifies if all indicated actions are compliant with the site policies
      operationId: validate
      parameters:
        - name: siteId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentValidationRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  result:
                    $ref: '#/components/schemas/ContentValidationResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/sites/{siteId}/duplicate:
    post:
      tags:
        - sites
      summary: Duplicates a site
      operationId: duplicateSite
      parameters:
        - name: siteId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        description: Duplicate site request information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DuplicateSiteRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/1/services/api/1/site/create.json:
    post:
      tags:
        - sites
      summary: Create a Crafter Studio project.
      description: 'Required Role: "Admin"'
      operationId: createSite
      requestBody:
        description: Project/site details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                site_id:
                  description: Project/Site ID to use
                  type: string
                  example: my-editorial
                name:
                  type: string
                  description: Label to use for the project/site
                sandbox_branch:
                  type: string
                  description: "Name for sandbox branch (default: master)"
                description:
                  type: string
                  description: Project/Site description
                  example: "My very first site!"
                blueprint:
                  type: string
                  description: "Blueprint to use for bootstrapping the project/site \n\n <i>Required if</i> `use_remote` <i>is false</i>"
                  example: "org.craftercms.blueprint.empty"
                use_remote:
                  type: boolean
                  description: Use remote repository option if true, otherwise false
                  example: false
                remote_name:
                  type: string
                  description: "Remote repository name (default: origin)"
                remote_url:
                  type: string
                  description: "Remote repository URL \n\n <i>Required if</i> `use_remote` <i>is true</i>"
                remote_branch:
                  type: string
                  description: Branch to clone repo from
                single_branch:
                  type: string
                  description: Clone single branch if true, otherwise clone all
                authentication_type:
                  type: string
                  description: "Authentication type to use to access remote repository \n\n \t none: No authentication \n\n \t basic: username password authentication \n\n \t token: username token authentication \n\n \t key: key-based authentication \n\n <i>Required if</i> `authentication_type` <i>to be used is not</i> `none`"
                remote_username:
                  type: string
                  description: "Username to access remote repository \n\n <i>Required if</i> `authentication_type` <i>is set to</i> `basic`"
                remote_password:
                  type: string
                  description: "Password to access remote repository \n\n <i>Required if</i> `authentication_type` <i>is set to</i> `basic`"
                remote_token:
                  type: string
                  description: "Token to use to access remote repository \n\n <i>Required if</i> `authentication_type` <i>is set to</i> `token`"
                remote_private_key:
                  type: string
                  description: Private key to access remote repository
                create_option:
                  type: string
                  description: "Create options for remote repository: \n\n `clone`: clone from remote repository <i>Required if</i> `use_remote` <i>is true</i>"
                site_params:
                  type: object
                  description: Object containing all parameters for the blueprint. It should include all required parameters from the descriptor
                create_as_orphan:
                  type: boolean
                  description: Create the project/site from a remote repository as orphan (no git history) - default is false
              required:
                - site_id
                - name
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: OK
        '400':
          $ref: '#/components/responses/api1BadRequest'
        '401':
          $ref: '#/components/responses/api1Unauthorized'
        '403':
          $ref: '#/components/responses/api1Forbidden'
        '404':
          $ref: '#/components/responses/api1NotFound'
        '409':
          $ref: '#/components/responses/api1Conflict'
        '500':
          $ref: '#/components/responses/api1InternalServerError'

  /api/1/services/api/1/site/delete-site.json:
    post:
      tags:
        - sites
      summary: Delete a Crafter Studio project.
      description: 'Required Role: "Admin"'
      operationId: deleteSiteAPI1
      requestBody:
        description: Project/site to delete
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                site_id:
                  description: Project/Site ID to use
                  type: string
                  example: my-editorial
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
                example: true
        '400':
          $ref: '#/components/responses/api1BadRequest'
        '401':
          $ref: '#/components/responses/api1Unauthorized'
        '403':
          $ref: '#/components/responses/api1Forbidden'
        '404':
          $ref: '#/components/responses/api1NotFound'
        '409':
          $ref: '#/components/responses/api1Conflict'
        '500':
          $ref: '#/components/responses/api1InternalServerError'

  /api/1/services/api/1/site/exists.json:
    get:
      tags:
        - sites
      summary: Check if Crafter Studio project/site exists.
      description: "Required role: admin, member in the project/site"
      operationId: projectExists
      parameters:
        - name: site_id
          in: query
          description: Project/Site ID to use
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  exists:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/api1BadRequest'
        '401':
          $ref: '#/components/responses/api1Unauthorized'
        '500':
          $ref: '#/components/responses/api1InternalServerError'

  /api/1/services/api/1/site/get-canned-message.json:
    get:
      tags:
        - sites
      summary: Get rejection reason.
      description: No required role
      operationId: getCannedMessage
      parameters:
        - name: site_id
          in: query
          description: Project/Site ID to use
          required: true
          schema:
            type: string
        - name: locale
          in: query
          description: Locale of message
          required: true
          schema:
            type: string
          example: en
        - name: type
          in: query
          description: Message type
          required: true
          schema:
            type: string
          example: Typos
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  exists:
                    type: string
                    example: "This content has multiple spelling errors and/or grammatical errors. Please correct and re-submit."
        '400':
          $ref: '#/components/responses/api1BadRequest'
        '401':
          $ref: '#/components/responses/api1Unauthorized'
        '500':
          $ref: '#/components/responses/api1InternalServerError'

  /api/1/services/api/1/site/get.json:
    get:
      tags:
        - sites
      summary: Get a Crafter Studio project/site
      description: No required role
      operationId: getSite
      parameters:
        - name: site_id
          in: query
          description: Project/Site ID to use
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Site'
              example:
                id: 8
                siteUuid: "8d71254a-ceb3-409a-bb59-610505764a77"
                siteId: "third"
                name: "third"
                description: "null"
                deleted: 0
                liveUrl: "null"
                lastCommitId: "5cb6fe1a1f2fa5aa38d372c757c8db8f0f17ecb3"
                publishingEnabled: 1
                publishingStatus: "ready"
                lastVerifiedGitlogCommitId: "5cb6fe1a1f2fa5aa38d372c757c8db8f0f17ecb3"
                sandboxBranch: "master"
                publishedRepoCreated: 0
                state: "READY"
                lastSyncedGitlogCommitId: "5cb6fe1a1f2fa5aa38d372c757c8db8f0f17ecb3"
                siteDeleted: false
                sitePublishedRepoCreated: false
        '400':
          $ref: '#/components/responses/api1BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/api1NotFound'
        '500':
          $ref: '#/components/responses/api1InternalServerError'

  /api/1/services/api/1/site/monitor-content.json:
    get:
      tags:
        - sites
      summary: Get all projects/sites content monitors
      description: "Required role: none"
      operationId: monitorContent
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    site_id:
                      type: string
                    contentMonitoring:
                      type: object
                      properties:
                        monitors:
                          type: array
                          items:
                            type: string
        '400':
          $ref: '#/components/responses/api1BadRequest'
        '401':
          $ref: '#/components/responses/api1Unauthorized'
        '500':
          $ref: '#/components/responses/api1InternalServerError'

  /api/1/services/api/1/repo/sync-from-repo.json:
    post:
      tags:
        - repository
      summary: Synchronize Crafter Studio’s database and object state with the underlying repository.
      description: "Required role: Admin, site member <br><br> This needs to be done if the underlying repository was updated directly, bypassing Studio’s APIs/UI."
      operationId: syncFromRepo
      requestBody:
        description: Synchronize from repository request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                site_id:
                  type: string
                  description: Site ID
              required:
                - site_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "OK"
        '400':
          $ref: '#/components/responses/api1BadRequest'
        '401':
          $ref: '#/components/responses/api1Unauthorized'
        '404':
          $ref: '#/components/responses/api1NotFound'
        '500':
          $ref: '#/components/responses/api1InternalServerError'

  /api/1/services/api/1/security/get-user-permissions.json:
    get:
      tags:
        - security
      summary: Get user permissions for project/site and space (path).
      description: No required role
      operationId: getUserPermissions
      parameters:
        - name: site_id
          in: query
          description: Project/Site ID to use
          schema:
            type: string
        - name: path
          in: query
          description: Path of the content
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  permissions:
                    type: array
                    items:
                      type: string
                example:
                  permissions: [
                    "read"
                  ]
        '401':
          $ref: '#/components/responses/api1Unauthorized'
        '500':
          $ref: '#/components/responses/api1InternalServerError'

  /api/1/services/api/1/publish/commits.json:
    post:
      deprecated: true
      tags:
        - publishing
      summary: Publish commits from sandbox repository by commit id.
      description: "Required role: none. <br /> This operation is deprecated, use /api/2/publish instead."
      operationId: publishCommits
      requestBody:
        description: Publish commits from sandbox repository request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                site_id:
                  type: string
                  description: Project/Site to use
                environment:
                  type: string
                  description: Environment to deploy content
                commit_ids:
                  type: array
                  items:
                    type: string
                  description: List of commit ids to publish
                comment:
                  type: string
                  description: Submission comment
              example:
                site_id: my-editorial
                environment: live
                commit_ids: [
                  "c89ee1cb2be4b41b0966d20c12d53b68ca70d74a",
                  "0664df1ad04a9627dccb55a51ebf3704e313e40b",
                  "93ae0e5e8d084fa9b7723cf3cf7ce526f47af0a9"
                ]
                comment: "My submission comment"
              required:
                - site_id
                - environment
                - commit_ids
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  packageId:
                    type: number
                    description: package ID
                example:
                  message: "OK"
                  packageId: 15
        '400':
          $ref: '#/components/responses/api1BadRequest'
        '401':
          $ref: '#/components/responses/api1Unauthorized'
        '404':
          $ref: '#/components/responses/api1NotFound'
        '500':
          $ref: '#/components/responses/api1InternalServerError'

  /api/1/services/api/1/publish/start.json:
    post:
      tags:
        - publishing
      summary: Start Crafter Studio’s publishing for a project/site.
      description: "Required role: Admin, Site Admin"
      operationId: publishStart
      requestBody:
        description: Start project/site publishing request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                site_id:
                  type: string
                  description: Project/Site ID to use
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "OK"
        '400':
          $ref: '#/components/responses/api1BadRequest'
        '401':
          $ref: '#/components/responses/api1Unauthorized'
        '403':
          $ref: '#/components/responses/api1Forbidden'
        '404':
          $ref: '#/components/responses/api1NotFound'
        '500':
          $ref: '#/components/responses/api1InternalServerError'

  /api/1/services/api/1/publish/stop.json:
    post:
      tags:
        - publishing
      summary: Stop Crafter Studio’s publishing for a project/site.
      description: "Required role: Admin, Site Admin"
      operationId: publishStop
      requestBody:
        description: Stop project/site publishing request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                site_id:
                  type: string
                  description: Project/Site ID to use
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "OK"
        '400':
          $ref: '#/components/responses/api1BadRequest'
        '401':
          $ref: '#/components/responses/api1Unauthorized'
        '403':
          $ref: '#/components/responses/api1Forbidden'
        '404':
          $ref: '#/components/responses/api1NotFound'
        '500':
          $ref: '#/components/responses/api1InternalServerError'

  /api/1/services/api/1/publish/reset-staging.json:
    post:
      tags:
        - publishing
      summary: Reset Crafter Studio’s staging publishing target with the live publishing target.
      description: "Required role: Admin, project/site member"
      operationId: publishResetStaging
      requestBody:
        description: Reset staging request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                site_id:
                  type: string
                  description: Project/Site ID to use
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "OK"
        '400':
          $ref: '#/components/responses/api1BadRequest'
        '401':
          $ref: '#/components/responses/api1Unauthorized'
        '404':
          $ref: '#/components/responses/api1NotFound'
        '500':
          $ref: '#/components/responses/api1InternalServerError'

  /api/1/services/api/1/dependency/calculate-dependencies.json:
    post:
      tags:
        - dependency
      summary: Calculate and return dependencies for one or more items.
      description: "Required role: Project/site member"
      operationId: calculateDependencies
      parameters:
        - name: site_id
          in: query
          description: Project/Site ID to use
          required: true
          schema:
            type: string
      requestBody:
        description: Reset staging request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                entities:
                  type: array
                  items:
                    type: object
                    properties:
                      item:
                        type: string
                        description: Path to the item(s)
                  example:
                    - item: /path/to/item1.xml
                    - item: /path/to/item2.xml
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  item:
                    $ref: '#/components/schemas/WebDavItem'
                example:
                  message: "OK"
        '400':
          $ref: '#/components/responses/api1BadRequest'
        '401':
          $ref: '#/components/responses/api1Unauthorized'
        '404':
          $ref: '#/components/responses/api1NotFound'
        '500':
          $ref: '#/components/responses/api1InternalServerError'

  /api/1/services/api/1/dependency/get-dependant.json:
    post:
      tags:
        - dependency
      summary: Get dependant content items.
      description: "Required role: N/A"
      operationId: getDependant
      parameters:
        - name: site_id
          in: query
          description: Project/Site ID to use
          required: true
          schema:
            type: string
        - name: path
          in: query
          schema:
            type: string
          description: Path of the content
          required: true
          example: /templates/web/pages/home.ftl
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "OK"
        '400':
          $ref: '#/components/responses/api1BadRequest'
        '401':
          $ref: '#/components/responses/api1Unauthorized'
        '404':
          $ref: '#/components/responses/api1NotFound'
        '500':
          $ref: '#/components/responses/api1InternalServerError'

  /api/1/services/api/1/dependency/get-simple-dependencies.json:
    post:
      tags:
        - dependency
      summary: Get simple dependencies.
      description: "Required role: N/A"
      operationId: getSimpleDependencies
      parameters:
        - name: site_id
          in: query
          description: Project/Site ID to use
          required: true
          schema:
            type: string
        - name: path
          in: query
          schema:
            type: string
          description: Path of the content
          required: true
          example: /site/website/index.xml
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "OK"
        '400':
          $ref: '#/components/responses/api1BadRequest'
        '401':
          $ref: '#/components/responses/api1Unauthorized'
        '404':
          $ref: '#/components/responses/api1NotFound'
        '500':
          $ref: '#/components/responses/api1InternalServerError'

  /api/1/services/api/1/deployment/bulk-golive.json:
    post:
      deprecated: true
      tags:
        - deployment
      summary: Bulk go live.
      description: "Required role: N/A. <br /> This operation is deprecated, use /api/2/publish instead."
      operationId: bulkGoLive
      parameters:
        - name: site_id
          in: query
          description: Project/Site ID to use
          required: true
          schema:
            type: string
        - name: path
          in: query
          schema:
            type: string
          description: Path of the content
          required: true
          example: /site/website
        - name: environment
          in: query
          schema:
            type: string
          description: Environment to deploy content
          required: true
          example: Live
        - name: comment
          in: query
          schema:
            type: string
          description: Submission comment
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  packageId:
                    type: number
                    description: package ID
                example:
                  message: "OK"
                  packageId: 15
        '400':
          $ref: '#/components/responses/api1BadRequest'
        '401':
          $ref: '#/components/responses/api1Unauthorized'
        '404':
          $ref: '#/components/responses/api1NotFound'
        '500':
          $ref: '#/components/responses/api1InternalServerError'

  /api/1/services/api/1/preview/sync-site.json:
    post:
      tags:
        - preview
      summary: Sync preview content with repository
      description: "Required role: N/A"
      operationId: syncSite
      parameters:
        - name: site_id
          in: query
          description: Project/Site ID to use
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "OK"
        '400':
          $ref: '#/components/responses/api1BadRequest'
        '401':
          $ref: '#/components/responses/api1Unauthorized'
        '404':
          $ref: '#/components/responses/api1NotFound'
        '500':
          $ref: '#/components/responses/api1InternalServerError'

  /api/1/services/api/1/content/change-content-type.json:
    post:
      tags:
        - content
      summary: Change template for the content.
      description: "Required role: N/A"
      operationId: changeContentType
      parameters:
        - name: site_id
          in: query
          description: Project/Site ID to use
          required: true
          schema:
            type: string
        - name: path
          in: query
          schema:
            type: string
          description: Path of the content
          required: true
          example: /site/website/index.xml
        - name: contentType
          in: query
          schema:
            type: string
          description: Content type to change to
          required: true
          example: /page/generic
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "OK"
        '400':
          $ref: '#/components/responses/api1BadRequest'
        '401':
          $ref: '#/components/responses/api1Unauthorized'
        '404':
          $ref: '#/components/responses/api1NotFound'
        '500':
          $ref: '#/components/responses/api1InternalServerError'

  /api/1/services/api/1/content/create-folder.json:
    post:
      tags:
        - content
      summary: Create folder.
      description: "Required role: N/A"
      operationId: createFolder
      parameters:
        - name: site_id
          in: query
          description: Project/Site ID to use
          required: true
          schema:
            type: string
        - name: path
          in: query
          schema:
            type: string
          description: Path of the content
          required: true
          example: /site/website/
        - name: name
          in: query
          schema:
            type: string
          description: Name of the new folder
          required: true
          example: newFolder
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: boolean
                example:
                  message: true
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/1/services/api/1/content/rename-folder.json:
    post:
      tags:
        - content
      summary: Rename folder.
      description: "Required role: N/A"
      operationId: renameFolder
      parameters:
        - name: site_id
          in: query
          description: Project/Site ID to use
          required: true
          schema:
            type: string
        - name: path
          in: query
          schema:
            type: string
          description: Path of the content
          required: true
          example: /site/website/
        - name: name
          in: query
          schema:
            type: string
          description: New name of the folder
          required: true
          example: newFolder
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                example:
                  result: "true"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/1/services/api/1/content/get-content.json:
    get:
      tags:
        - content
      summary: Get content stream.
      description: "Required role: N/A"
      operationId: getContent
      parameters:
        - name: site_id
          in: query
          description: Project/Site ID to use
          required: true
          schema:
            type: string
        - name: path
          in: query
          schema:
            type: string
          description: Path of the content
          required: true
          example: /site/website/health/index.xml
        - name: edit
          in: query
          schema:
            type: boolean
          description: True to make content locked
          required: true
          example: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: string
              example:
                content: "<page>\n\t<content-type>/page/category-landing</content-type>\n\t<display-template>/templates/web/pages/category-landing.ftl</display-template>\n\t<no-template-required/>\n\t<merge-strategy>inherit-levels</merge-strategy>\n\t<objectGroupId>0557</objectGroupId>\n\t<objectId>05573d7a-3556-1ad0-6e34-9b085944fee2</objectId>\n\t<file-name>index.xml</file-name>\n\t<folder-name>health</folder-name>\n\t<placeInNav>true</placeInNav>\n\t<orderDefault_f>9000</orderDefault_f>\n\t<internal-name>Health</internal-name>\n\t<title_t>Health</title_t>\n\t<createdDate>2017-03-14T15:21:57.000Z</createdDate>\n\t<createdDate_dt>2017-03-14T15:21:57.000Z</createdDate_dt>\n\t<lastModifiedDate>2020-10-07T12:08:00.200Z</lastModifiedDate>\n\t<lastModifiedDate_dt>2020-10-07T12:08:00.200Z</lastModifiedDate_dt>\n\t<category_s>health</category_s>\n\t<max_articles_i>10</max_articles_i>\n\t<articles_title_t>Health</articles_title_t>\n\t<disabled>false</disabled>\n\t<header_o item-list=\"true\"/>\n\t<left_rail_o item-list=\"true\"/>\n</page>\n"
        '400':
          $ref: '#/components/responses/api1BadRequest'
        '401':
          $ref: '#/components/responses/api1Unauthorized'
        '403':
          $ref: '#/components/responses/api1Forbidden'

  /api/1/services/api/1/content/get-content-at-path.json:
    get:
      tags:
        - content
      summary: Get content stream at path.
      description: "Required role: N/A"
      operationId: getContentAtPath
      parameters:
        - name: site_id
          in: query
          description: Project/Site ID to use
          required: true
          schema:
            type: string
        - name: path
          in: query
          schema:
            type: string
          description: Path of the content
          required: true
          example: /site/website/health/index.xml
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  contentStream:
                    type: object
                    properties:
                      type:
                        type: integer
                      size:
                        type: integer
                  contentPath:
                    type: string
              example:
                contentStream:
                  type: 3
                  size: 1699
                contentPath: "/site/website/health/index.xml"
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/1/services/api/1/content/get-content-type.json:
    get:
      tags:
        - content
      summary: Get content type configuration.
      description: "Required role: N/A"
      operationId: getContentType
      parameters:
        - name: site_id
          in: query
          description: Project/Site ID to use
          required: true
          schema:
            type: string
        - name: type
          in: query
          schema:
            type: string
          description: Content type
          required: true
          example: /page/category-landing
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentType'
              example:
                name: "/page/category-landing"
                label: "Category Landing"
                form: "/page/category-landing"
                formPath: "simple"
                type: "page"
                contentAsFolder: true
                useRoundedFolder: false
                modelInstancePath: "NOT-USED-BY-SIMPLE-FORM-ENGINE"
                allowedRoles: []
                lastUpdated: "2023-11-10T18:00:05.882948Z"
                copyDependencyPattern: []
                imageThumbnail: "page-category-landing.png"
                noThumbnail: false
                pathIncludes: [ "^/site/website/(?!articles/)(.*)"]
                pathExcludes: []
                nodeRef: "null"
                quickCreate: false
                quickCreatePath: ""
                deleteDependencyPattern: []
                previewable: true
        '400':
          $ref: '#/components/responses/api1BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/1/services/api/1/content/get-content-types.json:
    get:
      tags:
        - content
      summary: Get content types allowed for given path.
      description: "Required role: N/A"
      operationId: getContentTypes
      parameters:
        - name: site
          in: query
          description: Project/Site ID to use
          required: true
          schema:
            type: string
        - name: path
          in: query
          schema:
            type: string
          description: Path to get content types for
          required: true
          example: /site/website/
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContentType'
        '400':
          $ref: '#/components/responses/api1BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/1/services/api/1/content/get-item.json:
    get:
      tags:
        - content
      summary: Get content item.
      description: "Required role: N/A"
      operationId: getItem
      parameters:
        - name: site_id
          in: query
          description: Project/Site ID to use
          required: true
          schema:
            type: string
        - name: path
          in: query
          schema:
            type: string
          description: Path of the content
          required: true
          example: /site/website/index.xml
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentItemV1'
        '400':
          $ref: '#/components/responses/api1BadRequest'
        '401':
          $ref: '#/components/responses/api1Unauthorized'
        '403':
          $ref: '#/components/responses/api1Forbidden'

  /api/1/services/api/1/content/get-item-orders.json:
    get:
      tags:
        - content
      summary: Get item orders.
      description: "Required role: N/A"
      operationId: getItemOrders
      parameters:
        - name: site_id
          in: query
          description: Project/Site ID to use
          required: true
          schema:
            type: string
        - name: path
          in: query
          schema:
            type: string
          description: Path of the content
          required: true
          example: /site/website/style/index.xml
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  item:
                    $ref: '#/components/schemas/ContentItemV1'
                  versions:
                    type: array
                    items:
                      $ref: '#/components/schemas/ContentItemOrder'
        '400':
          $ref: '#/components/responses/api1BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/1/services/api/1/content/get-item-versions.json:
    get:
      tags:
        - content
      summary: Get content item version history.
      description: "Required role: N/A"
      operationId: getItemVersions
      parameters:
        - name: site_id
          in: query
          description: Project/Site ID to use
          required: true
          schema:
            type: string
        - name: path
          in: query
          schema:
            type: string
          description: Path of the content
          required: true
          example: /site/website/index.xml
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContentItemVersions'
        '400':
          $ref: '#/components/responses/api1BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/1/services/api/1/content/get-items-tree.json:
    get:
      tags:
        - content
      summary: Get items tree.
      description: "Required role: N/A"
      operationId: getItemsTree
      parameters:
        - name: site_id
          in: query
          description: Project/Site ID to use
          required: true
          schema:
            type: string
        - name: path
          in: query
          schema:
            type: string
          description: Path of the content
          required: true
          example: /site/website/index.xml
        - name: depth
          in: query
          schema:
            type: integer
          description: Depth of the tree to display
          required: true
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentItemV1'
        '400':
          $ref: '#/components/responses/api1BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/1/services/api/1/content/get-next-item-order.json:
    get:
      tags:
        - content
      summary: Get next item order.
      description: "Required role: N/A"
      operationId: getNextItemOrder
      parameters:
        - name: site_id
          in: query
          description: Project/Site ID to use
          required: true
          schema:
            type: string
        - name: path
          in: query
          schema:
            type: string
          description: Path of the parent item
          required: true
          example: /site/website/index.xml
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  nextValue:
                    type: number
              example: 1000.0
        '400':
          $ref: '#/components/responses/api1BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/1/services/api/1/content/get-pages.json:
    get:
      tags:
        - content
      summary: Get pages. Gets tree of content items for given path.
      description: "Required role: N/A"
      operationId: getPages
      parameters:
        - name: site_id
          in: query
          description: Project/Site ID to use
          required: true
          schema:
            type: string
        - name: path
          in: query
          schema:
            type: string
          description: Path of the content
          required: true
          example: /site/website/index.xml
        - name: depth
          in: query
          schema:
            type: integer
          description: Depth of the tree to display
          required: true
          example: 1
        - name: order
          in: query
          schema:
            type: string
          description: Order of content items.
          required: true
          example: default
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContentItemV1'
        '400':
          $ref: '#/components/responses/api1BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/1/services/api/1/content/reorder-items.json:
    get:
      tags:
        - content
      summary: Reorder content items.
      description: "Required role: N/A"
      operationId: reorderItems
      parameters:
        - name: site_id
          in: query
          description: Project/Site ID to use
          required: true
          schema:
            type: string
        - name: path
          in: query
          schema:
            type: string
          description: Path of the content
          required: true
          example: /site/website/health/index.xml
        - name: before
          in: query
          schema:
            type: string
          description: Item before the item with given path
          required: true
          example: 1
        - name: after
          in: query
          schema:
            type: string
          description: Item after the item with given path
          required: true
          example: default
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  orderValue:
                    type: number
              example: 10500.0
        '400':
          $ref: '#/components/responses/api1BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/api1InternalServerError'

  /api/1/services/api/1/content/revert-content.json:
    get:
      tags:
        - content
      summary: Revert content item to a specific version.
      description: "Required role: N/A"
      operationId: revertContent
      parameters:
        - name: site
          in: query
          description: Project/Site ID to use
          required: true
          schema:
            type: string
        - name: path
          in: query
          schema:
            type: string
          description: Path of the content
          required: true
          example: /site/website/style/index.xml
        - name: version
          in: query
          schema:
            type: string
          description: Version to revert to
          required: true
          example: 818e0f68bfccda9a9a1a788341b87ca3ba5ad3c6
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
                example: true
        '400':
          $ref: '#/components/responses/api1BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/1/services/api/1/content/write-content.json:
    post:
      tags:
        - content
      summary: Write content.
      description: "Required role: Author <br><br> Options:<br>WriteContentWebForm: Save content using Create/Edit web form.<br> WriteContentAssetForm: Save content using asset form (templates, javascript, css, groovy).<br> WriteContentFileUpload: File upload (multipart request)"
      operationId: writeContent
      parameters:
        - in: query
          name: filter
          required: true
          style: form
          explode: true
          schema:
            oneOf:
              - $ref: '#/components/schemas/WriteContentWebForm'
                additionalProperties: false
              - $ref: '#/components/schemas/WriteContentAssetForm'
                additionalProperties: false
              - $ref: '#/components/schemas/WriteContentFileUpload'
                additionalProperties: false
      requestBody:
        description: "Write content request body <br> Use \"multipart/form-data\" when uploading a file (WriteContentFileUpload)"
        required: true
        content:
          application/json:
            schema:
              type: string
            examples:
              writeContentWebForm:
                value: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>
                  <!--
                  ~ Copyright (C) 2007-2024 Crafter Software Corporation. All Rights Reserved.
                  ~
                  ~ This program is free software: you can redistribute it and/or modify
                  ~ it under the terms of the GNU General Public License version 3 as published by
                  ~ the Free Software Foundation.
                  ~
                  ~ This program is distributed in the hope that it will be useful,
                  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
                  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                  ~ GNU General Public License for more details.
                  ~
                  ~ You should have received a copy of the GNU General Public License
                  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
                  --><page>
                  <content-type>/page/article</content-type>
                  <display-template>/templates/web/pages/article.ftl</display-template>
                  <merge-strategy>inherit-levels</merge-strategy>
                  <objectGroupId>f1f9</objectGroupId>
                  <objectId>f1f9c488-67e1-7ec0-d3ca-560b194e64d1</objectId>
                  <sections_o>
                  <item>
                    <section_html><![CDATA[<p>Nulla sed enim ipsum. Sed ac neque a ligula malesuada volutpat. Donec et ligula rutrum, mattis mauris eget, vestibulum metus. Maecenas non vehicula neque. Nunc ac mauris id ipsum commodo tempus. Integer at dolor consequat, dignissim eros in, imperdiet dui. Aliquam condimentum turpis eget tellus ultrices tincidunt. Pellentesque id varius purus, ac tristique augue. Etiam ut pharetra purus. Vestibulum quis vehicula eros. Mauris laoreet purus nec felis ullamcorper convallis. test</p>
                    <p>Quisque urna purus, posuere nec urna sed, ornare aliquet mauris. In faucibus vitae tellus id iaculis. Donec porttitor, elit eu elementum pulvinar, sapien ex cursus lacus, non ornare ex lectus ut elit. Donec eros ligula, suscipit eu tellus ut, tristique hendrerit tortor. Fusce sollicitudin mollis risus, ut rhoncus magna volutpat vel. Cras auctor, elit id pellentesque semper, neque nibh fermentum ante, sit amet malesuada felis magna nec enim. Vivamus sollicitudin placerat felis, vel blandit dolor sollicitudin a. Nunc vitae volutpat augue. Nunc tristique placerat tortor condimentum sagittis. Sed eu egestas ex, quis auctor neque. Nam eget tellus suscipit, vestibulum augue nec, consequat erat. Mauris malesuada nec ligula non posuere. Proin vitae posuere tortor. Phasellus vulputate quam ut dictum vulputate.</p>
                    <p>Integer ac lectus metus. Ut aliquam ipsum ligula, quis molestie ex pretium sit amet. Morbi porttitor neque vel luctus laoreet. Mauris varius lacus a eros aliquam, in maximus nibh aliquam. Integer sodales consequat metus eget accumsan. Integer viverra mi erat, in hendrerit massa vestibulum placerat. Sed ut gravida nisl, ut cursus neque. Vestibulum tristique rutrum augue vel aliquet.</p>
                    <p>Ut quis faucibus diam. Aliquam dolor metus, laoreet vitae lacinia a, aliquam a tellus. Vivamus sed commodo ipsum, in lacinia nisl. Sed metus diam, porta eget tortor et, vehicula hendrerit sapien. Vestibulum vehicula urna felis, id elementum libero pellentesque id. Vivamus in massa velit. Suspendisse vitae turpis fermentum lectus pellentesque laoreet. Curabitur viverra pretium turpis, eget feugiat mi blandit a. Quisque nisl urna, porta ut urna eget, mattis fringilla nisi. Ut lacus ligula, dapibus ac fermentum ac, rhoncus eget metus. Donec scelerisque, felis vitae viverra iaculis, diam sem gravida tellus, non sodales urna urna sit amet enim. Duis id justo vitae justo suscipit porta placerat vel ligula. Morbi justo nunc, rhoncus laoreet ipsum a, aliquet eleifend dui. In a quam tortor.</p>
                    <p>Pellentesque eget eros ut dui tincidunt convallis. Pellentesque tincidunt rutrum tellus, non rhoncus dui finibus eu. Integer eu sem maximus, blandit neque eu, congue leo. Ut pretium efficitur turpis, id dapibus turpis bibendum vel. Suspendisse a nibh dictum, imperdiet est et, interdum odio. Morbi urna magna, eleifend vitae luctus ac, scelerisque sit amet nisi. Quisque maximus placerat ante et fermentum. Nulla eu aliquet arcu, vel maximus massa. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aliquam posuere arcu ex, in sagittis orci rhoncus eu. Suspendisse potenti. Curabitur facilisis sapien et ligula tristique lacinia. Aliquam a mauris bibendum, placerat augue sit amet, hendrerit arcu. Nam in bibendum sapien. Pellentesque laoreet nisi vel metus dapibus dictum. Integer semper, velit laoreet ornare maximus, nulla orci maximus ante, a tincidunt eros risus blandit eros.</p>]]></section_html>
                    </item>
                    </sections_o>
                  <file-name>index.xml</file-name>
                  <folder-name>men-styles-for-winter</folder-name>
                  <internal-name>Men Styles For Winter</internal-name>
                  <title_t>Men Styles For Winter</title_t>
                  <subject_t>Men Styles For Winter</subject_t>
                  <author_s>John Doe</author_s>
                  <categories_o>
                  <item>
                    <key>style</key>
                    <value_smv>Style</value_smv>
                  </item>
                  </categories_o>
                  <segments_o>
                    <item>
                      <key>guy</key>
                      <value_smv>Guy</value_smv>
                    </item>
                  </segments_o>
                  <date_dt>2021-01-05T05:00:00.000Z</date_dt>
                  <createdDate>2017-03-3T20:57:7.000Z</createdDate>
                  <createdDate_dt>2017-03-3T20:57:7.000Z</createdDate_dt>
                  <lastModifiedDate>2017-03-13T20:33:5.000Z</lastModifiedDate>
                  <lastModifiedDate_dt>2023-11-20T13:25:05.289Z</lastModifiedDate_dt>
                  <featured_b>true</featured_b>
                  <summary_t>Nulla sed enim ipsum. Sed ac neque a ligula malesuada volutpat. Donec et ligula rutrum, mattis mauris eget, vestibulum metus. Maecenas non vehicula neque. Nunc ac mauris id ipsum commodo tempus. Integer at dolor consequat, dignissim eros in, imperdiet dui.</summary_t>
                  <image_s>/static-assets/images/winter-man-pic.jpg</image_s>
                  </page>"
              writeContentAssetForm:
                value: <#import "/templates/system/common/cstudio-support.ftl" as studio />

                  <!DOCTYPE HTML>
                  <!--
                  Editorial by HTML5 UP
                  html5up.net | @ajlkn
                  Free for personal and commercial use under the CCA 3.0 license (html5up.net/license)
                  Test write-content
                  -->
                  <html>
                    <head>
                      <title>${contentModel.title_t}</title>
                      <meta charset="utf-8" />
                      <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no" />
                      <!--[if lte IE 8]><script src="/static-assets/js/ie/html5shiv.js"></script><![endif]-->
                      <link rel="stylesheet" href="/static-assets/css/main.css?v=${siteContext.siteName}" />
                      <!--[if lte IE 9]><link rel="stylesheet" href="/static-assets/css/ie9.css" /><![endif]-->
                      <!--[if lte IE 8]><link rel="stylesheet" href="/static-assets/css/ie8.css" /><![endif]-->
                      <link rel="stylesheet" href="/static-assets/css/jquery-ui.min.css" />
                    </head>
                    <body>
                      <!-- Wrapper -->
                      <div id="wrapper">

                        <!-- Main -->
                        <div id="main">
                          <div class="inner">

                            <!-- Header -->
                            <@renderComponent component=contentModel.header_o.item />

                            <!-- Banner -->
                            <section id="banner" <@studio.iceAttr iceGroup="hero"/>>
                              <div class="content">
                                <header>${contentModel.hero_title_html}</header>
                                ${contentModel.hero_text_html}
                              </div>
                              <span class="image object">
                                <img src="${contentModel.hero_image_s !""}" alt="" />
                              </span>
                            </section>

                            <!-- Section -->
                            <section <@studio.iceAttr iceGroup="features"/>>
                              <header class="major">
                                <h2>${contentModel.features_title_t}</h2>
                              </header>
                              <div class="features" <@studio.componentContainerAttr target="features_o" component=contentModel/>>
                                <#if contentModel.features_o?? && contentModel.features_o.item??>
                                  <#list contentModel.features_o.item as feature>
                                    <@renderComponent component=feature />
                                  </#list>
                                </#if>
                              </div>
                            </section>

                            <!-- Section -->
                            <section>
                              <header class="major">
                                <h2>Featured Articles</h2>
                              </header>
                              <div class="posts">
                                <#list articles as article>
                                  <article>
                                    <a href="${article.url}" class="image">
                                      <#if article.image??>
                                        <#assign articleImage = article.image/>
                                      <#else>
                                        <#assign articleImage = "/static-assets/images/placeholder.png"/>
                                      </#if>
                                      <img src="${articleImage}" alt="" />
                                    </a>
                                    <h3><a href="${article.url}">${article.title}</a></h3>
                                    <p>${article.summary}</p>
                                    <ul class="actions">
                                      <li><a href="${article.url}" class="button">More</a></li>
                                    </ul>
                                  </article>
                                </#list>
                              </div>
                            </section>

                          </div>
                        </div>

                        <!-- Left Rail -->
                        <@renderComponent component=contentModel.left\-rail_o.item />

                      </div>

                      <!-- Scripts -->
                      <script src="/static-assets/js/jquery.min.js"></script>
                      <script src="/static-assets/js/jquery-ui.min.js"></script>
                      <script src="/static-assets/js/skel.min.js"></script>
                      <script src="/static-assets/js/util.js"></script>
                      <!--[if lte IE 8]><script src="/static-assets/js/ie/respond.min.js"></script><![endif]-->
                      <script src="/static-assets/js/main.js?v=${siteContext.siteName}"></script>

                      <@studio.toolSupport/>
                    </body>
                  </html>
          multipart/form-data: # Media type
            schema:            # Request payload
              type: object
              properties:      # Request parts
                site:          # Text Part (string value)
                  type: string
                  description: the project/site id
                  example: mysite
                path:
                  type: string
                  description: the folder in your site where you want to upload your file
                  example: /static-assets
                file:          # File Part (string value)
                  type: string
                  description: the file to be uploaded
                  format: binary
              required:
                - site
                - path
                - file
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                example:
                  result: null
        '400':
          $ref: '#/components/responses/api1BadRequest'
        '401':
          $ref: '#/components/responses/api1Unauthorized'
        '404':
          $ref: '#/components/responses/api1NotFound'
        '500':
          $ref: '#/components/responses/api1InternalServerError'

  /api/1/services/api/1/server/get-available-languages.json:
    get:
      tags:
        - server
      summary: Get available languages.
      description: "Required role: N/A"
      operationId: getAvailableLanguages
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AvailableLanguage'
                example:
                  - id: en
                    label: English
                  - id: es
                    label: Español
                  - id: kr
                    label: 한국어

  /api/1/services/api/1/box/token.json:
    get:
      tags:
        - box
      summary: Get Box token.
      description: "Required role: N/A"
      operationId: getBoxToken
      parameters:
        - name: site
          in: query
          description: Project/Site ID to use
          required: true
          schema:
            type: string
        - name: profileId
          in: query
          description: Box profile ID to use
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '400':
          $ref: '#/components/responses/api1BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/search/search:
    post:
      tags:
        - search
      summary: Performs a search for the given site
      operationId: search
      parameters:
        - name: siteId
          in: query
          description: The site ID
          required: true
          schema:
            type: string
      requestBody:
        description: Search Parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchParams'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  result:
                    $ref: '#/components/schemas/SearchResult'

  /api/2/audit:
    get:
      tags:
        - audit
      summary: Get audit log
      description: 'Required permission "AUDIT_LOG"'
      operationId: getAuditLog
      parameters:
        - name: siteId
          in: query
          description: Site ID (site identifier) - optional for super admin user, otherwise required
          required: false
          schema:
            type: string
        - name: offset
          in: query
          description: Offset of first record in the response
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Number of records to return
          required: false
          schema:
            type: integer
            format: int32
        - name: user
          in: query
          description: Filter log by user name
          required: false
          schema:
            type: string
        - name: operations
          in: query
          description: Filter log by operations
          required: false
          schema:
            type: array
            items:
              type: string
        - name: includeParameters
          in: query
          description: Include parameters into result set if `true`. Default `false`
          required: false
          schema:
            type: boolean
        - name: dateFrom
          in: query
          description: Lower boundary in date range query
          required: false
          schema:
            type: string
        - name: dateTo
          in: query
          description: Upper boundary in date range query
          required: false
          schema:
            type: string
        - name: target
          in: query
          description: Regular expression to filter target values
          required: false
          schema:
            type: string
        - name: origin
          in: query
          description: Origin filter for audit log. Possible values `API` and `GIT`
          required: false
          schema:
            type: string
        - name: clusterNodeId
          in: query
          description: Cluster node id filter for audit log
          required: false
          schema:
            type: string
        - name: sort
          in: query
          description: Sort result set by specified field. Possible values `date`.
          required: false
          schema:
            type: string
        - name: order
          in: query
          description: Order in sorted result. Possible values `ASC` and `DESC`
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  auditLog:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuditLog'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/audit/{id}:
    get:
      tags:
        - audit
      summary: Get audit log entry
      operationId: getAuditLogById
      parameters:
        - name: id
          in: path
          description: The log entry ID
          required: true
          schema:
            type: integer
            format: int64
        - name: siteId
          in: query
          description: Site ID (site identifier) - optional for super admin user, otherwise required
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  auditLog:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuditLog'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/monitoring/version:
    get:
      tags:
        - monitoring
      summary: Get the current version information
      operationId: getVersion
      parameters:
        - name: token
          in: query
          description: Management token - not required for authenticated users
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  version:
                    $ref: '#/components/schemas/VersionItem'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/monitoring/status:
    get:
      tags:
        - monitoring
      summary: Get the current status information
      operationId: getStatus
      parameters:
        - name: token
          in: query
          description: Management token - not required for authenticated users
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  status:
                    $ref: '#/components/schemas/StatusItem'
        '202':
          description: Replica responding status OK. Primary will respond with status 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  status:
                    $ref: '#/components/schemas/ClusterStatusItem'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/monitoring/memory:
    get:
      tags:
        - monitoring
      summary: Get the current memory information
      operationId: getMemory
      parameters:
        - name: token
          in: query
          description: Management token - not required for authenticated users
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  memory:
                    $ref: '#/components/schemas/MemoryItem'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/monitoring/log:
    get:
      tags:
        - monitoring
      summary: Get the log events for a specific time period
      operationId: getLogEvents
      parameters:
        - name: since
          in: query
          description: The time in milliseconds from which events should be fetched
          required: true
          schema:
            type: integer
            format: int64
        - name: token
          in: query
          description: Management token - not required for authenticated users
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/LogEvent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/repository/add_remote:
    post:
      tags:
        - repository
      summary: Add remote repository to the site content repository
      description: 'Required permission "add_remote"'
      operationId: addRemoteRepository
      requestBody:
        description: Remote repository entity
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoteRepository'
      responses:
        '201':
          description: Added
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/repository/pull_from_remote:
    post:
      tags:
        - repository
      summary: Pull content from remote repository to site content repository
      description: 'Required permission "pull_from_remote"'
      operationId: pullFromRemoteRepository
      requestBody:
        description: pull from remote repository request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: Site ID
                remoteName:
                  type: string
                  description: Remote repository name to pull from
                remoteBranch:
                  type: string
                  description: Remote repository branch to pull from
                mergeStrategy:
                  type: string
                  format: theirs, ours, none
                  description: Merge strategy to use when pulling content from remote repository
              required:
                - siteId
                - remoteName
                - remoteBranch
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  result:
                    type: object
                    properties:
                      successful:
                        type: boolean
                        description: Indicates if the pull was successful
                      commitsMerged:
                        type: integer
                        format: int64
                        description: Total number of commits merged from the remote repository
                      mergeCommitId:
                        type: string
                        description: The merge commit id
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/repository/push_to_remote:
    post:
      tags:
        - repository
      summary: Push content to remote repository from site content repository
      description: 'Required permission "push_to_remote"'
      operationId: pushToRemoteRepository
      requestBody:
        description: push to remote repository request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: Site ID
                remoteName:
                  type: string
                  description: Remote repository name to push to
                remoteBranch:
                  type: string
                  description: Remote repository branch to push to
                force:
                  type: boolean
                  description: Indicates whether to force push to remote or not
              required:
                - siteId
                - remoteName
                - remoteBranch
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/repository/remove_remote:
    post:
      tags:
        - repository
      summary: Remove remote repository from site content repository
      description: 'Required permission "remove_remote"'
      operationId: removeRemoteRepository
      requestBody:
        description: remove remote repository request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: Site ID
                remoteName:
                  type: string
                  description: Remote repository name of remote to be removed
              required:
                - siteId
                - remoteName
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/repository/list_remotes:
    get:
      tags:
        - repository
      summary: List remote repositories for a site
      description: 'Required permission "list_remote"'
      operationId: listRemoteRepositories
      parameters:
        - name: siteId
          in: query
          description: Site ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  remotes:
                    type: array
                    items:
                      $ref: '#/components/schemas/RemoteRepositoryInfo'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/repository/status:
    get:
      tags:
        - repository
      summary: Get status of repository for a site
      description: 'Required permission "site_status"'
      operationId: repositoryStatus
      parameters:
        - name: siteId
          in: query
          description: Site ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  repositoryStatus:
                    $ref: '#/components/schemas/RepositoryStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/repository/resolve_conflict:
    post:
      tags:
        - repository
      summary: Resolve a conflict for a file by accepting ours or theirs
      description: 'Required permission "resolve_conflict"'
      operationId: resolveConflict
      requestBody:
        description: resolve conflict request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: site ID
                path:
                  type: string
                  description: Conflicted file path
                resolution:
                  type: string
                  description: resolution mechanism to use (ours, theirs)
              required:
                - siteId
                - path
                - resolution
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  repositoryStatus:
                    $ref: '#/components/schemas/RepositoryStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/repository/diff_conflicted_file:
    get:
      tags:
        - repository
      summary: Get the difference between ours and theirs for a conflicted file for a site
      description: 'Required permission "site_diff_conflicted_file"'
      operationId: diffConflictedFile
      parameters:
        - name: siteId
          in: query
          description: Site ID
          required: true
          schema:
            type: string
        - name: path
          in: query
          description: Path of conflicted file
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  diff:
                    type: object
                    properties:
                      diff:
                        type: string
                        description: difference between ours and theirs
                      studioVersion:
                        type: string
                        description: studio's version of the file content
                      remoteVersion:
                        type: string
                        description: remote repository version of the file content

        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/repository/commit_resolution:
    post:
      tags:
        - repository
      summary: Commit a resolved set of conflicts for a site
      description: 'Required permission "commit_resolution"'
      operationId: commitResolution
      requestBody:
        description: Commit resolution request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: site ID
                commitMessage:
                  type: string
                  description: Commit message
              required:
                - siteId
                - commitMessage
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  repositoryStatus:
                    $ref: '#/components/schemas/RepositoryStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/repository/cancel_failed_pull:
    post:
      tags:
        - repository
      summary: Cancel a failed/conflicted pull for a site
      description: 'Required permission "cancel_failed_pull"'
      operationId: cancelFailedPull
      requestBody:
        description: cancel failed pull request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: site ID
              required:
                - siteId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  repositoryStatus:
                    $ref: '#/components/schemas/RepositoryStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/repository/unlock:
    post:
      tags:
        - repository
      summary: Unlock local git repository
      description: 'Required role "system_admin" for global, "admin" for site sandbox or published'
      operationId: unlockRepository
      requestBody:
        description: Unlock local git repository request
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: site ID, do not send if unlocking the GLOBAL repository
                repositoryType:
                  type: string
                  format: GLOBAL, SANDBOX or PUBLISHED
              required:
                - repositoryType
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  repositoryStatus:
                    $ref: '#/components/schemas/RepositoryStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/repository/corrupted:
    get:
      tags:
        - repository
      summary: Check if a given repository is corrupted
      description: 'Required role "system_admin" for global, "admin" for site sandbox or published'
      operationId: isRepositoryCorrupted
      parameters:
        - name: siteId
          in: query
          schema:
            type: string
          description: site ID, do not send if checking the GLOBAL repository
        - name: repositoryType
          required: true
          in: query
          schema:
            type: string
            format: GLOBAL, SANDBOX or PUBLISHED
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  corrupted:
                    type: boolean
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/repository/repair:
    post:
      tags:
        - repository
      summary: Repair local git repository
      description: 'Required role "system_admin" for global, "admin" for site sandbox or published'
      operationId: repairCorruptedRepository
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: site ID, do not send if repairing the GLOBAL repository
                repositoryType:
                  type: string
                  format: GLOBAL, SANDBOX or PUBLISHED
              required:
                - repositoryType
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/repository/log:
    get:
      tags:
        - repository
      summary: Get the git log for a site repository. The result will be equivalent to `git log --first-parent` command.
      description: 'Required permission "read_git_log"'
      operationId: getRepositoryLog
      parameters:
        - name: siteId
          in: query
          description: Site ID
          required: true
          schema:
            type: string
        - name: start
          in: query
          description: commit id to start from
          required: false
          schema:
            type: string
            default: HEAD
        - name: limit
          in: query
          description: Number of records to return
          required: false
          schema:
              type: integer
              format: int32
              default: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                    response:
                        $ref: '#/components/schemas/ApiResponse'
                allOf:
                  - $ref: '#/components/schemas/GitLog'

  /api/2/model/{siteId}/definitions:
    post:
      tags:
        - model
      summary: Get all model definitions for site.
      description: 'Required permission "read_configuration". <br/>In a future release this request will accept a set of arguments which could surpass the max length of the GET request, consequently, this endpoint answers to a POST method..'
      operationId: getAllModelDefinitions
      parameters:
        - name: siteId
          in: path
          description: Site ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  types:
                    type: array
                    items:
                      type: string
                    example:
                      - "<form><title>Home</title>..."
                      - "<form><title>Article</title>..."
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/configuration/get_configuration:
    get:
      tags:
        - configuration
      summary: Get configuration content for site and configuration location
      description: 'Required permission "read_configuration"'
      operationId: getConfiguration
      parameters:
        - name: siteId
          in: query
          description: Site ID
          required: true
          schema:
            type: string
        - name: module
          in: query
          description: Module name (e.g. studio, engine)
          required: true
          schema:
            type: string
        - name: path
          in: query
          description: Configuration file path, relative to /config/<module>
          required: true
          schema:
            type: string
        - name: environment
          in: query
          description: environment to use
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  content:
                    type: string
                    description: configuration file content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/configuration/write_configuration:
    post:
      tags:
        - configuration
      summary: Write configuration content for site
      description: 'Required permission "write_configuration"'
      operationId: writeConfiguration
      requestBody:
        description: write configuration request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: site ID
                module:
                  type: string
                  description: Module name (e.g. studio, engine)
                path:
                  type: string
                  description: Configuration file path, relative to /config/<module>
                environment:
                  type: string
                  description: environment to use
                content:
                  type: string
                  description: configuration file content
              required:
                - siteId
                - module
                - path
                - content
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/configuration/clear_cache:
    get:
      tags:
        - configuration
      summary: Clear all configuration cache for a given site
      description: 'Required Permission: "write_configuration"'
      operationId: clearConfigurationCache
      parameters:
        - name: siteId
          in: query
          description: Site ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/configuration/get_configuration_history:
    get:
      tags:
        - configuration
      summary: Get configuration history for site and configuration location
      description: 'Required permission "read_configuration"'
      operationId: getConfigurationHistory
      parameters:
        - name: siteId
          in: query
          description: Site ID
          required: true
          schema:
            type: string
        - name: module
          in: query
          description: Module name (e.g. studio, engine)
          required: true
          schema:
            type: string
        - name: path
          in: query
          description: Configuration file path, relative to /config/<module>
          required: true
          schema:
            type: string
        - name: environment
          in: query
          description: environment to use
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  history:
                    $ref: '#/components/schemas/History'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # /configuration/translation:
  #   get:
  #     tags:
  #       - configuration
  #     summary: Get translation configuration for a given site
  #     description: 'Required permission "read_configuration"'
  #     operationId: getTranslationConfig
  #     parameters:
  #       - name: siteId
  #         in: query
  #         description: site ID
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       '200':
  #         description: OK
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 response:
  #                   $ref: '#/components/schemas/ApiResponse'
  #                 config:
  #                   $ref: '#/components/schemas/TranslationConfig'
  #       '400':
  #         $ref: '#/components/responses/BadRequest'
  #       '401':
  #         $ref: '#/components/responses/Unauthorized'
  #       '403':
  #         $ref: '#/components/responses/Forbidden'

  /api/2/configuration/content-type/usage:
    get:
      tags:
        - configuration
      summary: Get all usage of a given content-type
      description: 'Required permission "content_read"'
      operationId: getContentTypeUsage
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: contentType
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  dependencies:
                    type: object
                    properties:
                      templates:
                        type: array
                        items:
                          type: string
                        description: All templates associated with the given content-type
                      scripts:
                        type: array
                        items:
                          type: string
                        description: All scripts associated with the given content-type
                      content:
                        type: array
                        items:
                          type: string
                        description: All content types instantiated from the given content-type
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /api/2/configuration/content-type/preview_image:
    get:
      tags:
        - configuration
      summary: Get preview image of a given content type
      description: 'Required permission "content_read"'
      operationId: getContentTypePreviewImage
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: contentTypeId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'OK'
          content:
            '*/*':
              schema:
                type: string
                format: binary
                description: The content of the preview image file
          headers:
            Content-Type:
              description: The MIME type of the preview image file
              schema:
                type: string
            Content-Length:
              description: The size in bytes of the preview image file
              schema:
                type: integer
                format: int64
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/configuration/content-type/delete:
    post:
      tags:
        - configuration
      summary: Delete files related to a given content-type
      description: 'Required permission "write_configuration"'
      operationId: deleteContentType
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: The id of the site
                contentType:
                  type: string
                  description: The content-type to delete
                deleteDependencies:
                  type: boolean
                  description: Indicates if all dependencies of the content-type should be deleted (defaults to false)
              required:
                - siteId
                - contentType
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'


  /api/2/plugin/file:
    # Override the server to change the prefix
    servers:
      - url: http://localhost:8080/studio/1
    get:
      # Override the security because this requires login instead of JWT or Http Basic
      security: []
      tags:
        - plugin
      summary: Get a file for a given plugin
      operationId: getPluginFile
      parameters:
        - name: siteId
          in: query
          description: The site ID
          required: true
          schema:
            type: string
        - name: type
          in: query
          description: The plugin type (e.g. control, data-source)
          required: true
          schema:
            type: string
        - name: name
          in: query
          description: The plugin name (e.g. custom-input)
          required: true
          schema:
            type: string
        - name: filename
          in: query
          description: The name of the file (e.g. input.js, style/main.css)
          required: true
          schema:
            type: string
        - name: pluginId
          in: query
          description: |-
            The id of the plugin (e.g. org.craftercms.plugin). This is only needed for plugins installed from the
            marketplace
          schema:
            type: string
      responses:
        '200':
          description: 'OK'
          content:
            '*/*':
              schema:
                type: string
                format: binary
                description: The content of the file
          headers:
            Content-Type:
              description: The MIME type of the file
              schema:
                type: string
            Content-Length:
              description: The size in bytes of the file
              schema:
                type: integer
                format: int64
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/plugin/get_configuration:
    get:
      tags:
        - plugin
      summary: Get configuration for the given site and plugin
      description: 'Required permission "site member"'
      operationId: getPluginConfiguration
      parameters:
        - name: siteId
          in: query
          description: The id of the site
          required: true
          schema:
            type: string
        - name: pluginId
          in: query
          description: The id of the plugin
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  content:
                    type: string
                    description: configuration file content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/plugin/write_configuration:
    post:
      tags:
        - plugin
      summary: Write configuration content a given site and plugin
      description: 'Required permission "write_configuration" and "site member"'
      operationId: writePluginConfiguration
      requestBody:
        description: write configuration request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: The id of the site
                pluginId:
                  type: string
                  description: The id of the plugin
                content:
                  type: string
                  description: configuration file content
              required:
                - siteId
                - pluginId
                - content
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/plugin/script/reload:
    get:
      tags:
        - plugin
      summary: Reloads groovy classes for all plugins in a given site
      operationId: reloadClasses
      parameters:
        - name: siteId
          in: query
          description: Site ID
          required: true
          schema:
            type: string
        - name: token
          in: query
          description: Management token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/content/list_quick_create_content:
    get:
      tags:
        - content
      summary: Get list of content types available for Quick Create functionality
      description: 'Required permission "create content"'
      operationId: quickCreateContent
      parameters:
        - name: siteId
          in: query
          description: Site ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/QuickCreateItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/content/get_delete_package:
    post:
      tags:
        - content
      summary: Get a list of delete children (will be deleted) and dependent items (will have broken references) for a given list of items to be deleted
      description: 'Required permission "delete_content"'
      operationId: getDeletePackage
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  description: Site ID
                  type: string
                paths:
                  description: Content paths to get a delete package for
                  type: array
                  items:
                    type: string
              required:
                - siteId
                - paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  items:
                    type: object
                    properties:
                      childItems:
                        type: array
                        items:
                          type: string
                      dependentItems:
                        type: array
                        items:
                          type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/content/delete:
    post:
      tags:
        - content
      summary: Delete content
      description: 'Required permission "content_delete"'
      operationId: contentDelete
      requestBody:
        description: parameters for delete content
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: site identifier
                items:
                  type: array
                  description: path(s) of content item(s)
                  items:
                    type: string
                optionalDependencies:
                  type: array
                  description: optional (soft) dependencies
                  items:
                    type: string
                comment:
                  type: string
                  description: deletion comment by the user performing the delete
              required:
                - siteId
                - items
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/content/rename:
    post:
      tags:
        - content
      summary: Rename content
      description: 'Required permission "content_write"'
      operationId: contentRename
      requestBody:
        description: parameters for rename content
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: site identifier
                path:
                  type: string
                  description: full path to the item to rename
                name:
                  type: string
                  description: new item name (just the name, no path)
              required:
                - siteId
                - path
                - name
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/content/children_by_path:
    post:
      deprecated: true
      tags:
        - content
      summary: Get list of children for given item path
      description: 'Required permission "get_children" and "site member".<br/> This operation is deprecated, use /content/{siteId}/children instead.'
      operationId: getChildrenByPath
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  description: Site ID
                  type: string
                path:
                  description: item path to get children for
                  type: string
                localeCode:
                  description: |-
                    filter children by locale code, or show source items (not translation) if translation to
                    specified locale code does not exist
                  type: string
                sortStrategy:
                  description: >-
                    sort strategy (sort order)
                    Possible values:
                      - alphabetical (default)
                      - foldersFirst (order by: folders alphabetical, files alphabetical)
                      - lastUpdated (order by: dateModified)
                  type: string
                order:
                  description: order for sort strategy ascending or descending (ASC / DESC)
                  type: string
                  format: ASC, DESC
                offset:
                  description: offset of first child in response - default 0
                  type: integer
                limit:
                  description: number of children to return
                  type: integer
                keyword:
                  description: filter children by keyword
                  type: string
                systemTypes:
                  description: filter children by system type
                  type: array
                  items:
                    type: string
                excludes:
                  description: exclude items by path
                  type: array
                  items:
                    type: string
              required:
                - siteId
                - path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  levelDescriptor:
                    $ref: '#/components/schemas/SandboxItem'
                  children:
                    type: array
                    items:
                      $ref: '#/components/schemas/SandboxItem'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/content/{siteId}/children:
    post:
      tags:
        - content
      summary: Get list of children for given item paths
      description: 'Required permission "get_children" and "site member"'
      operationId: getChildrenByPaths
      parameters:
        - name: siteId
          in: path
          description: Site ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                paths:
                  description: item paths to get children for
                  type: array
                  items:
                    $ref: '#/components/schemas/ChildrenByPathRequest'
              required:
                - paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        path:
                          type: string
                        item:
                          $ref: '#/components/schemas/SandboxItem'
                        levelDescriptor:
                          $ref: '#/components/schemas/SandboxItem'
                        children:
                          type: array
                          items:
                            $ref: '#/components/schemas/SandboxItem'
                        total:
                          type: integer
                          format: int32
                          description: Total records in the system
                        offset:
                          type: integer
                          format: int32
                          description: Offset of first record in this response
                        limit:
                          type: integer
                          format: int32
                          description: Number of records returned in this response
                  missingItems:
                    type: array
                    items:
                      type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/content/exists:
    get:
      tags:
        - content
      summary: Check the existent of a content path
      description: 'Required permission "content_read"'
      operationId: contentExists
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: path
          in: query
          description: item path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  exists:
                    type: boolean
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/content/item_by_path:
    get:
      tags:
        - content
      summary: Get item details for given an item path
      description: 'Required permission "get_children"'
      operationId: getDetailedItemByPath
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: path
          in: query
          description: item path
          required: true
          schema:
            type: string
        - name: preferContent
          in: query
          description: when set to true, return an item instead of a folder if the path can match either
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  item:
                    $ref: '#/components/schemas/DetailedItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/content/sandbox_items_by_path:
    post:
      tags:
        - content
      summary: Get list of items for given item paths
      description: 'Required permission "get_children" and "site member"'
      operationId: getSandboxItemsByPath
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  description: Site ID
                  type: string
                paths:
                  description: item paths to get
                  type: array
                  items:
                    type: string
                preferContent:
                  description: when set to true, return an item instead of a folder if the path can match either
                  type: boolean
              required:
                - siteId
                - paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/SandboxItem'
                  missingItems:
                    type: array
                    items:
                      type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/content/descriptor:
    get:
      tags:
        - content
      summary: Get the XML descriptor for a given path
      operationId: getDescriptor
      parameters:
        - name: siteId
          in: query
          description: The site ID
          required: true
          schema:
            type: string
        - name: path
          in: query
          description: The path of the descriptor
          required: true
          schema:
            type: string
        - name: flatten
          in: query
          description: Indicates if included descriptors should be flattened
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  xml:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/content/paste:
    post:
      tags:
        - content
      summary: |-
        Paste a tree of items to a target path (copy content or move content).
        To be used by the UI in the clipboard implementation.
      description: 'Required permission "Write"'
      operationId: pasteItems
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasteRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  items:
                    description: The list of pasted items
                    type: array
                    items:
                      type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/content/duplicate:
    post:
      tags:
        - content
      summary: Duplicate the given item in the same location
      description: 'Required permission "Write"'
      operationId: duplicateItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: The id of the site
                path:
                  type: string
                  description: The path of the item to duplicate
              required:
                - siteId
                - path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  item:
                    description: the path of the new item
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/content/item_lock_by_path:
    post:
      tags:
        - content
      summary: Lock item by path
      description: 'Required permission "content_write"'
      operationId: itemLockByPath
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: The id of the site
                path:
                  type: string
                  description: Path of item to lock
              required:
                - siteId
                - path
      responses:
        '200':
          description: OK

        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Item already locked
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  person:
                    $ref: '#/components/schemas/Person'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/content/item_unlock_by_path:
    post:
      tags:
        - content
      summary: Unlock item by path
      description: 'Required permission "item_unlock" or lock owner'
      operationId: itemUnlockByPath
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: The id of the site
                path:
                  type: string
                  description: The path of the item to unlock
              required:
                - siteId
                - path
      responses:
        '200':
          description: OK

        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Item already unlocked
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/content/get_content_by_commit_id:
    get:
      tags:
        - content
      summary: Get content for commit id
      description: 'Required permission "content_read"'
      operationId: getContentByCommitId
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: path
          in: query
          description: path of the content
          required: true
          schema:
            type: string
        - name: commitId
          in: query
          description: commit id of the content version
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  content:
                    type: string
                    description: requested content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/content/item_history:
    get:
      tags:
        - content
      summary: Get history for a content item
      description: 'Required permission "content_read"'
      operationId: getItemHistory
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: path
          in: query
          description: path of the content
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  history:
                    type: array
                    items:
                      $ref: '#/components/schemas/ItemVersion'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/dependency/dependencies:
    post:
      tags:
        - dependency
      summary: Get list of dependencies for given content paths
      description: 'Required permission "content_read"'
      operationId: getDependencies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  description: Site ID
                  type: string
                paths:
                  description: Content paths to get dependencies for
                  type: array
                  items:
                    type: string
              required:
                - siteId
                - paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  items:
                    type: object
                    properties:
                      hardDependencies:
                        type: array
                        items:
                          type: string
                      softDependencies:
                        type: array
                        items:
                          type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/dependency/dependent_items:
    get:
      tags:
        - dependent_items
      summary: Get list of dependent items for given content path
      description: 'Required permission "content_read"'
      operationId: getDependentItems
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  description: Site ID
                  type: string
                path:
                  description: Content path to get dependencies for
                  type: string
              required:
                - siteId
                - path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  items:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/DependencyItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/marketplace/search:
    get:
      tags:
        - marketplace
      summary: Search for compatible plugins in the marketplace
      operationId: searchPlugins
      parameters:
        - name: type
          in: query
          description: Plugin type to search (e.g. blueprint, control, datasource)
          schema:
            type: string
        - name: keywords
          in: query
          description: The keywords to filter plugins
          schema:
            type: string
        - name: showPending
          description: Include plugins pending of approval (default to false)
          in: query
          required: false
          schema:
            type: boolean
        - name: offset
          in: query
          description: Offset for pagination
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: Limit for pagination
          schema:
            type: integer
            format: int64
        - name: showIncompatible
          in: query
          description: Include incompatible plugins (defaults to false)
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  items:
                    type: array
                    items:
                      anyOf:
                        - $ref: '#/components/schemas/MarketplacePlugin'
                        - $ref: '#/components/schemas/GitMarketplacePlugin'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/marketplace/installed:
    get:
      tags:
        - marketplace
      summary: Get the list of marketplace plugins installed in the given site
      description: 'Required permission "list_plugins"'
      operationId: getInstalledPlugins
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  plugins:
                    type: array
                    items:
                      $ref: '#/components/schemas/PluginRecord'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/marketplace/install:
    post:
      tags:
        - marketplace
      summary: Install a marketplace plugin in the given site
      description: 'Required permission "install_plugins"'
      operationId: installPlugin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  description: The id of the site
                  type: string
                pluginId:
                  description: The id of the plugin
                  type: string
                pluginVersion:
                  $ref: '#/components/schemas/Version'
                parameters:
                  type: object
                  description: Object containing all parameters for the plugin. It should include all required parameters from the descriptor
                  additionalProperties:
                    type: string
              required:
                - siteId
                - pluginId
                - pluginVersion
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/marketplace/copy:
    post:
      tags:
        - marketplace
      summary: Copy a local plugin to a given site
      description: 'Required permission "install_plugins"'
      operationId: copyPlugin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  description: The id of the site
                  type: string
                path:
                  description: The path of the local plugin source folder
                  type: string
                parameters:
                  type: object
                  description: Object containing all parameters for the plugin. It should include all required parameters from the descriptor
                  additionalProperties:
                    type: string
              required:
                - siteId
                - path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/marketplace/remove:
    post:
      tags:
        - marketplace
      summary: Remove a marketplace plugin from the given site
      description: 'Required permission "remove_plugins"'
      operationId: removePlugin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  description: The id of the site
                  type: string
                pluginId:
                  description: The id of the plugin
                  type: string
                force:
                  description: Indicates if the plugin should be removed even if there are dependant items
              required:
                - siteId
                - pluginId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/marketplace/usage:
    get:
      tags:
        - marketplace
      summary: List dependant items for a plugin
      description: 'Required permission "remove_plugins"'
      operationId: pluginUsage
      parameters:
        - name: siteId
          description: The id of the site
          schema:
            type: string
          required: true
          in: query
        - name: pluginId
          description: The id of the plugin
          schema:
            type: string
          required: true
          in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  items:
                    type: array
                    items:
                      type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/publish/dependencies:
    post:
      tags:
        - publishing
      summary: Calculate the dependencies of a publishing item set
      description: 'Required permission "content_read"'
      operationId: calculatePublishDependencies
      requestBody:
        description: publish request body
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/PublishPackageRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  package:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          type: string
                          description: the item path
                          example: "/site/website/article1/index.xml"
                      deletedItems:
                        type: array
                        items:
                          type: string
                          description: the deleted item path
                          example: "/site/website/about/index.xml"
                      hardDependencies:
                          type: array
                          items:
                              type: string
                              example: "/templates/web/article.ftl"
                      softDependencies:
                          type: array
                          items:
                              type: string
                              example: "/static-assets/images/background.png"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/publish:
    post:
      tags:
        - publishing
      summary: Publishes the given content to the target (staging or live)
      description: 'Required permission "publish" when requestApproval is false, "content_read" when requestApproval is true. <br />'
      operationId: publish
      requestBody:
        description: publish request body
        required: true
        content:
          application/json:
            schema:
              type: object
              allOf:
                - $ref: '#/components/schemas/PublishPackageRequest'
              properties:
                schedule:
                  type: string
                  format: date-time
                  description: schedule the publish
                requestApproval:
                  type: boolean
                  description: submit the request for approval
                publishAll:
                  type: boolean
                  description: publish all site content
                  default: false
                comment:
                    type: string
                    description: optional comment
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  package:
                    type: object
                    properties:
                      packageId:
                        type: string
                        description: the package id
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/publish/all:
    post:
      deprecated: true
      tags:
        - publishing
      summary: Publishes the entire project to the target (staging or live)
      description: 'Required permission "Publish". <br /> This operation is deprecated, use /api/2/publish instead.'
      operationId: publishAll
      requestBody:
        description: publish all request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: site ID
                publishingTarget:
                  type: string
                  description: the publishing target (staging or live)
                submissionComment:
                  type: string
                  description: optional submission comment
              required:
                - siteId
                - publishingTarget
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/publish/packages:
    get:
      tags:
        - publishing
      summary: Get the list of packages in the publishing queue
      description: 'Required permission "get_publishing_queue"'
      operationId: PublishingPackages
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: publishingTarget
          in: query
          description: filter by publishing target
          required: false
          schema:
            type: string
        - name: path
          in: query
          description: regular expression to filter by path
          required: false
          schema:
            type: string
        - name: states
          in: query
          description: filter by package state(s)
          required: false
          schema:
            type: array
            items:
              type: string
        - name: submitter
          in: query
          description: filter by package submitter
          schema:
            type: string
        - name: offset
          in: query
          description: Offset for pagination
          required: false
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: Limit for pagination
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  packages:
                    type: array
                    items:
                      $ref: '#/components/schemas/PublishingPackage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/publish/package:
    get:
      tags:
        - publishing
      summary: Get package details
      description: 'Required permission "get_publishing_queue"'
      operationId: getPublishingPackageDetails
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: packageId
          in: query
          description: package ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  package:
                    $ref: '#/components/schemas/PublishingPackageDetails'
                  progress:
                    $ref: '#/components/schemas/PublishingProgress'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'


  /api/2/publish/package/{packageId}/status:
    get:
      tags:
        - publishing
      summary: Get package status without the actual items list
      description: 'Required permission "get_publishing_queue"'
      operationId: getPublishingPackageStatus
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: packageId
          in: path
          description: package ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  package:
                    $ref: '#/components/schemas/PublishingPackageStatus'
                  progress:
                    $ref: '#/components/schemas/PublishingProgress'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/publish/trigger:
    post:
      tags:
        - publishing
      summary: Signal the publisher to pick the next package in the queue, if any.
      description: 'Required permission "request_publish, publish"'
      operationId: triggerPublisher
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/publish/package/{packageId}/clone:
    post:
      tags:
        - publishing
      summary: Clone an existing publishing package
      description: 'Required permission "request_publish, publish"'
      operationId: clonePublishingPackage
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: packageId
          in: path
          description: the ID of the existing package
          required: true
          schema:
            type: string
            example: "12345"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                schedule:
                  type: string
                  format: date-time
                  description: schedule the publish
                requestApproval:
                  type: boolean
                  description: submit the request for approval
                comment:
                  type: string
                  description: optional comment
                publishingTarget:
                  type: string
                  description: the publishing target (staging or live)
                  example: staging
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  package:
                    type: object
                    properties:
                      packageId:
                        type: string
                        description: the package id
                        example: "12346"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/publish/cancel:
    post:
      tags:
        - publishing
      summary: Cancel publishing packages
      description: 'Required permission "cancel_publish"'
      operationId: cancelPublishingPackages
      requestBody:
        description: cancel publishing packages request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: site ID
                packageIds:
                  type: array
                  description: packageIds
                  items:
                    type: string
              required:
                - siteId
                - packageIds
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/publish/status:
    get:
      tags:
        - publishing
      summary: Get publishing status for site
      description: 'Required permission "publish_status"'
      operationId: getPublishingStatus
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  publishingStatus:
                    $ref: '#/components/schemas/PublishingStatus'
                  progress:
                    $ref: '#/components/schemas/PublishingProgress'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/publish/history:
    get:
      tags:
        - publishing
      summary: Get publishing history for site
      description: 'Required permission "publish"'
      operationId: getPublishingHistory
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: days
          in: query
          description: number of days to display history for
          required: true
          schema:
            type: integer
            format: int32
        - name: num
          in: query
          description: number of items to fetch
          required: true
          schema:
            type: integer
            format: int32
        - name: filterType
          in: query
          description: filter items by type (all, page, component, asset)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  publishingStatus:
                    $ref: '#/components/schemas/DeploymentHistoryGroup'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/publish/available_targets:
    get:
      tags:
        - publishing
      summary: Get available publishing targets for site
      description: 'Required permission "publish"'
      operationId: getAvailablePublishingTargets
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  publishingTargets:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          description: Target name
                        order:
                          type: integer
                          format: int32
                          description: order for display in the dropdown
                  published:
                    type: boolean
                    description: true if site has been published at least once (initial publish; published repository exist), otherwise false
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/publish/has_initial_publish:
    get:
      tags:
        - publishing
      summary: Check if site has initial publish
      description: 'Required permission "content_read"'
      operationId: hasInitialPublish
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  hasInitialPublish:
                    type: boolean
                    description: true if site has been published at least once (initial publish; published repository exist), otherwise false
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/security/encrypt:
    post:
      tags:
        - security
      summary: Encrypt a text value
      operationId: encrypt
      description: Required permission "encryption_tool"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
              required:
                - text
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  item:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/security/tokens:
    get:
      tags:
        - security
      summary: Get all existing tokes for the current user
      operationId: getAccessTokens
      description: Required permission "manage_access_token"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  tokens:
                    type: array
                    items:
                      $ref: '#/components/schemas/AccessToken'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - security
      summary: Creates a new access token for the current user
      operationId: createAccessToken
      description: Required permission "manage_access_token"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                label:
                  type: string
                  description: The label for the access token
                expiresAt:
                  type: string
                  format: date-time
                  description: The date of expiration for the access token
              required:
                - label
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  token:
                    $ref: '#/components/schemas/AccessToken'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/security/tokens/{id}:
    post:
      tags:
        - security
      summary: Updates an access token for the current user
      operationId: updateAccessToken
      description: Required permission "manage_access_token"
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            format: int64
          description: The id of the access token to update
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enabled:
                  type: boolean
                  description: Indicates if the access token is enabled
              required:
                - enabled
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  token:
                    $ref: '#/components/schemas/AccessToken'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - security
      summary: Deletes an access token for the current user
      operationId: deleteAccessToken
      description: Required permission "manage_access_token"
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            format: int64
          description: The id of the access token to delete
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/security/preview/switch:
    post:
      tags:
        - security
      summary: Configures preview to use a different site. Site is expected to be set in `crafterSite` cookie
      operationId: switchPreviewSite
      description: Required permission "LOGGED_IN"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/dashboard/activity:
    get:
      tags:
        - dashboard
      summary: Get user activities
      description: 'Required permission "site_member"'
      operationId: getDashboardActivities
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: usernames
          in: query
          description: filter activities for given users only
          required: false
          schema:
            type: array
            items:
              type: string
        - name: actions
          in: query
          description: filter activities for given actions only
          required: false
          schema:
            type: array
            items:
              type: string
        - name: dateFrom
          in: query
          description: lower boundary to filter by date-time range
          required: false
          schema:
            type: string
            format: date-time
        - name: dateTo
          in: query
          description: upper boundary to filter by date-time range
          required: false
          schema:
            type: string
            format: date-time
        - name: offset
          in: query
          description: offset of the first result item, default 0
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: number of results to return, default 10
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  activities:
                    type: array
                    items:
                      $ref: '#/components/schemas/Activity'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/dashboard/activity/me:
    get:
      tags:
        - dashboard
      summary: Get current user's activities
      description: 'Required permission "site_member"'
      operationId: getDashboardMyActivities
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: actions
          in: query
          description: filter activities for given actions only
          required: false
          schema:
            type: array
            items:
              type: string
        - name: dateFrom
          in: query
          description: lower boundary to filter by date-time range
          required: false
          schema:
            type: string
            format: date-time
        - name: dateTo
          in: query
          description: upper boundary to filter by date-time range
          required: false
          schema:
            type: string
            format: date-time
        - name: offset
          in: query
          description: offset of the first result item, default 0
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: number of results to return, default 10
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  activities:
                    type: array
                    items:
                      $ref: '#/components/schemas/Activity'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/dashboard/content/pending_approval:
    get:
      tags:
        - dashboard
      summary: Get publishing packages that are pending for approval
      description: 'Required permission "site_member"'
      operationId: getDashboardContentPendingApproval
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: offset
          in: query
          description: offset of the first result item, default 0
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: number of results to return, default 10
          required: false
          schema:
            type: integer
        - name: sort
          schema:
            type: string
          in: query
          description: "The fields to use for sorting, plus the `asc` or `desc` keyword case-insensitive. Multiple fields are separated by commas. Example: `dateModified asc, label desc`. Supported fields: `id` `dateModified` `label`. Default `dateModified desc`"
        - name: itemType
          in: query
          description: "The system types to filter the results by. Multiple types are separated by commas. Example: `renderingTemplate, asset`.Supported values: `asset` `component` `content type` `document` `file` `folder` `levelDescriptor` `page` `renderingTemplate` `script` `taxonomy`"
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  publishingItems:
                    type: array
                    items:
                      $ref: '#/components/schemas/DetailedItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/dashboard/content/pending_approval/{id}:
    get:
      tags:
        - dashboard
      summary: Get content items of the package that is pending for approval
      description: 'Required permission "site_member"'
      operationId: getDashboardContentPendingApprovalDetail
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: package ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  publishingPackageItems:
                    type: array
                    items:
                      $ref: '#/components/schemas/SandboxItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/dashboard/content/unpublished:
    get:
      tags:
        - dashboard
      summary: Get unpublished items for site
      description: 'Required permission "content_read"'
      operationId: getDashboardContentUnpublished
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: offset
          in: query
          description: offset of the first result item, default 0
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: number of results to return, default 10
          required: false
          schema:
            type: integer
        - name: sort
          in: query
          description: "The fields to use for sorting, plus the `asc` or `desc` keyword case-insensitive. Multiple fields are separated by commas. Example: `dateModified asc, label desc`. Supported fields: `id` `dateModified` `label`. Default `dateModified desc`"
          schema:
            type: string
        - name: itemType
          in: query
          description: "The system types to filter the results by. Multiple types are separated by commas. Example: `renderingTemplate, asset`. Supported values: `asset` `component` `content type` `document` `file` `folder` `levelDescriptor` `page` `renderingTemplate` `script` `taxonomy`"
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  unpublishedItems:
                    type: array
                    items:
                      $ref: '#/components/schemas/SandboxItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/dashboard/publishing/scheduled:
    get:
      tags:
        - dashboard
      summary: Get scheduled publishing items
      description: 'Required permission "content_read"'
      operationId: getPublishingScheduled
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: publishingTarget
          in: query
          description: publishing target to filter results
          required: false
          schema:
            type: string
        - name: approver
          in: query
          description: approver user to filter results
          required: false
          schema:
            type: string
        - name: dateFrom
          in: query
          description: lower boundary to filter by date-time range
          required: false
          schema:
            type: string
            format: date-time
        - name: dateTo
          in: query
          description: upper boundary to filter by date-time range
          required: false
          schema:
            type: string
            format: date-time
        - name: offset
          in: query
          description: offset of the first result item, default 0
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: number of results to return, default 10
          required: false
          schema:
            type: integer
        - name: sort
          in: query
          description: "The fields to use for sorting, plus the `asc` or `desc` keyword case-insensitive. Multiple fields are separated by commas. Example: `dateScheduled asc, label desc`. Supported fields: `id` `dateScheduled` `label`. Default `dateScheduled desc`"
          schema:
            type: string
        - name: itemType
          in: query
          description: "The system types to filter the results by. Multiple types are separated by commas. Example: `renderingTemplate, asset`. Supported values: `asset` `component` `content type` `document` `file` `folder` `levelDescriptor` `page` `renderingTemplate` `script` `taxonomy`"
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  publishingItems:
                    type: array
                    items:
                      $ref: '#/components/schemas/DetailedItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/dashboard/publishing/scheduled/{id}:
    get:
      tags:
        - dashboard
      summary: Get content items of the package that is scheduled
      description: 'Required permission "content_read"'
      operationId: getDashboardPublishingScheduledDetail
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: package ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  publishingPackageItems:
                    type: array
                    items:
                      $ref: '#/components/schemas/SandboxItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/dashboard/publishing/history:
    get:
      tags:
        - dashboard
      summary: Get history of published packages
      description: 'Required permission "content_read"'
      operationId: getDashboardPublishingHistory
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: publishingTarget
          in: query
          description: publishing target to filter results
          required: false
          schema:
            type: string
        - name: approver
          in: query
          description: approver user to filter results
          required: false
          schema:
            type: string
        - name: dateFrom
          in: query
          description: lower boundary to filter by date-time range
          required: false
          schema:
            type: string
            format: date-time
        - name: dateTo
          in: query
          description: upper boundary to filter by date-time range
          required: false
          schema:
            type: string
            format: date-time
        - name: offset
          in: query
          description: offset of the first result item, default 0
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: number of results to return, default 10
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  publishingPackages:
                    type: array
                    items:
                      $ref: '#/components/schemas/DashboardPublishingPackage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/dashboard/publishing/history/{id}:
    get:
      tags:
        - dashboard
      summary: Get content items of the package that was published
      description: 'Required permission "content_read"'
      operationId: getDashboardPublishingHistoryDetail
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: package ID
          required: true
          schema:
            type: string
        - name: offset
          in: query
          description: offset of the first result item, default 0
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: number of results to return, default 10
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  publishingPackageItems:
                    type: array
                    items:
                      $ref: '#/components/schemas/SandboxItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/dashboard/publishing/stats:
    get:
      tags:
        - dashboard
      summary: Get publishing stats
      description: 'Required permission "content_read"'
      operationId: getDashboardPublishingStats
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: days
          in: query
          description: number of days to display stats for
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  publishingStats:
                    $ref: '#/components/schemas/PublishingStats'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/dashboard/content/expiring:
    get:
      tags:
        - dashboard
      summary: Get content that is expiring
      description: 'Required permission "site_member"'
      operationId: getDashboardContentExpiring
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: dateFrom
          in: query
          description: lower boundary to filter by date-time range
          required: true
          schema:
            type: string
            format: date-time
        - name: dateTo
          in: query
          description: upper boundary to filter by date-time range
          required: true
          schema:
            type: string
            format: date-time
        - name: offset
          in: query
          description: offset of the first result item, default 0
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: number of results to return, default 10
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        itemName:
                          type: string
                          description: internal name
                        itemPath:
                          type: string
                          description: content path
                        expireDateTime:
                          type: string
                          format: date-time
                          description: date and time when content expires
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/dashboard/content/expired:
    get:
      tags:
        - dashboard
      summary: Get content that expired
      description: 'Required permission "site_member"'
      operationId: getDashboardContentExpired
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: offset
          in: query
          description: offset of the first result item, default 0
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: number of results to return, default 10
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        itemName:
                          type: string
                          description: internal name
                        itemPath:
                          type: string
                          description: content path
                        expiredDateTime:
                          type: string
                          format: date-time
                          description: date and time when content expired
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

#  /translation/list:
#    get:
#      tags:
#        - translation
#      summary: Get items for translation
#      description: 'Required permission "get_items_for_translation"'
#      operationId: getItemsForTranslation
#      parameters:
#        - name: siteId
#          in: query
#          description: site ID
#          required: true
#          schema:
#            type: string
#        - name: path
#          in: query
#          description: filter results by path regexes
#          schema:
#            type: array
#            items:
#              type: string
#        - name: locale
#          in: query
#          description: filter results by locales
#          schema:
#            type: array
#            items:
#              type: string
#        - name: markedForTranslation
#          in: query
#          description: Include only items marked for translation and exclude everything else (default true)
#          schema:
#            type: boolean
#        - name: notTranslated
#          in: query
#          description: Include only items that have not been translated yet (default true)
#          schema:
#            type: boolean
#        - name: translationOutOfDate
#          in: query
#          description: Include items with translation out of date, otherwise exclude them (default true)
#          schema:
#            type: boolean
#        - name: offset
#          in: query
#          description: offset of the first result item, default 0
#          schema:
#            type: integer
#        - name: limit
#          in: query
#          description: number of results to return, default 10
#          schema:
#            type: integer
#      responses:
#        '200':
#          description: OK
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  response:
#                    $ref: '#/components/schemas/ApiResponse'
#                  total:
#                    type: integer
#                    format: int32
#                    description: Total records in the system
#                  offset:
#                    type: integer
#                    format: int32
#                    description: Offset of first record in this response
#                  limit:
#                    type: integer
#                    format: int32
#                    description: Number of records returned in this response
#                  items:
#                    type: array
#                    items:
#                      $ref: '#/components/schemas/LocalizationItem'
#        '400':
#          $ref: '#/components/responses/BadRequest'
#        '401':
#          $ref: '#/components/responses/Unauthorized'
#        '403':
#          $ref: '#/components/responses/Forbidden'
#        '404':
#          $ref: '#/components/responses/NotFound'
#        '500':
#          $ref: '#/components/responses/InternalServerError'
#
#  /translation/item_by_id:
#    post:
#      tags:
#        - translation
#      summary: Get translation item(s) detail
#      description: 'Required permission "get_translation_item_detail"'
#      operationId: getTranslationItemById
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              type: object
#              properties:
#                siteId:
#                  description: site ID
#                  type: string
#                id:
#                  description: Id(s) of item(s) to retrieve
#                  type: array
#                  items:
#                    type: string
#              required:
#                - siteId
#                - id
#      responses:
#        '200':
#          description: OK
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  response:
#                    $ref: '#/components/schemas/ApiResponse'
#                  items:
#                    type: array
#                    items:
#                      $ref: '#/components/schemas/LocalizationItem'
#        '400':
#          $ref: '#/components/responses/BadRequest'
#        '401':
#          $ref: '#/components/responses/Unauthorized'
#        '403':
#          $ref: '#/components/responses/Forbidden'
#        '404':
#          $ref: '#/components/responses/NotFound'
#        '500':
#          $ref: '#/components/responses/InternalServerError'
#
#  /translation/item_by_path:
#    post:
#      tags:
#        - translation
#      summary: Get translation item(s) detail
#      description: 'Required permission "get_translation_item_detail"'
#      operationId: getTranslationItemByPath
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              type: object
#              properties:
#                siteId:
#                  description: site ID
#                  type: string
#                path:
#                  description: Path(s) to item(s) to retrieve
#                  type: array
#                  items:
#                    type: string
#              required:
#                - siteId
#                - path
#      responses:
#        '200':
#          description: OK
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  response:
#                    $ref: '#/components/schemas/ApiResponse'
#                  items:
#                    type: array
#                    items:
#                      $ref: '#/components/schemas/LocalizationItem'
#        '400':
#          $ref: '#/components/responses/BadRequest'
#        '401':
#          $ref: '#/components/responses/Unauthorized'
#        '403':
#          $ref: '#/components/responses/Forbidden'
#        '404':
#          $ref: '#/components/responses/NotFound'
#        '500':
#          $ref: '#/components/responses/InternalServerError'
#
#  /translation/list_target_locales:
#    get:
#      tags:
#        - translation
#      summary: Get list of target translation locales
#      description: 'Required permission "get_translation_target_locales"'
#      operationId: getTranslationTargetLocales
#      parameters:
#        - name: siteId
#          in: query
#          description: site ID
#          required: true
#          schema:
#            type: string
#        - name: path
#          in: query
#          description: item path
#          required: true
#          schema:
#            type: string
#      responses:
#        '200':
#          description: OK
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  response:
#                    $ref: '#/components/schemas/ApiResponse'
#                  items:
#                    type: array
#                    items:
#                      $ref: '#/components/schemas/LocalizationItem'
#        '400':
#          $ref: '#/components/responses/BadRequest'
#        '401':
#          $ref: '#/components/responses/Unauthorized'
#        '403':
#          $ref: '#/components/responses/Forbidden'
#        '404':
#          $ref: '#/components/responses/NotFound'
#        '500':
#          $ref: '#/components/responses/InternalServerError'
#
#  /translation/mark_for_translation_by_id:
#    post:
#      tags:
#        - translation
#      summary: Mark item to be translated to specific locales
#      description: 'Required permission "mark_for_translation"'
#      operationId: markForTranslationById
#      requestBody:
#        description: Item and list of locales to translate to
#        required: true
#        content:
#          application/json:
#            schema:
#              type: object
#              properties:
#                siteId:
#                  type: string
#                  description: site ID
#                id:
#                  type: array
#                  description: id(s) of the item(s)
#                  items:
#                    type: string
#                locales:
#                  type: array
#                  description: locale codes
#                  items:
#                    type: string
#              required:
#                - siteId
#                - path
#                - locales
#      responses:
#        '200':
#          description: OK
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  response:
#                    $ref: '#/components/schemas/ApiResponse'
#        '400':
#          $ref: '#/components/responses/BadRequest'
#        '401':
#          $ref: '#/components/responses/Unauthorized'
#        '403':
#          $ref: '#/components/responses/Forbidden'
#        '404':
#          $ref: '#/components/responses/NotFound'
#        '500':
#          $ref: '#/components/responses/InternalServerError'
#
#  /translation/mark_for_translation_by_path:
#    post:
#      tags:
#        - translation
#      summary: Mark item to be translated to specific locales
#      description: 'Required permission "mark_for_translation"'
#      operationId: markForTranslationByPath
#      requestBody:
#        description: Item and list of locales to translate to
#        required: true
#        content:
#          application/json:
#            schema:
#              type: object
#              properties:
#                siteId:
#                  type: string
#                  description: site ID
#                path:
#                  type: array
#                  description: path(s) of the item(s)
#                  items:
#                    type: string
#
#                locales:
#                  type: array
#                  description: locale codes
#                  items:
#                    type: string
#              required:
#                - siteId
#                - path
#                - locales
#      responses:
#        '200':
#          description: OK
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  response:
#                    $ref: '#/components/schemas/ApiResponse'
#        '400':
#          $ref: '#/components/responses/BadRequest'
#        '401':
#          $ref: '#/components/responses/Unauthorized'
#        '403':
#          $ref: '#/components/responses/Forbidden'
#        '404':
#          $ref: '#/components/responses/NotFound'
#        '500':
#          $ref: '#/components/responses/InternalServerError'

  /api/2/workflow/item_states:
    get:
      tags:
        - workflow
      summary: Get item workflow states for site
      description: 'Required permission "get_item_states"'
      operationId: getItemStates
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: path
          in: query
          description: path regex
          required: false
          schema:
            type: string
        - name: states
          in: query
          description: states bitmap mask
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/SandboxItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - workflow
      summary: Set item workflow states for site
      description: 'Required permission "set_item_states"'
      operationId: setItemStates
      requestBody:
        description: List of items to set workflow state(s)
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: site ID
                items:
                  type: array
                  description: path(s) of item(s)
                  items:
                    type: string
                clearSystemProcessing:
                  type: boolean
                  description: true if system processing is to be cleared
                clearUserLocked:
                  type: boolean
                  description: true if user lock is to be cleared
                live:
                  type: boolean
                  description: true if item is to be set as live, otherwise false
                staged:
                  type: boolean
                  description: true if item is to be set as staged, otherwise false
                new:
                  type: boolean
                  description: true if item is to be set as new, otherwise false
                modified:
                  type: boolean
                  description: true if item is to be set as modified, otherwise false
              required:
                - siteId
                - items
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/workflow/update_item_states_by_query:
    post:
      tags:
        - workflow
      summary: Set item workflow states for site using query
      description: 'Required permission "set_item_states"'
      operationId: updateItemStates
      requestBody:
        description: List of items to set workflow state(s)
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: object
                  properties:
                    siteId:
                      type: string
                      description: site ID
                    path:
                      type: string
                      description: path regex of item(s)
                    states:
                      type: integer
                      format: int64
                      description: state bitmap mask to filter by state
                  required:
                    - siteId
                    - paths
                update:
                  type: object
                  properties:
                    clearSystemProcessing:
                      type: boolean
                      description: true if system processing is to be cleared
                    clearUserLocked:
                      type: boolean
                      description: true if user lock is to be cleared
                    live:
                      type: boolean
                      description: true if item is to be set as live, otherwise false
                    staged:
                      type: boolean
                      description: true if item is to be set as staged, otherwise false
                    new:
                      type: boolean
                      description: true if item is to be set as new, otherwise false
                    modified:
                      type: boolean
                      description: true if item is to be set as modified, otherwise false
              required:
                - query
                - update
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/workflow/affected_paths:
    get:
      tags:
        - workflow
      summary: Get workflow affected paths
      description: 'Required permission "content_read"'
      operationId: getWorkflowAffectedPaths
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: path
          in: query
          description: path of the content
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/SandboxItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/workflow/request_publish:
    post:
      deprecated: true
      tags:
        - workflow
      summary: Request publish for content
      description: 'Required permission "site_member". <br /> This operation is deprecated, use /api/2/publish instead.'
      operationId: workflowRequestPublish
      requestBody:
        description: parameters for request publish
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: site identifier
                items:
                  type: array
                  description: path(s) of content item(s)
                  items:
                    type: string
                optionalDependencies:
                  type: array
                  description: optional (soft) dependencies
                  items:
                    type: string
                publishingTarget:
                  type: string
                  description: target to publish content to
                schedule:
                  type: string
                  format: datetime
                  description: schedule when to publish content
                comment:
                  type: string
                  description: comment about publish request
                sendEmailNotifications:
                  type: boolean
                  description: if true, send email notifications
              required:
                - siteId
                - items
                - publishingTarget
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  packageId:
                    type: number
                    description: package ID
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/workflow/publish:
    post:
      deprecated: true
      tags:
        - workflow
      summary: Publish content
      description: 'Required permission "publish". <br /> This operation is deprecated, use /api/2/publish instead.'
      operationId: workflowPublish
      requestBody:
        description: parameters for publish content
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: site identifier
                items:
                  type: array
                  description: path(s) of content item(s)
                  items:
                    type: string
                optionalDependencies:
                  type: array
                  description: optional (soft) dependencies
                  items:
                    type: string
                publishingTarget:
                  type: string
                  description: target to publish content to
                schedule:
                  type: string
                  format: datetime
                  description: schedule when to publish content
                comment:
                  type: string
                  description: submission comment by publisher
              required:
                - siteId
                - items
                - publishingTarget
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  packageId:
                    type: number
                    description: package ID
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/workflow/approve:
    post:
      tags:
        - workflow
      summary: Approve request publish submission
      description: 'Required permission "publish"'
      operationId: workflowApprove
      requestBody:
        description: parameters for approve request publish submission
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: site identifier
                items:
                  type: array
                  description: path(s) of content item(s)
                  items:
                    type: string
                optionalDependencies:
                  type: array
                  description: optional (soft) dependencies
                  items:
                    type: string
                publishingTarget:
                  type: string
                  description: target to publish content to
                schedule:
                  type: string
                  format: datetime
                  description: schedule when to publish content
                comment:
                  type: string
                  description: Reviewer's comment
              required:
                - siteId
                - items
                - publishingTarget
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/workflow/reject:
    post:
      tags:
        - workflow
      summary: Reject request publish submission
      description: 'Required permission "publish"'
      operationId: workflowReject
      requestBody:
        description: parameters for reject request publish submission
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: site identifier
                items:
                  type: array
                  description: path(s) of content item(s)
                  items:
                    type: string
                comment:
                  type: string
                  description: Reviewer's rejection comment
              required:
                - siteId
                - items
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/2/loggers:
    get:
      tags:
        - loggers
      summary: Get all loggers and their configured priority levels
      description: Required permission "view_log_levels or configure_log_levels"
      operationId: loggersGetAll
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/LoggerConfig'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/2/loggers/logger_level:
    post:
      tags:
        - loggers
      summary: Update logger priority level
      description: Required permission "configure_log_levels"
      operationId: loggersUpdateLevel
      requestBody:
        description: parameters to update the logger level
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoggerConfigRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  result:
                    $ref: '#/components/schemas/LoggerConfig'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    ApiResponse:
      type: object
      description: |-
        The response of an API operation. Possible responses are:
          * `CODE:` 0, `MESSAGE:` OK
          * `CODE:` 1, `MESSAGE:` Created
          * `CODE:` 2, `MESSAGE:` Deleted
          * `CODE:` 3, `MESSAGE:` Completed with errors
          * `CODE:` 1000, `MESSAGE:` Internal system failure, `REMEDIAL ACTION:` Contact support
          * `CODE:` 1001, `MESSAGE:` Invalid parameter(s), `REMEDIAL ACTION:` Check API and make sure you're sending the correct parameters
          * `CODE:` 2000, `MESSAGE:` Unauthenticated, `REMEDIAL ACTION:` Please login first
          * `CODE:` 2001, `MESSAGE:` Unauthorized, `REMEDIAL ACTION:` You don't have permission to perform this task, please contact your administrator
          * `CODE:` 3000, `MESSAGE:` Organization not found, `REMEDIAL ACTION:` Check if you sent in the right Org Id
          * `CODE:` 3001, `MESSAGE:` Organization already exists, `REMEDIAL ACTION:` Try a different organization name
          * `CODE:` 4000, `MESSAGE:` Group not found, `REMEDIAL ACTION:` Check if you sent in the right Group Id
          * `CODE:` 5000, `MESSAGE:` Site not found, `REMEDIAL ACTION:` Check if you sent in the right Site Id
          * `CODE:` 5001, `MESSAGE:` Site already exists, `REMEDIAL ACTION:` Try a different site name
          * `CODE:` 6000, `MESSAGE:` User not found, `REMEDIAL ACTION:` Check if you're using the correct User ID or username
          * `CODE:` 6001, `MESSAGE:` User already exists, `REMEDIAL ACTION:` Try a different username
          * `CODE:` 6002, `MESSAGE:` User is externally managed, `REMEDIAL ACTION:` Update the user in the main identity system (e.g. LDAP)
          * `CODE:` 6003, `MESSAGE:` User password does not fulfill requirements, `REMEDIAL ACTION:` Use password that will fulfill password requirements
          * `CODE:` 6004, `MESSAGE:` User current password does not match, `REMEDIAL ACTION:` Use correct current password
          * `CODE:` 7000, `MESSAGE:` Content not found, `REMEDIAL ACTION:` Check if you sent in the right Content Id
          * `CODE:` 7001, `MESSAGE:` Content already exists, `REMEDIAL ACTION:` Edit the existing item or delete it before creating it again
          * `CODE:` 7002, `MESSAGE:` Content already locked, `REMEDIAL ACTION:` The user that locked the item or the administrator must unlock the item first
          * `CODE:` 7003, `MESSAGE:` Content already unlocked, `REMEDIAL ACTION:` The item is already unlocked
          * `CODE:` 7004, `MESSAGE:` Paste destination folder is invalid (did you paste the item onto itself?), `REMEDIAL ACTION:` Try pasting the content to a different folder
          * `CODE:` 8000, `MESSAGE:` Publishing is disabled, `REMEDIAL ACTION:` Advise the user to enable publishing
          * `CODE:` 9000, `MESSAGE:` Search is unreachable, `REMEDIAL ACTION:` Advise the user that the search engine is not reachable
          * `CODE:` 10000, `MESSAGE:` LoV not found, `REMEDIAL ACTION:` Check if you sent in the right LoV Id
          * `CODE:` 11000, `MESSAGE:` Cluster member not found, `REMEDIAL ACTION:` Check if you sent in the right Cluster Member Id
          * `CODE:` 11001, `MESSAGE:` Cluster member already exists, `REMEDIAL ACTION:` Get the list of cluster members to validate
          * `CODE:` 12000, `MESSAGE:` Remote repository not found, `REMEDIAL ACTION:` Check if you sent in the right remote repository name
          * `CODE:` 12001, `MESSAGE:` Remote repository already exists, `REMEDIAL ACTION:` Get the list of remote repositories to validate
          * `CODE:` 12002, `MESSAGE:` Pull from remote repository resulted in conflict, `REMEDIAL ACTION:` Resolve conflicts before continuing work with repository
          * `CODE:` 12003, `MESSAGE:` Remote is invalid. Not added to remote repositories, `REMEDIAL ACTION:` Add new remote repository with valid parameters.
          * `CODE:` 12004, `MESSAGE:` Failed to remove remote repository, `REMEDIAL ACTION:` Contact your system administrator.
          * `CODE:` 12005, `MESSAGE:` Push to remote repository failed, `REMEDIAL ACTION:` Check your repository settings or contact your system administrator.
          * `CODE:` 12006, `MESSAGE:` Remove remote repository failed, `REMEDIAL ACTION:` The remote repository is a cluster node repository. It can't be removed.
          * `CODE:` 12007, `MESSAGE:` Remote repository authentication failed, `REMEDIAL ACTION:` Recreate the remote repository with the correct authentication credentials and make sure you have write access.
          * `CODE:` 40000, `MESSAGE:` Marketplace service is not initialized, `REMEDIAL ACTION:` Contact your system administrator.
          * `CODE:` 40001, `MESSAGE:` Marketplace server is unreachable, `REMEDIAL ACTION:` Check the configuration to make sure the Marketplace URL is correct
          * `CODE:` 40002, `MESSAGE:` Plugin is already installed, `REMEDIAL ACTION:` Check that the site id, plugin id and plugin version are correct
          * `CODE:` 40003, `MESSAGE:` Error installing plugin, `REMEDIAL ACTION:` Check the plugin requirements
          * `CODE:` 50003, `MESSAGE:` Target path does not exist in site repository, `REMEDIAL ACTION:` Check if you sent in the right Studio Path
          * `CODE:` 51000, `MESSAGE:` Box is unreachable, `REMEDIAL ACTION:` Advise the user that Box is not reachable
          * `CODE:` 52000, `MESSAGE:` AWS is unreachable, `REMEDIAL ACTION:` Advise the user that AWS engine is not reachable
          * `CODE:` 53000, `MESSAGE:` Logger not found, `REMEDIAL ACTION:` Check if you sent in the right logger name or add 'createIfAbsent=true' parameter to create the logger if it does not exist
      properties:
        code:
          type: integer
          format: int32
          description: The response code
        message:
          type: string
          description: The detailed message of the response
        remedialAction:
          type: string
          description: What the user can do in order to address the issue indicated by the response
        documentationUrl:
          type: string
          description: A URL to documentation related to the response

    UpdateUserRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: 'User ID, unique and immutable'
        firstName:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
        email:
          type: string
          description: User's email address
        enabled:
          type: boolean
          description: Indicates if the user is enabled
      required:
        - id
        - username
        - password
        - firstName
        - lastName
        - email
        - enabled
        - externallyManaged

    CreateUserRequest:
      type: object
      properties:
        username:
          type: string
          description: Username, unique
        password:
          type: string
          description: User's password (not returned to caller)
        firstName:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
        email:
          type: string
          description: User's email address
        enabled:
          type: boolean
          description: Indicates if the user is enabled
        externallyManaged:
          type: boolean
          description: Indicates if a user is managed in by an external system (LDAP, SAML, etc.)
      required:
        - id
        - username
        - password
        - firstName
        - lastName
        - email
        - enabled
        - externallyManaged

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: 'User ID, unique and immutable'
        username:
          type: string
          description: Username, unique
        firstName:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
        email:
          type: string
          description: User's email address
        enabled:
          type: boolean
          description: Indicates if the user is enabled
        externallyManaged:
          type: boolean
          description: Indicates if a user is managed in by an external system (LDAP, SAML, etc.)
      required:
        - id
        - username
        - firstName
        - lastName
        - email
        - enabled
        - externallyManaged

    AuthenticatedUser:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: 'User ID, unique and immutable'
        username:
          type: string
          description: Username, unique
        firstName:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
        email:
          type: string
          description: User's email address
        enabled:
          type: boolean
          description: Indicates if the user is enabled
        externallyManaged:
          type: boolean
          description: Indicates if a user is managed in by an external system (LDAP, SAML, etc.)
        authenticationType:
          type: string
          description: |-
            The authentication type used to log in the user. Possible values are: DB, LDAP, AUTH_HEADERS
      required:
        - id
        - username
        - firstName
        - lastName
        - email
        - enabled
        - externallyManaged
        - authenticationType

    Group:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: 'Group ID, unique and immutable'
        name:
          type: string
          description: 'Group name, unique'
        desc:
          type: string
          description: Group description
      required:
        - id
        - name
    UpdateGroupRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: 'Group ID, unique and immutable'
        desc:
          type: string
          description: Group description
      required:
        - id
        - name

    Site:
      type: object
      properties:
        siteId:
          type: string
          description: 'Site ID, unique and immutable'
        state:
          type: string
          description: 'Site state, one of: INITIALIZING, READY, DELETING, DELETED'
        uuid:
          type: string
          description: Site UUID unique and immutable
        name:
          type: string
          description: site name
        desc:
          type: string
          description: Site description
      required:
        - siteId

    MenuItem:
      type: object
      properties:
        id:
          type: string
          description: 'Menu item ID, unique and immutable'
        label:
          type: string
          description: 'Menu item label'
        icon:
          type: string
          description: 'Menu item icon as a Font Awesome id, example: fa-smile'
      required:
        - id
        - label
        - icon

    S3Item:
      type: object
      properties:
        name:
          type: string
          description: 'Name of the item'
        url:
          type: string
          description: 'URL of the item'
        folder:
          type: boolean
          description: 'Indicates if the item is a folder'
      required:
        - name
        - url
        - folder

    MediaConvertResult:
      type: object
      properties:
        jobId:
          type: string
          description: 'The id of the triggered job'
        jobArn:
          type: string
          description: 'The full ARN of the triggered job'
        urls:
          type: array
          description: 'The list of files that will be generated by the triggered job'
          items:
            type: string
      required:
        - jobId
        - jobArn
        - urls

    WebDavItem:
      type: object
      properties:
        name:
          type: string
          description: 'Name of the item'
        url:
          type: string
          description: 'URL of the item'
        folder:
          type: boolean
          description: 'Indicates if the item is a folder'
      required:
        - name
        - url
        - folder

    ClusterMember:
      type: object
      properties:
        primary:
          type: boolean
          description: 'True for primary node, false for replicas'
        localAddress:
          type: string
          description: 'Cluster Member local IP address, immutable'
        state:
          type: string
          description: 'Cluster Member state'
          enum:
            - ACTIVE
            - INACTIVE
        gitUrl:
          type: string
          description: 'Git URL, unique'
        gitRemoteName:
          type: string
          description: 'Git Remote Name, unique'
      required:
        - localAddress
        - state
        - gitUrl
        - gitRemoteName
        - primary

    Version:
      type: object
      properties:
        major:
          type: integer
          format: int32
          description: The major version
        minor:
          type: integer
          format: int32
          description: The minor version
        patch:
          type: integer
          format: int32
          description: The patch version
      required:
        - major
        - minor

    Link:
      type: object
      properties:
        name:
          type: string
          description: The name of the link
        url:
          type: string
          description: The URL of the link
      required:
        - name
        - url

    Asset:
      type: object
      properties:
        title:
          type: string
          description: The title of the asset
        description:
          type: string
          description: The description of the asset
        url:
          type: string
          description: The URL of the asset
      required:
        - title
        - url

    Parameter:
      type: object
      properties:
        label:
          type: string
          description: The label to use for the parameter
        name:
          type: string
          description: The name of the parameter (must be camelCase)
        description:
          type: string
          description: The description of the parameter
        defaultValue:
          type: string
          description: The default value of the parameter
        type:
          type: string
          description: The type of the parameter. Currently supported values are STRING, PASSWORD
        required:
          type: boolean
          description: Indicates if the parameter is required

    PluginDescriptor:
      type: object
      properties:
        descriptorVersion:
          type: integer
          description: The version of the plugin descriptor
        plugin:
          $ref: '#/components/schemas/Plugin'

    Plugin:
      type: object
      properties:
        type:
          type: string
          description: The type of plugin
        id:
          type: string
          format: package name
          description: The plugin id
        name:
          type: string
          description: The plugin name
        tags:
          type: array
          description: The plugin tags
          items:
            type: string
        version:
          $ref: '#/components/schemas/Version'
        description:
          type: string
          description: The plugin description
        website:
          $ref: '#/components/schemas/Link'
        media:
          type: object
          properties:
            screenshots:
              type: array
              description: The screenshots of the plugin
              items:
                $ref: '#/components/schemas/Asset'
            videos:
              type: array
              description: The videos of the plugin
              items:
                $ref: '#/components/schemas/Asset'
        developer:
          type: object
          properties:
            people:
              type: array
              description: The people that worked on the plugin
              items:
                $ref: '#/components/schemas/Link'
            company:
              $ref: '#/components/schemas/Link'
        license:
          $ref: '#/components/schemas/Link'
        crafterCmsVersions:
          type: array
          description: The supported CrafterCMS versions of the plugin
          items:
            $ref: '#/components/schemas/Version'
        crafterCmsEditions:
          type: array
          description: The supported CrafterCMS editions of the plugin
          items:
            type: string
        parameters:
          type: array
          description: The parameters supported by the plugin
          items:
            $ref: '#/components/schemas/Parameter'

    MarketplacePlugin:
      allOf:
        - $ref: '#/components/schemas/Plugin'
        - type: object
          properties:
            status:
              description: The status of this version of the plugin (possible values are 'PENDING' approval and 'APPROVED')
              type: string
            source:
              description: The source of the plugin
              type: string
            compatible:
              description: Indicates if the plugin is compatible
              type: boolean

    MarketplaceRemotePlugin:
      allOf:
        - $ref: '#/components/schemas/MarketplacePlugin'
        - type: object
          properties:
            url:
              type: string

    GitMarketplacePlugin:
      allOf:
        - $ref: '#/components/schemas/MarketplaceRemotePlugin'
        - type: object
          properties:
            ref:
              type: string

    CreateSiteFromMarketplace:
      type: object
      properties:
        siteId:
          type: string
          description: Site ID to use
        description:
          type: string
          description: Site description
        sandboxBranch:
          type: string
          description: Name for sandbox branch (default master)
        remoteName:
          type: string
          description: Remote repository name (default origin)
        blueprintId:
          type: string
          description: The ID of the blueprint to use
        blueprintVersion:
          $ref: '#/components/schemas/Version'
        siteParams:
          type: object
          description: Object containing all parameters for the blueprint. It should include all required parameters from the descriptor
          additionalProperties:
            type: string
      required:
        - siteId
        - blueprintId
        - blueprintVersion

    PluginRecord:
      type: object
      properties:
        id:
          type: string
          description: The id of the plugin
        version:
          $ref: '#/components/schemas/Version'
        pluginUrl:
          type: string
          description: The URL of the plugin
        installationDate:
          type: string
          format: date-time
          description: The date when the plugin was installed
        files:
          type: array
          description: The list of installed files
          items:
            $ref: '#/components/schemas/FileRecord'

    FileRecord:
      type: object
      properties:
        path:
          type: string
          description: The path where the file was copied during installation

    SearchParams:
      type: object
      properties:
        query:
          type: string
          description: The main Lucene query to execute
        keywords:
          type: string
          description: The keywords to search in the files
        path:
          type: string
          description: Regular expression to filter the paths
        offset:
          type: integer
          format: int64
          description: The offset to paginate the results (defaults to 0)
        limit:
          type: integer
          format: int64
          description: The limit to paginate the results (defaults to 10)
        sortBy:
          type: string
          description: The name of the field to sort the results (defaults to sort by relevance)
        sortOrder:
          type: string
          description: The order to sort the results (defaults to DESC)
        orOperator:
          type: boolean
          description: Indicates if the filters should use an OR instead of an AND operator (defaults to false)
        filters:
          type: object
          description: >-
            Object containing facets to filter the search results. Facets can be simple key-value pairs like "MIME
            Type":"text/css" or nested objects for range facets like "Width": { "min": 0, "max": 150 }. Both keys and
             values can be taken from the facets object of a previous search.
          additionalProperties: true

    SearchResult:
      type: object
      properties:
        total:
          type: integer
          format: int64
          description: Total number of results found
        items:
          type: array
          description: List of items based on the pagination parameters
          items:
            $ref: '#/components/schemas/SearchResultItem'
        facets:
          type: array
          description: List of facets based on the results found
          items:
            $ref: '#/components/schemas/SearchFacet'

    SearchResultItem:
      type: object
      properties:
        path:
          type: string
          description: The path of the file
        name:
          type: string
          description: The internal name of the file
        type:
          type: string
          description: The type of the file
        mimeType:
          type: string
          description: The MIME type of the file
        previewUrl:
          type: string
          description: The preview URL of the file
        lastModifier:
          type: string
          description: The last user that modified the file
        lastModified:
          type: string
          format: date-time
          description: The last date that the file was modified
        size:
          type: integer
          format: int64
          description: The size of the file, in bytes
        snippets:
          type: array
          description: Snippets relevant to the search query
          items:
            type: string

    SearchFacet:
      type: object
      properties:
        name:
          type: string
          description: The label of the facet
        range:
          type: boolean
          description: Indicates if the values of the facet are ranges
        date:
          type: boolean
          description: Indicates if the values of the facet are dates
        values:
          type: object
          description: >-
            The values and counts of the facet. If the facet is a range
            the values will be of type SearchFacetRange, otherwise it will
            be a single integer.
          properties:
            facet1:
              type: object
              properties:
                value1:
                  type: integer
            facet2:
              $ref: '#/components/schemas/SearchFacetRange'

    SearchFacetRange:
      type: object
      properties:
        count:
          type: integer
          format: int64
          description: The number of files that match the range
        from:
          type: object
          description: The starting limit of the range
        to:
          type: object
          description: The ending limit of the range

    AuditLog:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Audit log entry ID
        organizationId:
          type: integer
          format: int64
          description: Organization ID
        siteId:
          type: string
          format: string
          description: Site Identifier
        siteName:
          type: string
          format: string
          description: Site name
        operation:
          type: string
          description: Operation that was executed
        operationTimestamp:
          type: string
          description: Timestamp when operation was executed
        origin:
          type: string
          description: Origin of operation (UI/API or Git)
        primaryTargetId:
          type: string
          description: Target ID upon which operation was executed
        primaryTargetType:
          type: string
          description: Type of the target
        primaryTargetSubtype:
          type: string
          description: Subtype of the target
        primaryTargetValue:
          type: string
          description: Value of the target (e.g. content's path)
        actorId:
          type: string
          description: Actor ID which invoked operation
        actorDetails:
          type: string
          description: Details of the actor which invoked
        clusterNodeId:
          type: string
          description: Cluster node Id
        parameters:
          type: array
          description: Additional parameters of audit log
          items:
            type: object
            properties:
              targetId:
                type: string
                description: Target ID upon which operation was executed
              targetType:
                type: string
                description: Type of the target
              targetValue:
                type: string
                description: Value of the target (e.g. content's path)
            required:
              - targetId
              - targetType
              - targetValue
      required:
        - id
        - organizationId
        - siteId
        - siteName
        - operation
        - operationTimestamp
        - origin
        - primaryTargetId
        - primaryTargetType
        - primaryTargetValue
        - actorId

    VersionItem:
      type: object
      properties:
        packageName:
          type: string
          description: The name of the current package
        packageVersion:
          type: string
          description: The version of the current package
        packageBuild:
          type: string
          description: The build of the current package
        packageBuildDate:
          type: string
          format: date-time
          description: The build date of the current package
        osName:
          type: string
          description: The name of the operating system
        osVersion:
          type: string
          description: The version of the operating system
        osArch:
          type: string
          description: The architecture of the operating system
        javaVersion:
          type: string
          description: The version of java being used
        javaVendor:
          type: string
          description: The name of the JVM vendor
        javaVm:
          type: string
          description: The name of the JVM

    StatusItem:
      type: object
      properties:
        uptime:
          type: integer
          format: int64
          description: The time in seconds that the JVM has been up
        startup:
          type: string
          format: date-time
          description: The date and time when the JVM started

    ClusterStatusItem:
      type: object
      properties:
        uptime:
          type: integer
          format: int64
          description: The time in seconds that the JVM has been up
        startup:
          type: string
          format: date-time
          description: The date and time when the JVM started
        age:
          type: integer
          format: int64
          description: The time in seconds that the cluster node has been up
        role:
          type: string
          description: Role that the node has in the cluster. Possible values PRIMARY, REPLICA, UNASSIGNED
        readyToTakeTraffic:
          type: boolean
          description: True if the cluster node is ready to take traffic. Typically it is a Primary node
        readyToBecomePrimary:
          type: boolean
          description: True if the cluster node is a Replica and in sync with the Primary node

    MemoryItem:
      type: object
      properties:
        totalJvmMemory:
          type: integer
          format: int64
          description: The memory in bytes used by the JVM
        freeJvmMemory:
          type: integer
          format: int64
          description: The remaining memory in bytes for the JVM
        maxJvmMemory:
          type: integer
          format: int64
          description: The maximum memory in bytes available to the JVM
        totalOsMemory:
          type: integer
          format: int64
          description: The total memory in bytes available for the operating system
        freeOsMemory:
          type: integer
          format: int64
          description: The remaining memory in bytes for the operating system
        totalSwapMemory:
          type: integer
          format: int64
          description: The total memory in bytes available for swap space
        freeSwapMemory:
          type: integer
          format: int64
          description: The remaining memory in bytes for swap space

    LogEvent:
      type: object
      properties:
        exception:
          type: string
          description: The exception message if any
        site:
          type: string
          description: The site name
        level:
          type: string
          description: The level of the log event
        thread:
          type: string
          description: The name of the thread
        message:
          type: string
          description: The message of the log event
        timestamp:
          type: string
          format: datetime
          description: The timestamp of the log event
        timestampm:
          type: integer
          format: int64
          description: The time in milliseconds of the log event

    RemoteRepository:
      type: object
      properties:
        siteId:
          type: string
          description: site identifier
        remoteName:
          type: string
          description: remote repository name
        remoteUrl:
          type: string
          format: URL
          description: URL to access remote repository
        authenticationType:
          type: string
          description: >-
            Authentication type to use to access remote repository

            Possible values:

              - none: no authentication

              - basic: username and password authentication

              - token: token authentication

              - key: key-based authentication
        remoteUsername:
          type: string
          description: username to use to access remote repository
        remotePassword:
          type: string
          description: password to use to access remote repository
        remoteToken:
          type: string
          description: token to use to access remote repository
        remotePrivateKey:
          type: string
          description: private key to access
      required:
        - siteId
        - remoteName
        - remoteUrl
        - authenticationType

    RemoteRepositoryInfo:
      type: object
      properties:
        name:
          type: string
          description: remote repository name
        url:
          type: string
          description: remote repository url
        fetch:
          type: string
          description: remote repository fetch references
        push_url:
          type: string
          description: remote repository push url
        branches:
          type: array
          items:
            type: string
            description: remote repository branch name
        reachable:
          type: boolean
          description: true if remote repository is reachable, otherwise false
        unreachableReason:
          type: string
          description: reason why remote is unreachable
        removable:
          type: boolean
          description: true if remote repository can be removed, otherwise false

    QuickCreateItem:
      type: object
      properties:
        siteId:
          type: string
          description: site id
        label:
          type: string
          description: user friendly label for content type name
        contentTypeId:
          type: string
          description: content type id
        path:
          type: string
          description: path expression to generate path for quick create

    RepositoryStatus:
      type: object
      properties:
        conflicting:
          type: array
          description: list of conflicting files
          items:
            type: string
        uncommittedChanges:
          type: array
          description: list of added files
          items:
            type: string
        clean:
          type: boolean
          description: true if there are no conflicts or uncommitted changes

    History:
      type: object
      properties:
        item:
          $ref: '#/components/schemas/ContentItem'
        versions:
          type: array
          description: list of versions
          items:
            $ref: '#/components/schemas/ItemVersion'

    ContentItem:
      type: object
      description: API v1 object

    PublishingPackage:
      type: object
      properties:
        id:
          type: string
          description: package ID
        siteId:
          type: string
          description: site ID
        schedule:
          type: string
          format: datetime
          description: scheduled date and time
        approver:
          type: string
          description: user that approved publishing package
        state:
          type: string
          description: package state
        publishingTarget:
          type: string
          description: publishing target where package will be published
        comment:
          type: string
          description: submission comment
      required:
        - id
        - siteId
        - schedule
        - approver
        - state
        - publishingTarget

    PublishingPackageDetails:
      allOf:
        - $ref: '#/components/schemas/PublishingPackageStatus'
        - type: object
          properties:
            items:
              type: array
              items:
                type: object
                properties:
                  path:
                    type: string
                    description: content item path
                  contentTypeClass:
                    type: string
                    description: content type class
                  mimeType:
                    type: string
                    description: mime-type
          required:
            - id
            - schedule
            - approver
            - state
            - publishingTarget
            - items

    PublishingProgress:
      type: object
      properties:
        startTime:
            type: string
            format: date-time
            description: start time of the package processing
        stages:
          example:
            - name: "Repo sync"
              state: "COMPLETED"
              processed: 1
              total: 1
              errors: false
            - name: "Item list loading"
              state: "COMPLETED"
              processed: 100
              total: 100
              errors: false
            - name: "Live publish"
              state: "IN PROGRESS"
              processed: 54
              total: 100
              errors: false
            - name: "Commit"
              state: "READY"
              processed: 0
              total: 1
              errors: false
            - name: "Package update"
              state: "READY"
              processed: 0
              total: 1
              errors: false
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                description: stage name
                example: "Repo sync"
              state:
                type: string
                description: stage state
                enum: ["PENDING", "IN PROGRESS", "COMPLETED"]
              total:
                type: integer
                format: int32
                description: total number of items in stage
                example: 1
              processed:
                type: integer
                format: int32
                description: number of items processed
              errors:
                type: boolean
                description: true if stage has errors, otherwise false

    PublishingPackageStatus:
      type: object
      properties:
        id:
          type: string
          description: package ID
        siteId:
          type: string
          description: site ID
        schedule:
          type: string
          format: date-time
          description: scheduled date and time
        approver:
          type: string
          description: user that approved publishing package
        state:
          type: string
          description: package state
          enum: ["READY", "PROCESSING", "COMPLETED", "FAILED"]
        publishingTarget:
          type: string
          description: publishing target where package will be published
          enum: [staging, live]
        comment:
          type: string
          description: submission comment
      required:
        - id
        - schedule
        - approver
        - state
        - publishingTarget

    PublishPackageRequest:
      type: object
      properties:
        siteId:
          type: string
          description: site ID
        publishingTarget:
          type: string
          description: the publishing target (staging or live)
          example: staging
        paths:
          type: array
          items:
            type: object
            properties:
              path:
                type: string
                description: the path of the item to publish
              includeChildren:
                type: boolean
                description: include children of the given path
                default: false
              includeSoftDeps:
                type: boolean
                description: include soft dependencies (also includes soft dependencies of children)
                default: false
        commitIds:
          type: array
          items:
            type: string
          description: the commit ids to publish

    PublishingStatus:
      type: object
      properties:
        enabled:
          type: boolean
          description: true if publishing for site is enabled, otherwise false
        status:
          type: string
          description: publishing status for site
        lockOwner:
          type: string
          description: studio instance owner of publishing lock
        lockTTL:
          type: string
          description: TTL timestamp for publishing lock
        totalItems:
          type: integer
          format: int32
          description: total number of item being published right now
        numberOfItems:
          type: integer
          format: int32
          description: number of items published so far
        submissionId:
          type: string
          description: identifier of a submission being published
        publishingTarget:
          type: string
          description: publishing target for package
        published:
          type: boolean
          description: true if site has been published at least once (initial publish; published repository exist), otherwise false

      required:
        - enabled
        - status
        - message
        - lockOwner
        - lockTTL

    DeploymentHistoryGroup:
      type: object
      properties:
        internalName:
          type: string
          description: user friendly label
        numberOfChildren:
          type: integer
          format: int32
          description: number of items in the group
        children:
          type: array
          items:
            $ref: '#/components/schemas/ContentItem'
        publishingTarget:
          type: string
          description: publishing target where item was published
      required:
        - internalName
        - numberOfChildren
        - children
        - publishingTarget

    DependencyItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: content item ID
        label:
          type: string
          description: user friendly display name for content item
        path:
          type: string
          description: path where content item is stored inside repository (with filename)
      required:
        - id
        - label
        - path

    SandboxItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: content item ID
        label:
          type: string
          description: user friendly display name for content item
        parentId:
          type: integer
          format: int64
          description: parent item ID
        contentTypeId:
          type: string
          description: content type of content item
        path:
          type: string
          description: path where content item is stored inside repository (with filename)
        previewUrl:
          type: string
          description: url for previewing content item
        systemType:
          type: string
          description: one of predefined type values (page, component, asset, levelDescriptor, folder ...)
        mimeType:
          type: string
          description: mime-type of content item file
        state:
          type: integer
          format: int64
          description: >-
            bitmap of states
              * `BIT ORDER (little-endian)`: 0, `FLAG`: New, `DESCRIPTION`: The item is new and never been published
              * `BIT ORDER (little-endian)`: 1: `FLAG`: Modified, `DESCRIPTION`: The item has been published in the past and has been modified in the sandbox
              * `BIT ORDER (little-endian)`: 2: `FLAG`: Deleted, `DESCRIPTION`: The item is deleted
              * `BIT ORDER (little-endian)`: 3: `FLAG`: User Locked, `DESCRIPTION`: The item is locked by a user
              * `BIT ORDER (little-endian)`: 4, `FLAG`: System Processing, `DESCRIPTION`: The item is locked by the system for processing
              * `BIT ORDER (little-endian)`: 5, `FLAG`: In Workflow, `DESCRIPTION`: The item has been submitted for review
              * `BIT ORDER (little-endian)`: 6, `FLAG`: Scheduled, `DESCRIPTION`: The item has been scheduled for review or publishing ounce approved
              * `BIT ORDER (little-endian)`: 7, `FLAG`: Publishing, `DESCRIPTION`: The item is being published
              * `BIT ORDER (little-endian)`: 8, `FLAG`: Destination, `DESCRIPTION`: If the item is being published, the destination is staging if 0, and live if 1
              * `BIT ORDER (little-endian)`: 9, `FLAG`: Staged, `DESCRIPTION`: The item has been pushed to the staging publishing target
              * `BIT ORDER (little-endian)`: 10, `FLAG`: Live, `DESCRIPTION`: The item has been pushed to the live publishing target
              * `BIT ORDER (little-endian)`: 11, `FLAG`: Disabled, `DESCRIPTION`: The item has been disabled
              * `BIT ORDER (little-endian)`: 12, `FLAG`: Reserved 12, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 13, `FLAG`: Reserved 11, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 14, `FLAG`: Reserved 10, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 15, `FLAG`: Reserved 9, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 16, `FLAG`: Reserved 8, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 17, `FLAG`: Reserved 7, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 18, `FLAG`: Reserved 6, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 19, `FLAG`: Reserved 5, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 20, `FLAG`: Reserved 4, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 21, `FLAG`: Reserved 3, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 22, `FLAG`: Reserved 2, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 23, `FLAG`: Reserved 1, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 24, `FLAG`: Translation Up To Date, `DESCRIPTION`: This item is a translation of another and it’s up to date
              * `BIT ORDER (little-endian)`: 25, `FLAG`: Translation Pending, `DESCRIPTION`: This item is a translation of another and it’s pending translation
              * `BIT ORDER (little-endian)`: 26, `FLAG`: Translation in Progress, `DESCRIPTION`: This item is a translation of another and is currently being translated
        lockOwner:
          $ref: '#/components/schemas/Person'
          description: user that locked item for editing
        localeCode:
          type: string
          description: locale of content item
        translationSourceId:
          type: string
          description: ID of content item that is original for translation that current item represents
        creator:
          $ref: '#/components/schemas/Person'
          description: user that created the item
        dateCreated:
          type: string
          format: datetime
          description: timestamp when item was created
        modifier:
          $ref: '#/components/schemas/Person'
          description: last user that modified item
        dateModified:
          type: string
          format: datetime
          description: timestamp when was item last modified
        submitter:
          $ref: '#/components/schemas/Person'
          description: user that submitted item for review (if any)
        dateSubmitted:
          type: string
          format: datetime
          description: timestamp when item was submitted for review (if any)
        sizeInBytes:
          type: integer
          format: int64
          description: size of content item in the repository
        expiresOn:
          type: string
          format: datetime
          description: timestamp when the item will expire, can be null if not present/set
        availableActions:
          type: integer
          format: int64
          description: >-
            available actions bitmap
              * `BIT ORDER (little-endian)`: 0, `FLAG`: Content: Read, `DESCRIPTION`: Read content
              * `BIT ORDER (little-endian)`: 1, `FLAG`: Content: Copy, `DESCRIPTION`: Copy content
              * `BIT ORDER (little-endian)`: 2, `FLAG`: Content: Read Version History, `DESCRIPTION`: Read version history for content
              * `BIT ORDER (little-endian)`: 3, `FLAG`: Content: Get Dependencies, `DESCRIPTION`: Get content dependencies
              * `BIT ORDER (little-endian)`: 4, `FLAG`: Publish: Request, `DESCRIPTION`: Request publish for content
              * `BIT ORDER (little-endian)`: 5, `FLAG`: Content: Create, `DESCRIPTION`: Create content
              * `BIT ORDER (little-endian)`: 6, `FLAG`: Content: Paste, `DESCRIPTION`: Paste content
              * `BIT ORDER (little-endian)`: 7, `FLAG`: Content: Edit, `DESCRIPTION`: Update content
              * `BIT ORDER (little-endian)`: 8, `FLAG`: Content: Rename, `DESCRIPTION`: Rename or move content
              * `BIT ORDER (little-endian)`: 9, `FLAG`: Content: Cut, `DESCRIPTION`: Cut content
              * `BIT ORDER (little-endian)`: 10, `FLAG`: Content: Upload, `DESCRIPTION`: Upload content
              * `BIT ORDER (little-endian)`: 11, `FLAG`: Content: Duplicate, `DESCRIPTION`: Duplicate content
              * `BIT ORDER (little-endian)`: 12, `FLAG`: Content: Change Type, `DESCRIPTION`: Change content type
              * `BIT ORDER (little-endian)`: 13, `FLAG`: Content: Revert, `DESCRIPTION`: Revert content
              * `BIT ORDER (little-endian)`: 14, `FLAG`: Content: Edit controller, `DESCRIPTION`: Edit controller for content type
              * `BIT ORDER (little-endian)`: 15, `FLAG`: Content: Edit template, `DESCRIPTION`: Edit rendering template
              * `BIT ORDER (little-endian)`: 16, `FLAG`: Content: Create folder, `DESCRIPTION`: Create folder
              * `BIT ORDER (little-endian)`: 17, `FLAG`: Content: Delete, `DESCRIPTION`: Delete content
              * `BIT ORDER (little-endian)`: 18, `FLAG`: Content: Delete controller, `DESCRIPTION`: Delete content type controller
              * `BIT ORDER (little-endian)`: 19, `FLAG`: Content: Delete template, `DESCRIPTION`: Delete rendering template
              * `BIT ORDER (little-endian)`: 20, `FLAG`: Publish: Publish, `DESCRIPTION`: Publish content
              * `BIT ORDER (little-endian)`: 21, `FLAG`: Publish: Approve, `DESCRIPTION`: Approve publish request
              * `BIT ORDER (little-endian)`: 22, `FLAG`: Publish: Schedule, `DESCRIPTION`: Schedule publish
              * `BIT ORDER (little-endian)`: 23, `FLAG`: Publish: Reject, `DESCRIPTION`: Reject publish request
              * `BIT ORDER (little-endian)`: 24, `FLAG`: Content: Unlock, `DESCRIPTION`: Unlock content item
        childrenCount:
          type: integer
          format: int32
          description: number of children of the item
      required:
        - id
        - label
        - contentTypeId
        - path
        - previewUrl
        - systemType
        - mimeType
        - state
        - lockOwner
        - createdDate
        - creator
        - modifier
        - lastModifiedDate
        - commitId
        - availableActions

    DetailedItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: content item ID
        label:
          type: string
          description: user friendly display name for content item
        parentId:
          type: integer
          format: int64
          description: parent item ID
        contentTypeId:
          type: string
          description: content type of content item
        path:
          type: string
          description: path where content item is stored inside repository (with filename)
        previewUrl:
          type: string
          description: url for previewing content item
        systemType:
          type: string
          format: page, component, asset, levelDescriptor, folder
          description: type of item in CrafterCMS domain
        mimeType:
          type: string
          description: mime-type of content item file
        state:
          type: integer
          format: int64
          description: >-
            bitmap of states
              * `BIT ORDER (little-endian)`: 0, `FLAG`: New, `DESCRIPTION`: The item is new and never been published
              * `BIT ORDER (little-endian)`: 1: `FLAG`: Modified, `DESCRIPTION`: The item has been published in the past and has been modified in the sandbox
              * `BIT ORDER (little-endian)`: 2: `FLAG`: Deleted, `DESCRIPTION`: The item is deleted
              * `BIT ORDER (little-endian)`: 3: `FLAG`: User Locked, `DESCRIPTION`: The item is locked by a user
              * `BIT ORDER (little-endian)`: 4, `FLAG`: System Processing, `DESCRIPTION`: The item is locked by the system for processing
              * `BIT ORDER (little-endian)`: 5, `FLAG`: In Workflow, `DESCRIPTION`: The item has been submitted for review
              * `BIT ORDER (little-endian)`: 6, `FLAG`: Scheduled, `DESCRIPTION`: The item has been scheduled for review or publishing ounce approved
              * `BIT ORDER (little-endian)`: 7, `FLAG`: Publishing, `DESCRIPTION`: The item is being published
              * `BIT ORDER (little-endian)`: 8, `FLAG`: Destination, `DESCRIPTION`: If the item is being published, the destination is staging if 0, and live if 1
              * `BIT ORDER (little-endian)`: 9, `FLAG`: Staged, `DESCRIPTION`: The item has been pushed to the staging publishing target
              * `BIT ORDER (little-endian)`: 10, `FLAG`: Live, `DESCRIPTION`: The item has been pushed to the live publishing target
              * `BIT ORDER (little-endian)`: 11, `FLAG`: Disabled, `DESCRIPTION`: The item has been disabled
              * `BIT ORDER (little-endian)`: 12, `FLAG`: Reserved 12, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 13, `FLAG`: Reserved 11, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 14, `FLAG`: Reserved 10, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 15, `FLAG`: Reserved 9, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 16, `FLAG`: Reserved 8, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 17, `FLAG`: Reserved 7, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 18, `FLAG`: Reserved 6, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 19, `FLAG`: Reserved 5, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 20, `FLAG`: Reserved 4, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 21, `FLAG`: Reserved 3, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 22, `FLAG`: Reserved 2, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 23, `FLAG`: Reserved 1, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 24, `FLAG`: Translation Up To Date, `DESCRIPTION`: This item is a translation of another and it’s up to date
              * `BIT ORDER (little-endian)`: 25, `FLAG`: Translation Pending, `DESCRIPTION`: This item is a translation of another and it’s pending translation
              * `BIT ORDER (little-endian)`: 26, `FLAG`: Translation in Progress, `DESCRIPTION`: This item is a translation of another and is currently being translated
        lockOwner:
          $ref: '#/components/schemas/Person'
          description: user that locked item for editing
        localeCode:
          type: string
          description: locale of content item
        translationSourceId:
          type: string
          description: ID of content item that is original for translation that current item represents
        expiresOn:
          type: string
          format: datetime
          description: timestamp when the item will expire, can be null if not present/set
        availableActions:
          type: integer
          format: int64
          description: >-
            available actions bitmap
              * `BIT ORDER (little-endian)`: 0, `FLAG`: Content: Read, `DESCRIPTION`: Read content
              * `BIT ORDER (little-endian)`: 1, `FLAG`: Content: Copy, `DESCRIPTION`: Copy content
              * `BIT ORDER (little-endian)`: 2, `FLAG`: Content: Read Version History, `DESCRIPTION`: Read version history for content
              * `BIT ORDER (little-endian)`: 3, `FLAG`: Content: Get Dependencies, `DESCRIPTION`: Get content dependencies
              * `BIT ORDER (little-endian)`: 4, `FLAG`: Publish: Request, `DESCRIPTION`: Request publish for content
              * `BIT ORDER (little-endian)`: 5, `FLAG`: Content: Create, `DESCRIPTION`: Create content
              * `BIT ORDER (little-endian)`: 6, `FLAG`: Content: Paste, `DESCRIPTION`: Paste content
              * `BIT ORDER (little-endian)`: 7, `FLAG`: Content: Edit, `DESCRIPTION`: Update content
              * `BIT ORDER (little-endian)`: 8, `FLAG`: Content: Rename, `DESCRIPTION`: Rename or move content
              * `BIT ORDER (little-endian)`: 9, `FLAG`: Content: Cut, `DESCRIPTION`: Cut content
              * `BIT ORDER (little-endian)`: 10, `FLAG`: Content: Upload, `DESCRIPTION`: Upload content
              * `BIT ORDER (little-endian)`: 11, `FLAG`: Content: Duplicate, `DESCRIPTION`: Duplicate content
              * `BIT ORDER (little-endian)`: 12, `FLAG`: Content: Change Type, `DESCRIPTION`: Change content type
              * `BIT ORDER (little-endian)`: 13, `FLAG`: Content: Revert, `DESCRIPTION`: Revert content
              * `BIT ORDER (little-endian)`: 14, `FLAG`: Content: Edit controller, `DESCRIPTION`: Edit controller for content type
              * `BIT ORDER (little-endian)`: 15, `FLAG`: Content: Edit template, `DESCRIPTION`: Edit rendering template
              * `BIT ORDER (little-endian)`: 16, `FLAG`: Content: Create folder, `DESCRIPTION`: Create folder
              * `BIT ORDER (little-endian)`: 17, `FLAG`: Content: Delete, `DESCRIPTION`: Delete content
              * `BIT ORDER (little-endian)`: 18, `FLAG`: Content: Delete controller, `DESCRIPTION`: Delete content type controller
              * `BIT ORDER (little-endian)`: 19, `FLAG`: Content: Delete template, `DESCRIPTION`: Delete rendering template
              * `BIT ORDER (little-endian)`: 20, `FLAG`: Publish: Publish, `DESCRIPTION`: Publish content
              * `BIT ORDER (little-endian)`: 21, `FLAG`: Publish: Approve, `DESCRIPTION`: Approve publish request
              * `BIT ORDER (little-endian)`: 22, `FLAG`: Publish: Schedule, `DESCRIPTION`: Schedule publish
              * `BIT ORDER (little-endian)`: 23, `FLAG`: Publish: Reject, `DESCRIPTION`: Reject publish request
              * `BIT ORDER (little-endian)`: 24, `FLAG`: Content: Unlock, `DESCRIPTION`: Unlock content item
        sandbox:
          type: object
          description: metadata of content item version stored in sandbox repository
          properties:
            creator:
              $ref: '#/components/schemas/Person'
              description: user that created the item
            dateCreated:
              type: string
              format: datetime
              description: timestamp when item was created
            modifier:
              $ref: '#/components/schemas/Person'
              description: last user that modified sandbox version of item
            dateModified:
              type: string
              format: datetime
              description: timestamp when was item last modified in sandbox
            submitter:
              $ref: '#/components/schemas/Person'
              description: user that submitted item for publishing
            dateSubmitted:
              type: string
              format: datetime
              description: timestamp when item was submitted for review (if any)
            sizeInBytes:
              type: integer
              format: int64
              description: size of content item in the repository
        staging:
          type: object
          description: metadata of content item version stored in staging repository
          properties:
            dateScheduled:
              type: string
              format: datetime
              description: timestamp when is item scheduled for publishing to staging repository
            datePublished:
              type: string
              format: datetime
              description: timestamp when was item last time published to staging repository
            publisher:
              type: string
              description: username of last user that published item to staging repository
            commitId:
              type: string
              description: commit id of last modification in the staging repository
        live:
          type: object
          description: metadata of content item version stored in live repository
          properties:
            dateScheduled:
              type: string
              format: datetime
              description: timestamp when is item scheduled for publishing to live repository
            datePublished:
              type: string
              format: datetime
              description: timestamp when was item last time published to live repository
            publisher:
              type: string
              description: username of last user that published item to live repository
            commitId:
              type: string
              description: commit id of last modification in the live repository
        childrenCount:
          type: integer
          format: int32
          description: number of children of the item
      required:
        - id
        - label
        - contentTypeId
        - path
        - previewUrl
        - systemType
        - mimeType
        - state
        - lockOwner
        - staging
        - availableActions

    LocalizationItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: content item ID
        label:
          type: string
          description: user friendly display name for content item
        parentId:
          type: integer
          format: int64
          description: parent item ID
        path:
          type: string
          description: path where content item is stored inside repository (with filename)
        previewUrl:
          type: string
          description: url for previewing content item
        systemType:
          type: string
          description: one of predefined type values (page, component, asset, level descriptor, folder ...)
        mimeType:
          type: string
          description: mime-type of content item file
        state:
          type: integer
          format: int64
          description: >-
            bitmap of states
              * `BIT ORDER (little-endian)`: 0, `FLAG`: New, `DESCRIPTION`: The item is new and never been published
              * `BIT ORDER (little-endian)`: 1: `FLAG`: Modified, `DESCRIPTION`: The item has been published in the past and has been modified in the sandbox
              * `BIT ORDER (little-endian)`: 2: `FLAG`: Deleted, `DESCRIPTION`: The item is deleted
              * `BIT ORDER (little-endian)`: 3: `FLAG`: User Locked, `DESCRIPTION`: The item is locked by a user
              * `BIT ORDER (little-endian)`: 4, `FLAG`: System Processing, `DESCRIPTION`: The item is locked by the system for processing
              * `BIT ORDER (little-endian)`: 5, `FLAG`: In Workflow, `DESCRIPTION`: The item has been submitted for review
              * `BIT ORDER (little-endian)`: 6, `FLAG`: Scheduled, `DESCRIPTION`: The item has been scheduled for review or publishing ounce approved
              * `BIT ORDER (little-endian)`: 7, `FLAG`: Publishing, `DESCRIPTION`: The item is being published
              * `BIT ORDER (little-endian)`: 8, `FLAG`: Destination, `DESCRIPTION`: If the item is being published, the destination is staging if 0, and live if 1
              * `BIT ORDER (little-endian)`: 9, `FLAG`: Staged, `DESCRIPTION`: The item has been pushed to the staging publishing target
              * `BIT ORDER (little-endian)`: 10, `FLAG`: Live, `DESCRIPTION`: The item has been pushed to the live publishing target
              * `BIT ORDER (little-endian)`: 11, `FLAG`: Disabled, `DESCRIPTION`: The item has been disabled
              * `BIT ORDER (little-endian)`: 12, `FLAG`: Reserved 12, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 13, `FLAG`: Reserved 11, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 14, `FLAG`: Reserved 10, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 15, `FLAG`: Reserved 9, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 16, `FLAG`: Reserved 8, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 17, `FLAG`: Reserved 7, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 18, `FLAG`: Reserved 6, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 19, `FLAG`: Reserved 5, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 20, `FLAG`: Reserved 4, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 21, `FLAG`: Reserved 3, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 22, `FLAG`: Reserved 2, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 23, `FLAG`: Reserved 1, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 24, `FLAG`: Translation Up To Date, `DESCRIPTION`: This item is a translation of another and it’s up to date
              * `BIT ORDER (little-endian)`: 25, `FLAG`: Translation Pending, `DESCRIPTION`: This item is a translation of another and it’s pending translation
              * `BIT ORDER (little-endian)`: 26, `FLAG`: Translation in Progress, `DESCRIPTION`: This item is a translation of another and is currently being translated
        lockOwner:
          type: string
          description: username of user that locked item for editing
        localeCode:
          type: string
          description: locale of content item
        translationSourceId:
          type: string
          description: ID of content item that is original for translation that current item represents
      required:
        - id
        - label
        - contentTypeId
        - path
        - previewUrl
        - systemType
        - mimeType
        - state
        - lockOwner
        - localeCode

#    TranslationConfig:
#      type: object
#      properties:
#        localeCodes:
#          type: array
#          description: List of codes for the supported locales
#          items:
#            type: string
#        defaultLocaleCode:
#          type: string
#          description: The code of the default locale for all new content

    ContentValidationRequest:
      type: object
      properties:
        actions:
          type: array
          description: The list of actions to verify
          items:
            type: object
            properties:
              type:
                type: string
                description: >
                  The type of action, possible values: CREATE, RENAME, MOVE, COPY
              source:
                type: string
                description: The source value, only needed for recursive COPY, MOVE and RENAME actions
              target:
                type: string
                description: The target value
              recursive:
                type: boolean
                description: Indicates if all child items should be verified too
                default: false
              contentMetadata:
                type: object
                properties:
                  fileSize:
                    type: integer
                    format: int64
                    description: The size of the file in bytes, only needed for CREATE actions
                  contentType:
                    type: string
                    description: The id of the crafter content type, only needed for CREATE actions
            required:
              - type
              - target
      required:
        - siteId
        - actions

    ContentValidationResult:
      type: object
      properties:
        actions:
          type: array
          description: The list of results
          items:
            type: object
            properties:
              type:
                type: string
                description: The type of action
              target:
                type: string
                description: The target value
              allowed:
                type: boolean
                description: Indicates if the operation is allowed
              modifiedValue:
                type: string
                description: The adjusted value if available
              message:
                type: string
                description: A detail message for the validation result

    ChildrenByPathRequest:
      type: object
      properties:
        path:
          description: item path to get children for
          type: string
        localeCode:
          description: |-
            filter children by locale code, or show source items (not translation) if translation to
            specified locale code does not exist
          type: string
        sortStrategy:
          description: >-
            sort strategy (sort order)
            Possible values:
              - alphabetical (default)
              - foldersFirst (order by: folders alphabetical, files alphabetical)
              - lastUpdated (order by: dateModified)
          type: string
        order:
          description: order for sort strategy ascending or descending (ASC / DESC)
          type: string
          format: ASC, DESC
        offset:
          description: offset of first child in response - default 0
          type: integer
        limit:
          description: number of children to return
          type: integer
        keyword:
          description: filter children by keyword
          type: string
        systemTypes:
          description: |-
            filter children by system type

            Note that this parameter does not honor "levelDescriptor" as a valid type
          type: array
          items:
            type: string
        excludes:
          description: exclude items by path
          type: array
          items:
            type: string

    PasteItem:
      type: object
      properties:
        path:
          type: string
          description: The path of the item
        children:
          type: array
          description: The child items
          items:
            $ref: '#/components/schemas/PasteItem'
      required:
        - path

    PasteRequest:
      type: object
      properties:
        siteId:
          type: string
          description: The id of the site
        operation:
          type: string
          description: Indicate the type of operation
          enum:
            - COPY
            - CUT
        targetPath:
          type: string
          description: The target path for the operation
        item:
          $ref: '#/components/schemas/PasteItem'
      required:
        - siteId
        - target
        - item

    AccessToken:
      type: object
      properties:
        token:
          type: string
          description: Value of the access token, only visible when the token is created
        expiresAt:
          type: string
          format: date-time
          description: Date of expiration of the access token
        id:
          type: integer
          format: int64
          description: Id of the access token
        label:
          type: string
          description: The label of the access token
        enabled:
          type: boolean
          description: Indicates if the access token is enabled
        createdOn:
          type: string
          format: date-time
          description: Date of creation of the access token

    WorkflowPackage:
      type: object
      properties:
        id:
          type: string
          description: workflow package ID
        siteId:
          type: string
          description: site identifier
        status:
          type: string
          description: workflow package status
        author:
          type: string
          description: username of the author
        reviewer:
          type: string
          description: username of the reviewer
        schedule:
          type: string
          format: datetime
          description: scheduled date and time to publish the package
        publishingTarget:
          type: string
          description: name of the publishing target where package will be published
        authorComment:
          type: string
          description: author's comment
        reviewerComment:
          type: string
          description: reviewer's comment
        label:
          type: string
          description: user friendly label for package
      required:
        - id
        - siteId
        - status
        - author
        - publishingTarget

    Activity:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: activity ID
        person:
          $ref: '#/components/schemas/Person'
        actionType:
          type: string
          description: >-
            operation performed by user
              * CREATE
              * UPDATE
              * DELETE
              * MOVE
              * REQUEST_PUBLISH
              * APPROVE
              * APPROVE_SCHEDULED
              * REJECT
              * REVERT
              * PUBLISH
              * INITIAL_PUBLISH
              * UNKNOWN
        item:
          type: object
          description: item that operation was performed against
          properties:
            id:
              type: integer
              format: int64
              description: The id of the item
            path:
              type: string
              description: The path of the item
            label:
              type: string
              description: The label of the item
            previewUrl:
              type: string
              description: The preview URL of the item
        package:
          type: object
          description: package that operation was performed against
          properties:
            id:
              type: string
              format: UUID
              description: The id of the package
      required:
        - id
        - person
        - actionType

    Person:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: user ID
        username:
          type: string
          description: user's username
        firstName:
          type: string
          description: user's first name
        lastName:
          type: string
          description: user's last name
        avatar:
          type: string
          format: CLOB
          description: user's avatar
      required:
        - id
        - username
        - firstName
        - lastName

    DashboardPublishingPackage:
      type: object
      properties:
        id:
          type: string
          format: UUID
          description: package id
        label:
          type: string
          description: user friendly name of the package
        comment:
          type: string
          description: submission comment by publisher
        submitter:
          $ref: '#/components/schemas/Person'
        size:
          type: integer
          format: int32
          description: number of items in the package
        publishingTarget:
          type: string
          description: publishing target where package will be published
        schedule:
          type: string
          format: date-time
          description: date and time when package will be published
      required:
        - id
        - label
        - submitter
        - size
        - publishingTarget

    PublishingStats:
      type: object
      properties:
        numberOfPublishes:
          type: integer
          format: int32
          description: Number of published content for given unit of time
        numberOfNewAndPublishedItems:
          type: integer
          format: int32
          description: Number of newly created and published items for given unit of time
        numberOfEditedAndPublishedItems:
          type: integer
          format: int32
          description: Number of edited and published items for given unit of time
      required:
        - numberOfPublishes
        - numberOfNewAndPublishedItems
        - numberOfEditedAndPublishedItems

    LoggerConfig:
      type: object
      properties:
        name:
          type: string
          description: the logger name
        level:
          type: string
          description: the logger priority level (off|error|warn|info|debug|trace|all)
      required:
        - name
        - level

    LoggerConfigRequest:
      allOf:
        - $ref: '#/components/schemas/LoggerConfig'
        - type: object
          properties:
            createIfAbsent:
              type: boolean
              description: if true, the logger will be created in case it does not exist yet.
                If false, a 404 status code will be returned if logger is not in the registry.

    ItemVersion:
      type: object
      properties:
        versionNumber:
          type: string
          description: the commit id
        path:
          type: string
          description: the path of the item
        oldPath:
          type: string
          description: the old path of the item (will be the same as path if the item has not been renamed)
        committer:
          type: string
          description: the committer of the commit according to git log
        author:
          $ref: '#/components/schemas/Person'
          description: corresponds to the Studio user author of the commit (if any)
        comment:
          type: string
          description: the comment of the commit
        revertible:
          type: boolean
          description: true if a revert to this version will be allowed
        modifiedDate:
          type: string
          format: date-time
          description: the date of the commit

    DuplicateSiteRequest:
      type: object
      properties:
        siteName:
          type: string
          description: The name of the new site
        siteId:
          type: string
          description: The ID of the new site
        description:
          type: string
          description: The description of the new site
        sandboxBranch:
          type: string
          description: The sandbox branch to be used in the new site sandbox repository
        readOnlyBlobStores:
          type: boolean
          description: If true, the blob stores will be read-only in the copied site.
          default: false

    ContentType:
      type: object
      properties:
        name:
          type: string
          description: The site content name
        label:
          type: string
          description: The content type display name
        form:
          type: string
          description: The content type form
        formPath:
          type: string
          description: The content type form path
        type:
          type: string
          description: The type, e.g. page, component, etc
        contentAsFolder:
          type: boolean
          description: "Indicates whether to create content in a folder wrapper e.g. pageUrl: 101 means 101\\/index.xml instead of 101.xml"
        useRoundedFolder:
          type: boolean
          description: Indicates whether use rounded folder to arrange content
        modelInstancePath:
          type: string
          description: The path to the model instance file (WCM)
        allowedRoles:
          type: array
          items:
            type: string
          description: The list of roles allowed
        lastUpdated:
          type: string
          description: The date the content type was last updated
        copyDependencyPattern:
          type: array
          items:
            type: string
          description: The list of copy association patterns
        imageThumbnail:
          type: string
          description: The thumbnail image file to be displayed
        noThumbnail:
          type: boolean
          description: Indicates whether content type has a thumbnail
        pathIncludes:
          type: array
          items:
            type: string
          description: The the list of included paths
        pathExcludes:
          type: array
          items:
            type: string
          description: The the list of excluded paths
        nodeRef:
          type: string
          description: The configuration noderef this content type is associated with
        quickCreate:
          type: boolean
          description: Indicates whether the content type is available from the quick create button
        quickCreatePath:
          type: string
          description: The destination path pattern of content type
        deleteDependencyPattern:
          type: array
          items:
            type: string
          description: The list of delete association patterns that this content type is dependent on for deleting indexes in webproject
        previewable:
          type: boolean
          description: Indicates whether the content type is previewable

    ContentItemV1:
      type: object
      properties:
        name:
          type: string
          description: The item name
        internalName:
          type: string
          description: The item internal name
        contentType:
          type: string
          description: The item content type
        uri:
          type: string
          description: The content type uri
        path:
          type: string
          description: The content type form path
        browserUri:
          type: string
        navigation:
          type: boolean
        floating:
          type: boolean
        hideInAuthoring:
          type: boolean
        previewable:
          type: boolean
        lockOwner:
          type: string
        user:
          type: string
        userFirstName:
          type: string
        userLastName:
          type: string
        nodeRef:
          type: string
        metaDescription:
          type: string
        site:
          type: string
        page:
          type: boolean
        component:
          type: boolean
        document:
          type: boolean
        asset:
          type: boolean
        isContainer:
          type: boolean
        container:
          type: boolean
        disabled:
          type: boolean
        savedAsDraft:
          type: boolean
        submitted:
          type: boolean
        submittedForDeletion:
          type: boolean
        scheduled:
          type: boolean
        published:
          type: boolean
        deleted:
          type: boolean
        inProgress:
          type: boolean
        live:
          type: boolean
        inFlight:
          type: boolean
        isDisabled:
          type: boolean
        isSavedAsDraft:
          type: boolean
        isInProgress:
          type: boolean
        isLive:
          type: boolean
        isSubmittedForDeletion:
          type: boolean
        isScheduled:
          type: boolean
        isPublished:
          type: boolean
        isNavigation:
          type: boolean
        isDeleted:
          type: boolean
        isNew:
          type: boolean
        isSubmitted:
          type: boolean
        isFloating:
          type: boolean
        isPage:
          type: boolean
        isPreviewable:
          type: boolean
        isComponent:
          type: boolean
        isDocument:
          type: boolean
        isAsset:
          type: boolean
        isInFlight:
          type: boolean
        eventDate:
          type: string
        endpoint:
          type: string
        timezone:
          type: string
        numOfChildren:
          type: number
        scheduledDate:
          type: string
        publishedDate:
          type: string
        mandatoryParent:
          type: string
        isLevelDescriptor:
          type: boolean
        categoryRoot:
          type: string
        lastEditDate:
          type: string
        form:
          type: string
        formPagePath:
          type: string
        renderingTemplates:
          type: array
          items:
            type: string
        folder:
          type: boolean
        submissionComment:
          type: string
        components:
          type: string
        documents:
          type: string
        levelDescriptors:
          type: string
        pages:
          type: string
        parentPath:
          type: string
        orders:
          type: array
          items:
            $ref: '#/components/schemas/ContentItemOrder'
        children:
          type: array
          items:
            $ref: '#/components/schemas/ContentItemV1'
        size:
          type: number
        sizeUnit:
          type: string
        mimeType:
          type: string
        levelDescriptor:
          type: boolean
        newFile:
          type: boolean
        reference:
          type: boolean
        new:
          type: boolean

    ContentItemOrder:
      type: object
      properties:
        name:
          type: string
          description: The item name
        id:
          type: string
          description: The item id
        disabled:
          type: string
          description: Indicates whether the item is disabled
        order:
          type: string
          description: The item's order
        placeInNav:
          type: string
          description: Indicates whether the item is placed in the navigation

    ContentItemVersions:
      type: object
      properties:
        lastModifiedDate:
          type: string
          description: The item's last modified date
        lastModifier:
          type: string
          description: The user that last modified the item
        versionNumber:
          type: string
          description: The item's version number
        contentItem:
          type: string
          description: The item content
        comment:
          type: string
          description: The comment

    WriteContentWebForm:
      type: object
      properties:
        site_id:
          type: string
          description: Project/Site to use
          example: mysite
        path:
          type: string
          description: Path of the content
          example: /site/website/index.xml
        fileName:
          type: string
          description: File name of the content
          example: index.xml
        contentType:
          type: string
          description: Content type of the content
          example: /page/home
        edit:
          type: string
          description: True if it is edit, otherwise it is create
          example: index.xml
        user:
          type: string
          description: User that executes action
          example: admin
        oldContentPath:
          type: string
          description: If renaming, content old path
        draft:
          type: string
          description: True if saving as draft
        unlock:
          type: string
          description: False to keep content locked, otherwise true
          example: "true"
      required:
        - site_id
        - path
        - fileName
        - contentType
        - unlock

    WriteContentAssetForm:
      type: object
      properties:
        site:
          type: string
          description: Project/Site to use
          example: mysite
        path:
          type: string
          description: Path of the content
          example: /site/website/index.xml
        fileName:
          type: string
          description: File name of the content
          example: index.xml
        contentType:
          type: string
          description: Content type of the content
          example: /page/home
        user:
          type: string
          description: User that executes action
          example: admin
        isImage:
          type: string
          description: True if it is image
        allowedWidth:
          type: integer
          description: Allowed image width
        allowedHeight:
          type: integer
          description: Allowed image height
        allowLessSize:
          type: string
          description: Allow less size
        draft:
          type: string
          description: True if saving as draft
        unlock:
          type: string
          description: false to keep content locked, otherwise true
        systemAsset:
          type: string
          description: true if it is private asset
      required:
        - site
        - path
        - fileName
        - unlock

    WriteContentFileUpload:
      type: object
      properties:
        site:
          type: string
          description: Project/Site to use
          example: mysite
        path:
          type: string
          description: Path of the content
          example: /site/website/index.xml
        fileName:
          type: string
          description: File name of the content
          example: index.xml
        contentType:
          type: string
          description: Content type of the content
          example: /page/home
        user:
          type: string
          description: User that executes action
          example: admin
        isImage:
          type: string
          description: True if it is image
        allowedWidth:
          type: integer
          description: Allowed image width
        allowedHeight:
          type: integer
          description: Allowed image height
        allowLessSize:
          type: string
          description: Allow less size
        draft:
          type: string
          description: True if saving as draft
        unlock:
          type: string
          description: false to keep content locked, otherwise true
      required:
        - site
        - path
        - fileName
        - unlock

    AvailableLanguage:
      type: object
      properties:
        id:
          type: string
          description: The language code, e.g. ja
        label:
          type: string
          description: The language display name

    GitLog:
      type: object
      properties:
        log:
          type: array
          items:
            type: object
            properties:
              commit:
                type: string
                description: The commit id
              author:
                type: string
                description: The author of the commit
              timestamp:
                type: string
                format: date-time
                description: The commit timestamp
              comment:
                type: string
                description: The commit comment

  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              response:
                $ref: '#/components/schemas/ApiResponse'
    Conflict:
      description: Resource already exists
      content:
        application/json:
          schema:
            type: object
            properties:
              response:
                $ref: '#/components/schemas/ApiResponse'
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            type: object
            properties:
              result:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              response:
                $ref: '#/components/schemas/ApiResponse'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              response:
                $ref: '#/components/schemas/ApiResponse'
    RequestTimeout:
      description: Request Timeout (408)
      content:
        application/json:
          schema:
            type: object
            properties:
              response:
                $ref: '#/components/schemas/ApiResponse'
    InternalServerError:
      description: Internal system failure
      content:
        application/json:
          schema:
            type: object
            properties:
              response:
                $ref: '#/components/schemas/ApiResponse'
    ServiceUnavailable:
      description: Service unavailable (503)
      content:
        application/json:
          schema:
            type: object
            properties:
              response:
                $ref: '#/components/schemas/ApiResponse'
    api1OK:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: "OK"
    api1NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: "Site not found"
    api1BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            invalidParameter:
              value:
                message: "Invalid parameter: site_id"
            pathMissing:
              value:
                message: "Path must be provided"
            siteMissing:
              value:
                message: "Site must be provided"
    api1Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: "Forbidden"
    api1Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: "Unauthorized"
    api1Conflict:
      description: Resource already exists
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: "Site already exists"
    api1InternalServerError:
      description: Internal system failure
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: "Internal server error. ACTUAL_EXCEPTION"
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    basicAuth:
      type: http
      scheme: basic
  links: {}
  callbacks: {}
security:
  - jwtAuth: []
  - basicAuth: []
