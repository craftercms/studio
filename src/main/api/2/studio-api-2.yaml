openapi: 3.0.0
servers:
  - url: 'http://localhost:8080/studio/api/2'
info:
  description: |-
    Crafter Studio API v2
  version: '2.0.13'
  title: Crafter Studio
  termsOfService: ''
  contact:
    email: info@craftercms.org
  license:
    name: GPL 3.0
    url: 'https://www.gnu.org/licenses/gpl-3.0.en.html'
externalDocs:
  description: Crafter CMS - Studio
  url: 'https://docs.craftercms.org/en/3.0/developers/projects/studio/index.html'
tags:
  - name: groups
    description: Group management operations
  - name: users
    description: User management operations
  - name: ui
    description: UI support operations
  - name: aws
    description: AWS operations
  - name: cluster
    description: Cluster management operations
  - name: site
    description: Site management operations
paths:

  /groups:
    get:
      tags:
        - groups
      summary: Get all groups
      operationId: getGroups
      description: 'Required Permission: "READ_GROUPS"'
      parameters:
        - name: offset
          in: query
          description: Offset of first group in the response
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Number of groups to return
          required: false
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: |-
            The fields to use for sorting, plus the `asc` or `desc` keyword. Multiple fields are separated by
            commas. Finally, the value should match the following regex: `([a-zA-Z_][a-zA-Z_0-9]*,?)+ (asc|desc)`?
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  groups:
                    type: array
                    items:
                      $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - groups
      summary: Create group
      description: 'Required Permission: "CREATE_GROUPS"'
      operationId: createGroup
      requestBody:
        description: Group entity to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  group:
                    $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - groups
      summary: Update group
      description: 'Required Permission: "UPDATE_GROUPS"'
      operationId: updateGroup
      requestBody:
        description: Group entity to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  group:
                    $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - groups
      summary: Delete group(s)
      description: 'Required Permission: "DELETE_GROUPS"'
      operationId: deleteGroup
      parameters:
        - name: id
          in: query
          description: The group ID(s). Can be repeated for multiple deletes (id=1&id=2&id=3)
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /groups/{id}:
    get:
      tags:
        - groups
      summary: Get group by ID
      description: 'Required Permission: "READ_GROUPS"'
      operationId: getGroup
      parameters:
        - name: id
          in: path
          description: The group ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  group:
                    $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /groups/{id}/members:
    get:
      tags:
        - groups
      summary: Get all the members of the specified group
      description: 'Required Permission: "READ_GROUPS"'
      operationId: getGroupMembers
      parameters:
        - name: id
          in: path
          description: The group ID
          required: true
          schema:
            type: integer
            format: int64
        - name: offset
          in: query
          description: Offset of first record in the response
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Number of records to return
          required: false
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: |-
            The fields to use for sorting, plus the `asc` or `desc` keyword. Multiple fields are separated by
            commas. Finally, the value should match the following regex: `([a-zA-Z_][a-zA-Z_0-9]*,?)+ (asc|desc)`?
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - groups
      summary: Add member(s) to the specified group
      description: 'Required Permission: "UPDATE_GROUPS"'
      operationId: addGroupMembers
      parameters:
        - name: id
          in: path
          description: The group ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: List of user IDs and/or usernames to add
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: string
                usernames:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - groups
      summary: |-
        Remove member(s) from the specified group
      description: 'Required Permission: "DELETE_GROUPS"'
      operationId: removeGroupMembers
      parameters:
        - name: id
          in: path
          description: The group ID
          required: true
          schema:
            type: integer
            format: int64
        - name: userId
          in: query
          description: The user ID(s) to remove. Can be repeated for multiple deletes (userId=1&userId=2&userId=3)
          required: false
          schema:
            type: array
            items:
              type: string
        - name: username
          in: query
          description: The username(s) to remove. Can be repeated for multiple deletes (username=john&username=mark)
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users:
    get:
      tags:
        - users
      summary: Get all users
      description: 'Required Permission: "READ_USERS"'
      operationId: getUsers
      parameters:
        - name: site
          in: query
          description: The site ID to filter users for a particular site
          required: false
          schema:
            type: string
        - name: offset
          in: query
          description: Offset of first record in the response
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Number of records to return
          required: false
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: |-
            The fields to use for sorting, plus the `asc` or `desc` keyword. Multiple fields are separated by
            commas. Finally, the value should match the following regex: `([a-zA-Z_][a-zA-Z_0-9]*,?)+ (asc|desc)`?
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - users
      summary: Create user
      description: 'Required Permission: "CREATE_USERS"'
      operationId: createUser
      requestBody:
        description: User entity to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  users:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - users
      summary: Update user
      description: 'Required Permission: "UPDATE_USERS"'
      operationId: updateUser
      requestBody:
        description: User entity to update. The `password` and `externallyManaged` fields will be ignored if sent.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - users
      summary: Delete user(s)
      description: 'Required Permission: "DELETE_USERS"'
      operationId: deleteUser
      parameters:
        - name: id
          in: query
          description: The user ID(s). Can be repeated for multiple deletes (id=1&id=2&id=3)
          required: false
          schema:
            type: array
            items:
              type: string
        - name: username
          in: query
          description: The username(s). Can be repeated for multiple deletes (username=john&username=mark)
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}:
    get:
      tags:
        - users
      summary: Get user by user ID or username
      description: 'Required Permission: "READ_USERS"'
      operationId: getUser
      parameters:
        - name: id
          in: path
          description: The user ID. Username can also be used
          required: true
          schema:
            type: string
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/enable:
    patch:
      tags:
        - users
      summary: Enable user(s)
      description: 'Required Permission: "UPDATE_USERS"'
      operationId: enableUser
      requestBody:
        description: List of user IDs and/or usernames to enable
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: string
                usernames:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/disable:
    patch:
      tags:
        - users
      summary: Disable user(s)
      description: 'Required Permission: "UPDATE_USERS"'
      operationId: disableUser
      requestBody:
        description: List of user IDs and/or usernames to disable
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: string
                usernames:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}/sites:
    get:
      tags:
        - users
      summary: Get all the sites the specified user has access to
      description: 'Required Permission: "READ_USERS"'
      operationId: getUserSites
      parameters:
        - name: id
          in: path
          description: The user ID. Username can also be used
          required: true
          schema:
            type: string
        - name: offset
          in: query
          description: Offset of first site in the response
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Number of sites to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  sites:
                    type: array
                    items:
                      $ref: '#/components/schemas/Site'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}/sites/{site}/roles:
    get:
      tags:
        - users
      summary: Get the site roles for the specified user
      description: 'Required Permission: "READ_USERS"'
      operationId: getUserSiteRoles
      parameters:
        - name: id
          in: path
          description: The user ID. Username can also be used
          required: true
          schema:
            type: string
        - name: site
          in: path
          description: The site ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  roles:
                    type: array
                    items:
                      type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me:
    get:
      tags:
        - users
      summary: Get current authenticated user
      description: 'Required Permission: "LOGGED_IN"'
      operationId: getCurrentUser
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  authenticatedUser:
                    $ref: '#/components/schemas/AuthenticatedUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me/sites:
    get:
      tags:
        - users
      summary: Get all the sites the current authenticated user has access to
      description:  'Required Permission: "LOGGED_IN"'
      operationId: getCurrentUserSites
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  sites:
                    type: array
                    items:
                      $ref: '#/components/schemas/Site'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me/sites/{site}/roles:
    get:
      tags:
        - users
      summary: Get the site roles for the current authenticated user
      description: 'Required Permission: "LOGGED_IN"'
      operationId: getCurrentUserSiteRoles
      parameters:
        - name: site
          in: path
          description: The site ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  roles:
                    type: array
                    items:
                      type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me/logout/sso/url:
    get:
      tags:
        - users
      summary: Get the SSO Service Provide logout URL for the current authenticated user
      description: |-
        * Required Permission: "LOGGED_IN"
        * The system should redirect to this logout URL `AFTER` local logout. Response entity can be null if user is
        not authenticated through SSO or if logout is disabled
      operationId: getCurrentUserSsoLogoutUrl
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  logoutUrl:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /ui/views/global_menu:
    get:
      tags:
        - ui
      summary: Get the global menu items available to the current user
      operationId: getGlobalMenu
      description: 'Required Permission: "LOGGED_IN"'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  menuItems:
                    type: array
                    items:
                      $ref: '#/components/schemas/MenuItem'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /ui/system/active_environment:
    get:
      tags:
        - ui
      summary: Get the current active environment for the system
      operationId: getActiveEnv
      description: 'Required Permission: "LOGGED_IN"'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  environment:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /aws/s3/list:
    get:
      tags:
        - aws
      summary: Get a list of items from an S3 bucket
      operationId: listItems
      description: 'Required Permission: "LOGGED_IN"'
      parameters:
        - name: siteId
          in: query
          description: The site ID
          required: true
          schema:
            type: integer
            format: int64
        - name: profileId
          in: query
          description: The profile ID
          required: true
          schema:
            type: integer
            format: int64
        - name: path
          in: query
          description: The path of the directory to list (defaults to the root)
          required: false
          schema:
            type: string
        - name: type
          in: query
          description: The type of items to list (defaults to all types)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/S3Item'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /aws/s3/upload:
    post:
      tags:
        - aws
      summary: Upload a file to an S3 bucket
      operationId: uploadItem
      description: 'Required Permission: "LOGGED_IN"'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: The site ID
                profileId:
                  type: string
                  description: The profile ID
                path:
                  type: string
                  description: The path where the file will be uploaded (will be used as part of the key in S3)
                filename:
                  type: string
                  description: The name of the file (will be used as part of the item key in S3)
                file:
                  type: string
                  format: binary
                  description: The content of the file to upload
              required:
                - siteId
                - profileId
                - filename
                - file
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  item:
                    $ref: '#/components/schemas/S3Item'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /cluster:
    get:
      tags:
        - cluster
      summary: Get all the members of the cluster
      description: 'Required Permission: "READ_CLUSTER"'
      operationId: getClusterMembers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  clusterMembers:
                    type: array
                    items:
                      $ref: '#/components/schemas/ClusterMember'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - cluster
      summary: Remove member(s) from the cluster
      description: 'Required Permission: "DELETE_CLUSTER"'
      operationId: removeClusterMembers
      parameters:
        - name: id
          in: query
          description: The cluster member ID(s). Can be repeated for multiple deletes (id=1&id=2&id=3)
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      response:
                        $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /site/available-blueprints:
    get:
      tags:
        - site
      summary: Get all available blueprints
      description: 'Required Permission: "LOGGED_IN"'
      operationId: availableBlueprints
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  blueprints:
                    type: array
                    items:
                      $ref: '#/components/schemas/BlueprintWrapper'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    ApiResponse:
      type: object
      description: |-
        The response of an API operation. Possible responses are:
          * `CODE:` 0, `MESSAGE:` OK
          * `CODE:` 1, `MESSAGE:` Created
          * `CODE:` 2, `MESSAGE:` Deleted
          * `CODE:` 1000, `MESSAGE:` Internal system failure, `REMEDIAL ACTION:` Contact support
          * `CODE:` 1001, `MESSAGE:` Invalid parameter(s), `REMEDIAL ACTION:` Check API and make sure you're sending the correct parameters
          * `CODE:` 2000, `MESSAGE:` Unauthenticated, `REMEDIAL ACTION:` Please login first
          * `CODE:` 2001, `MESSAGE:` Unauthorized, `REMEDIAL ACTION:` You don't have permission to perform this task, please contact your administrator
          * `CODE:` 3000, `MESSAGE:` Organization not found, `REMEDIAL ACTION:` Check if you sent in the right Org Id
          * `CODE:` 3000, `MESSAGE:` Organization already exists, `REMEDIAL ACTION:` Try a different organization name
          * `CODE:` 4000, `MESSAGE:` Group not found, `REMEDIAL ACTION:` Check if you sent in the right Group Id
          * `CODE:` 5000, `MESSAGE:` Project not found, `REMEDIAL ACTION:` Check if you sent in the right Project Id
          * `CODE:` 5001, `MESSAGE:` Project already exists, `REMEDIAL ACTION:` Try a different project name
          * `CODE:` 6000, `MESSAGE:` User not found, `REMEDIAL ACTION:` Check if you're using the correct User ID
          * `CODE:` 6001, `MESSAGE:` User already exists, `REMEDIAL ACTION:` Try a different username
          * `CODE:` 6002, `MESSAGE:` User is externally managed, `REMEDIAL ACTION:` Update the user in the main identity system (e.g. LDAP)
          * `CODE:` 7000, `MESSAGE:` Content not found, `REMEDIAL ACTION:` Check if you sent in the right Content Id
          * `CODE:` 7001, `MESSAGE:` Content already exists, `REMEDIAL ACTION:` Advise the user that the content already exists
          * `CODE:` 8000, `MESSAGE:` Publishing is disabled, `REMEDIAL ACTION:` Advise the user to enable publishing
          * `CODE:` 9000, `MESSAGE:` Search is unreachable, `REMEDIAL ACTION:` Advise the user that the search engine is not reachable
          * `CODE:` 10000, `MESSAGE:` LoV not found, `REMEDIAL ACTION:` Check if you sent in the right LoV Id
          * `CODE:` 11000, `MESSAGE:` Cluster member not found, `REMEDIAL ACTION:` Check if you sent in the right Cluster Member Id
          * `CODE:` 11001, `MESSAGE:` Cluster member already exists, `REMEDIAL ACTION:` Get the list of cluster members to validate
          * `CODE:` 50000, `MESSAGE:` CMIS server is unreachable, `REMEDIAL ACTION:` Advise the user that the CMIS server is not reachable
          * `CODE:` 51000, `MESSAGE:` Box is unreachable, `REMEDIAL ACTION:` Advise the user that Box is not reachable
          * `CODE:` 52000, `MESSAGE:` AWS is unreachable, `REMEDIAL ACTION:` Advise the user that AWS engine is not reachable
      properties:
        code:
          type: integer
          format: int32
          description: The response code
        message:
          type: string
          description: The detailed message of the response
        remedialAction:
          type: string
          description: What the user can do in order to address the issue indicated by the response
        documentationUrl:
          type: string
          description: A URL to documentation related to the response
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: 'User ID, unique and immutable'
        username:
          type: string
          description: Username, unique
        password:
          type: string
          description: User's password (not returned to caller)
        firstName:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
        email:
          type: string
          description: User's email address
        enabled:
          type: boolean
          description: Indicates if the user is enabled
        externallyManaged:
          type: boolean
          description: Indicates if a user is managed in by an external system (LDAP, SAML, etc.)
    AuthenticatedUser:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: 'User ID, unique and immutable'
        username:
          type: string
          description: Username, unique
        firstName:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
        email:
          type: string
          description: User's email address
        enabled:
          type: boolean
          description: Indicates if the user is enabled
        externallyManaged:
          type: boolean
          description: Indicates if a user is managed in by an external system (LDAP, SAML, etc.)
        authenticationType:
          type: string
          description: |-
            The authentication type used to log in the user. Possible values are: DB, LDAP, AUTH_HEADERS
    Group:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: 'Group ID, unique and immutable'
        name:
          type: string
          description: 'Group name, unique'
        desc:
          type: string
          description: Group description
    Site:
      type: object
      properties:
        siteId:
          type: string
          description: 'Site ID, unique and immutable'
        desc:
          type: string
          description: Site description
    MenuItem:
      type: object
      properties:
        id:
          type: string
          description: 'Menu item ID, unique and immutable'
        label:
          type: string
          description: 'Menu item label'
        icon:
          type: string
          description: 'Menu item icon as a Font Awesome id, example: fa-smile'
    S3Item:
      type: object
      properties:
        name:
          type: string
          description: 'Name of the item'
        url:
          type: string
          description: 'URL of the item'
        folder:
          type: boolean
          description: 'Indicates if the item is a folder'
    ClusterMember:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: 'Cluster Member ID, unique and immutable'
        localIp:
          type: string
          description: 'Cluster Member local IP address, immutable'
        gitUrl:
          type: string
          description: 'Git URL, unique'
        gitRemoteName:
          type: string
          description: 'Git Remote Name, unique'
        gitAuthType:
          type: string
          description: 'Git Auth Type'
        gitUsername:
          type: string
          description: 'Git Username'
        gitPassword:
          type: string
          description: 'Git Password (not returned to caller)'
        gitToken:
          type: string
          description: 'Git Token (not returned to caller)'
        gitPrivateKey:
          type: string
          description: 'Git Private Key (not returned to caller)'
    BlueprintWrapper:
      type: object
      properties:
        descriptorVersion:
          type: integer
          description: 'Blueprint descriptor version number'
        blueprint:
          type: object
          properties:
            id:
              type: string
              format: package name
              description: 'Blueprint id'
            name:
              type: string
              description: 'Blueprint name'
            tags:
              type: string
              description: 'Tags applied for blueprint'
            version:
              type: object
              properties:
                major:
                  type: integer
                  description: 'Major version number'
                minor:
                  type: integer
                  description: 'Minor version number'
                patch:
                  type: integer
                  description: 'Patch version number'
            description:
              type: string
              description: 'Blueprint description'
            website:
              type: object
              properties:
                name:
                  type: string
                  description: 'Blueprint website'
                url:
                  type: string
                  description: 'Blueprint website URL'
            media:
              type: object
              properties:
                screenshots:
                  type: array
                  items:
                    type: object
                    properties:
                      screenshot:
                        type: object
                        properties:
                          title:
                            type: string
                            description: 'Screenshot title'
                          description:
                            type: string
                            description: 'Screenshot description'
                          url:
                            type: string
                            description: 'Screenshot URL'
                videos:
                  type: array
                  items:
                    type: object
                    properties:
                      video:
                        type: object
                        properties:
                          title:
                            type: string
                            description: 'Video title'
                          description:
                            type: string
                            description: 'Video description'
                          url:
                            type: string
                            description: 'Video URL'
                developer:
                  type: object
                  properties:
                    people:
                      type: array
                      items:
                        type: object
                        properties:
                          person:
                            type: object
                            properties:
                              name:
                                type: string
                                description: 'Developer name'
                              email:
                                type: string
                                description: "Developer's email address"
                              url:
                                type: string
                                description: "Developer's website"
                    company:
                      type: object
                      properties:
                        name:
                          type: string
                          description: 'Company name'
                        email:
                          type: string
                          description: "Company's email address"
                        url:
                          type: string
                          description: "Company's website"
            build:
              type: object
              properties:
                id:
                  type: string
                  description: 'Blueprint build ID'
                date:
                  type: string
                  description: 'Bluperint build date'
            license:
              type: object
              properties:
                name:
                  type: string
                  description: 'License name'
                url:
                  type: string
                  description: 'License website URL'
            craftercmsVersionsSupported:
              type: array
              items:
                type: object
                properties:
                  version:
                    type: string
                    description: 'Blueprint supported in Crafter CMS version'
  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              response:
                $ref: '#/components/schemas/ApiResponse'
    Conflict:
      description: Resource already exists
      content:
        application/json:
          schema:
            type: object
            properties:
              response:
                $ref: '#/components/schemas/ApiResponse'
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            type: object
            properties:
              result:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              response:
                $ref: '#/components/schemas/ApiResponse'
    InternalServerError:
      description: Internal system failure
      content:
        application/json:
          schema:
            type: object
            properties:
              response:
                $ref: '#/components/schemas/ApiResponse'
  securitySchemes: {}
  links: {}
  callbacks: {}
security: []
