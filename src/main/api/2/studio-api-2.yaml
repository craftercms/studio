openapi: 3.0.0
servers:
  - url: 'http://localhost:8080/studio/api/2'
info:
  description: |-
    Crafter Studio API v2
  version: '4.0.0.26'
  title: Crafter Studio
  termsOfService: ''
  contact:
    email: info@craftercms.org
  license:
    name: GPL 3.0
    url: 'https://www.gnu.org/licenses/gpl-3.0.en.html'
externalDocs:
  description: CrafterCMS - Studio
  url: 'https://docs.craftercms.org/en/3.1/developers/projects/studio/index.html'
tags:
  - name: groups
    description: Group management operations
  - name: users
    description: User management operations
  - name: ui
    description: UI support operations
  - name: aws
    description: AWS operations
  - name: cluster
    description: Cluster management operations
  - name: sites
    description: Site management operations
  - name: search
    description: Search operations
  - name: audit
    description: Audit log operations
  - name: monitoring
    description: Monitoring operations
  - name: cmis
    description: CMIS operations
  - name: repository
    description: Repository operations
  - name: content
    description: Content operations
  - name: configuration
    description: Configuration operations
  - name: plugin
    description: Plugin operations
  - name: dependency
    description: Dependencies operations
  - name: marketplace
    description: Marketplace operations
  - name: webdav
    description: WebDAV operations
  - name: publishing
    description: Publishing operations
  - name: security
    description: Security operations
  - name: dashboard
    description: Dashboard operations
  - name: translation
    description: Translation operations
  - name: workflow
    description: Workflow operations
  - name: tasks
    description: tasks operations

paths:

  /groups:
    get:
      tags:
        - groups
      summary: Get all groups
      operationId: getGroups
      description: 'Required Permission: "READ_GROUPS"'
      parameters:
        - name: keyword
          in: query
          description: The keyword to filter groups
          required: false
          schema:
            type: string
        - name: offset
          in: query
          description: Offset of first group in the response
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Number of groups to return
          required: false
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: |-
            The fields to use for sorting, plus the `asc` or `desc` keyword. Multiple fields are separated by
            commas. Finally, the value should match the following regex: `([a-zA-Z_][a-zA-Z_0-9]*,?)+ (asc|desc)`?
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  groups:
                    type: array
                    items:
                      $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - groups
      summary: Create group
      description: 'Required Permission: "CREATE_GROUPS"'
      operationId: createGroup
      requestBody:
        description: Group entity to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  group:
                    $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - groups
      summary: Update group
      description: 'Required Permission: "UPDATE_GROUPS"'
      operationId: updateGroup
      requestBody:
        description: Group entity to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  group:
                    $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - groups
      summary: Delete group(s)
      description: 'Required Permission: "DELETE_GROUPS"'
      operationId: deleteGroup
      parameters:
        - name: id
          in: query
          description: The group ID(s). Can be repeated for multiple deletes (id=1&id=2&id=3)
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /groups/{id}:
    get:
      tags:
        - groups
      summary: Get group by ID
      description: 'Required Permission: "READ_GROUPS"'
      operationId: getGroup
      parameters:
        - name: id
          in: path
          description: The group ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  group:
                    $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /groups/{id}/members:
    get:
      tags:
        - groups
      summary: Get all the members of the specified group
      description: 'Required Permission: "READ_GROUPS"'
      operationId: getGroupMembers
      parameters:
        - name: id
          in: path
          description: The group ID
          required: true
          schema:
            type: integer
            format: int64
        - name: offset
          in: query
          description: Offset of first record in the response
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Number of records to return
          required: false
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: |-
            The fields to use for sorting, plus the `asc` or `desc` keyword. Multiple fields are separated by
            commas. Finally, the value should match the following regex: `([a-zA-Z_][a-zA-Z_0-9]*,?)+ (asc|desc)`?
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - groups
      summary: Add member(s) to the specified group
      description: 'Required Permission: "UPDATE_GROUPS"'
      operationId: addGroupMembers
      parameters:
        - name: id
          in: path
          description: The group ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: List of user IDs and/or usernames to add
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: string
                usernames:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - groups
      summary: |-
        Remove member(s) from the specified group
      description: 'Required Permission: "DELETE_GROUPS"'
      operationId: removeGroupMembers
      parameters:
        - name: id
          in: path
          description: The group ID
          required: true
          schema:
            type: integer
            format: int64
        - name: userId
          in: query
          description: The user ID(s) to remove. Can be repeated for multiple deletes (userId=1&userId=2&userId=3)
          required: false
          schema:
            type: array
            items:
              type: string
        - name: username
          in: query
          description: The username(s) to remove. Can be repeated for multiple deletes (username=john&username=mark)
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users:
    get:
      tags:
        - users
      summary: Get all users
      description: 'Required Permission: "READ_USERS"'
      operationId: getUsers
      parameters:
        - name: site
          in: query
          description: The site ID to filter users for a particular site
          required: false
          schema:
            type: string
        - name: keyword
          in: query
          description: The keyword to filter users
          required: false
          schema:
            type: string
        - name: offset
          in: query
          description: Offset of first record in the response
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Number of records to return
          required: false
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: |-
            The fields to use for sorting, plus the `asc` or `desc` keyword. Multiple fields are separated by
            commas. Finally, the value should match the following regex: `([a-zA-Z_][a-zA-Z_0-9]*,?)+ (asc|desc)`?
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - users
      summary: Create user
      description: 'Required Permission: "CREATE_USERS"'
      operationId: createUser
      requestBody:
        description: User entity to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  users:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - users
      summary: Update user
      description: 'Required Permission: "UPDATE_USERS"'
      operationId: updateUser
      requestBody:
        description: User entity to update. The `password` and `externallyManaged` fields will be ignored if sent.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - users
      summary: Delete user(s)
      description: 'Required Permission: "DELETE_USERS"'
      operationId: deleteUser
      parameters:
        - name: id
          in: query
          description: The user ID(s). Can be repeated for multiple deletes (id=1&id=2&id=3)
          required: false
          schema:
            type: array
            items:
              type: string
        - name: username
          in: query
          description: The username(s). Can be repeated for multiple deletes (username=john&username=mark)
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}:
    get:
      tags:
        - users
      summary: Get user by user ID or username
      description: 'Required Permission: "READ_USERS"'
      operationId: getUser
      parameters:
        - name: id
          in: path
          description: The user ID. Username can also be used
          required: true
          schema:
            type: string
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/enable:
    patch:
      tags:
        - users
      summary: Enable user(s)
      description: 'Required Permission: "UPDATE_USERS"'
      operationId: enableUser
      requestBody:
        description: List of user IDs and/or usernames to enable
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: string
                usernames:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/disable:
    patch:
      tags:
        - users
      summary: Disable user(s)
      description: 'Required Permission: "UPDATE_USERS"'
      operationId: disableUser
      requestBody:
        description: List of user IDs and/or usernames to disable
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: string
                usernames:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}/sites:
    get:
      tags:
        - users
      summary: Get all the sites the specified user has access to
      description: 'Required Permission: "READ_USERS"'
      operationId: getUserSites
      parameters:
        - name: id
          in: path
          description: The user ID. Username can also be used
          required: true
          schema:
            type: string
        - name: offset
          in: query
          description: Offset of first site in the response
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Number of sites to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  sites:
                    type: array
                    items:
                      $ref: '#/components/schemas/Site'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}/sites/{site}/roles:
    get:
      tags:
        - users
      summary: Get the site roles for the specified user
      description: 'Required Permission: "READ_USERS"'
      operationId: getUserSiteRoles
      parameters:
        - name: id
          in: path
          description: The user ID. Username can also be used
          required: true
          schema:
            type: string
        - name: site
          in: path
          description: The site ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  roles:
                    type: array
                    items:
                      type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}/reset_password:
    post:
      tags:
        - users
      summary: Change password for user
      description: 'Required Permission: "UPDATE_USERS"'
      operationId: setUserPassword
      parameters:
        - name: id
          in: path
          description: The user ID. Username can also be used
          required: true
          schema:
            type: string
      requestBody:
        description: request body to change password
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                new:
                  type: string
                  description: new password
              required:
                - username
                - new
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/set_password:
    post:
      tags:
        - users
      summary: Change password for user
      description: 'Required Permission: "ANONYMOUS"'
      operationId: settUserPassword
      requestBody:
        description: request body to change password
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                new:
                  type: string
                  description: new password
              required:
                - token
                - new
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me:
    get:
      tags:
        - users
      summary: Get current authenticated user
      description: 'Required Permission: "LOGGED_IN"'
      operationId: getCurrentUser
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  authenticatedUser:
                    $ref: '#/components/schemas/AuthenticatedUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me/sites:
    get:
      tags:
        - users
      summary: Get all the sites the current authenticated user has access to
      description:  'Required Permission: "LOGGED_IN"'
      operationId: getCurrentUserSites
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  sites:
                    type: array
                    items:
                      $ref: '#/components/schemas/Site'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me/sites/{site}/roles:
    get:
      tags:
        - users
      summary: Get the site roles for the current authenticated user
      description: 'Required Permission: "LOGGED_IN"'
      operationId: getCurrentUserSiteRoles
      parameters:
        - name: site
          in: path
          description: The site ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  roles:
                    type: array
                    items:
                      type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me/sites/{site}/permissions:
    get:
      tags:
        - users
      summary: Get the site permissions for the current authenticated user
      description: 'Required Permission: "LOGGED_IN"'
      operationId: getCurrentUserSitePermissions
      parameters:
        - name: site
          in: path
          description: The site ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  'permissions':
                    type: array
                    items:
                      type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me/sites/{site}/has_permissions:
    post:
      tags:
        - users
      summary: Check if the current authenticated user has given permissions
      description: 'Required Permission: "LOGGED_IN"'
      operationId: hasCurrentUserSitePermssions
      parameters:
        - name: site
          in: path
          description: The site ID
          required: true
          schema:
            type: string
      requestBody:
        description: request body to check if current authenticated user has permissions
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                'permissions':
                  type: array
                  items:
                    type: string
              required:
                - permissions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  'permissions':
                    type: object
                    example:
                      create: true
                      update: true
                      delete: false
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me/global/permissions:
    get:
      tags:
        - users
      summary: Get the global for the current authenticated user
      description: 'Required Permission: "LOGGED_IN"'
      operationId: getCurrentUserGlobalPermissions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  'permissions':
                    type: array
                    items:
                      type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me/global/has_permissions:
    post:
      tags:
        - users
      summary: Check if the current authenticated user has given global permissions
      description: 'Required Permission: "LOGGED_IN"'
      operationId: hasCurrentUserGlobalPermssions
      requestBody:
        description: request body to check if current authenticated user has permissions
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                'permissions':
                  type: array
                  items:
                    type: string
              required:
                - permissions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  'permissions':
                    type: object
                    example:
                      create: true
                      update: true
                      delete: false
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me/logout/sso/url:
    get:
      tags:
        - users
      summary: Get the SSO Service Provide logout URL for the current authenticated user
      description: |-
        * Required Permission: "LOGGED_IN"
        * The system should redirect to this logout URL `AFTER` local logout. Response entity can be null if user is
        not authenticated through SSO or if logout is disabled
      operationId: getCurrentUserSsoLogoutUrl
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  logoutUrl:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me/change_password:
    post:
      tags:
        - users
      summary: Change password for current user
      description: 'Required Permission: "LOGGED_IN"'
      operationId: currentUserChangePassword
      requestBody:
        description: request body to change password
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                current:
                  type: string
                  description: current password
                new:
                  type: string
                  description: new password
              required:
                - username
                - current
                - new
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me/properties:
    get:
      tags:
        - users
      summary: Retrieve properties for the current user
      description: 'Required Permission: "LOGGED_IN"'
      operationId: getUserProperties
      parameters:
        - name: siteId
          schema:
            type: string
          in: query
          description: The id of the site (defaults to global)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  properties:
                    type: object
                    additionalProperties:
                      type: object
                      additionalProperties:
                        type: string
                    description: The properties of the current user grouped by site
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - users
      summary: Update properties for the current user
      description: 'Required Permission: "LOGGED_IN"'
      operationId: updateUserProperties
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: The id of the site (defaults to global)
                properties:
                  type: object
                  additionalProperties:
                    type : string
                  description: Properties to update or add
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  properties:
                    type: object
                    additionalProperties:
                      type: string
                    description: |-
                      The properties of the current user after the updates
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - users
      summary: Delete properties for the current user
      description: 'Required Permission: "LOGGED_IN"'
      operationId: deleteUserProperties
      parameters:
        - name: siteId
          in: query
          schema:
            type: string
          description: The id of the site (defaults to global)
        - name: properties
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
          description: List of keys to delete
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  properties:
                    type: object
                    additionalProperties:
                      type: string
                    description: |-
                      The properties of the current user after the updates
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/forgot_password:
    get:
      tags:
        - users
      summary: Forgot password
      description: 'Required Permission: "ANONYMOUS"'
      operationId: forgotPassword
      parameters:
        - name: username
          in: query
          description: The username of user that forgot password
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/validate_token:
    get:
      tags:
        - users
      summary: Validate forgot password token
      description: 'Required Permission: "ANONYMOUS"'
      operationId: validateToken
      parameters:
        - name: token
          in: query
          description: forgot password token to be validated
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /ui/views/global_menu:
    get:
      tags:
        - ui
      summary: Get the global menu items available to the current user
      operationId: getGlobalMenu
      description: 'Required Permission: "LOGGED_IN"'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  menuItems:
                    type: array
                    items:
                      $ref: '#/components/schemas/MenuItem'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /ui/system/active_environment:
    get:
      tags:
        - ui
      summary: Get the current active environment for the system
      operationId: getActiveEnv
      description: 'Required Permission: "LOGGED_IN"'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  environment:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /aws/s3/list:
    get:
      tags:
        - aws
      summary: Get a list of items from an S3 bucket
      operationId: listItems
      description: 'Required Permission: "S3 Read"'
      parameters:
        - name: siteId
          in: query
          description: The site ID
          required: true
          schema:
            type: string
        - name: profileId
          in: query
          description: The profile ID
          required: true
          schema:
            type: string
        - name: path
          in: query
          description: The path of the directory to list (defaults to the root)
          required: false
          schema:
            type: string
        - name: type
          in: query
          description: The type of items to list (defaults to all types)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/S3Item'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /aws/s3/upload:
    post:
      tags:
        - aws
      summary: Upload a file to an S3 bucket
      operationId: uploadItem
      description: 'Required Permission: "S3 Write"'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: The site ID
                profileId:
                  type: string
                  description: The profile ID
                path:
                  type: string
                  description: The path where the file will be uploaded (will be used as part of the key in S3)
                filename:
                  type: string
                  description: The name of the file (will be used as part of the item key in S3)
                file:
                  type: string
                  format: binary
                  description: The content of the file to upload
              required:
                - siteId
                - profileId
                - filename
                - file
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  item:
                    $ref: '#/components/schemas/S3Item'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /aws/mediaconvert/upload:
    post:
      tags:
        - aws
      summary: Upload a file to an S3 bucket and trigger a MediaConvert job
      operationId: uploadVideo
      description: 'Required Permission: "S3 Write"'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: The site ID
                inputProfileId:
                  type: string
                  description: The MediaConvert profile ID
                outputProfileId:
                  type: string
                  description: The S3 profile ID for the generated URLs
                file:
                  type: string
                  format: binary
                  description: The content of the file to upload
              required:
                - siteId
                - inputProfileId
                - outputProfileId
                - file
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  item:
                    $ref: '#/components/schemas/MediaConvertResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /webdav/list:
    get:
      tags:
        - webdav
      summary: Get a list of items from a WebDAV server
      description: 'Required Permission: "webdav_read"'
      operationId: listItemsWebdav
      parameters:
        - name: siteId
          in: query
          description: The site ID
          required: true
          schema:
            type: string
        - name: profileId
          in: query
          description: The profile ID
          required: true
          schema:
            type: string
        - name: path
          in: query
          description: The path of the directory to list (defaults to the root)
          required: false
          schema:
            type: string
        - name: type
          in: query
          description: The type of items to list, defaults to all (possible values are 'image' and 'video')
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/WebDavItem'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /webdav/upload:
    post:
      tags:
        - webdav
      summary: Upload a file to a WebDAV server
      description: 'Required Permission: "webdav_write"'
      operationId: uploadItemWebdav
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: The site ID
                profileId:
                  type: string
                  description: The profile ID
                path:
                  type: string
                  description: The path where the file will be uploaded
                file:
                  type: string
                  format: binary
                  description: The content of the file to upload
              required:
                - siteId
                - profileId
                - file
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  item:
                    $ref: '#/components/schemas/WebDavItem'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /cluster:
    get:
      tags:
        - cluster
      summary: Get all the members of the cluster
      description: 'Required Permission: "READ_CLUSTER"'
      operationId: getClusterMembers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  clusterMembers:
                    type: array
                    items:
                      $ref: '#/components/schemas/ClusterMember'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - cluster
      summary: Remove member(s) from the cluster
      description: 'Required Permission: "DELETE_CLUSTER"'
      operationId: removeClusterMembers
      parameters:
        - name: id
          in: query
          description: The cluster member ID(s). Can be repeated for multiple deletes (id=1&id=2&id=3)
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      response:
                        $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /sites/available_blueprints:
    get:
      tags:
        - sites
      summary: Get all available blueprints
      description: 'Required Permission: "LOGGED_IN"'
      operationId: availableBlueprints
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  blueprints:
                    type: array
                    items:
                      $ref: '#/components/schemas/PluginDescriptor'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /sites/create_site_from_marketplace:
    post:
      tags:
        - sites
      summary: Create a site from a Marketplace blueprint
      operationId: createSite
      requestBody:
        description: The site information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSiteFromMarketplace'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /sites/{siteId}:
    post:
      tags:
        - sites
      summary: Updates the name and description for a given site
      description: 'Required Permission: "EDIT_SITE"'
      operationId: updateSite
      parameters:
        - name: siteId
          in: path
          required: true
          description: The site ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: The name of the site
                  type: string
                description:
                  description: The description of the site
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /sites/{siteId}/policy/validate:
    post:
      tags:
        - sites
      summary: Verifies if all indicated actions are compliant with the site policies
      operationId: validate
      parameters:
        - name: siteId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentValidationRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  result:
                    $ref: '#/components/schemas/ContentValidationResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /search/search:
    post:
      tags:
        - search
      summary: Performs a search for the given site
      operationId: search
      parameters:
        - name: siteId
          in: query
          description: The site ID
          required: true
          schema:
            type: string
      requestBody:
        description: Search Parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchParams'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  result:
                    $ref: '#/components/schemas/SearchResult'

  /audit:
    get:
      tags:
        - audit
      summary: Get audit log
      description: 'Required permission "AUDIT_LOG"'
      operationId: getAuditLog
      parameters:
        - name: siteId
          in: query
          description: Site ID (site identifier) - optional for super admin user, otherwise required
          required: false
          schema:
            type: string
        - name: siteName
          in: query
          description: Site name - optional for super admin user, otherwise required
          required: false
          schema:
            type: string
        - name: offset
          in: query
          description: Offset of first record in the response
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Number of records to return
          required: false
          schema:
            type: integer
            format: int32
        - name: user
          in: query
          description: Filter log by user name
          required: false
          schema:
            type: string
        - name: operations
          in: query
          description: Filter log by operations
          required: false
          schema:
            type: array
            items:
              type: string
        - name: includeParameters
          in: query
          description: Include parameters into result set if `true`. Default `false`
          required: false
          schema:
            type: boolean
        - name: dateFrom
          in: query
          description: Lower boundary in date range query
          required: false
          schema:
            type: string
        - name: dateTo
          in: query
          description: Upper boundary in date range query
          required: false
          schema:
            type: string
        - name: target
          in: query
          description: Regular espression to filter target values
          required: false
          schema:
            type: string
        - name: origin
          in: query
          description: Origin filter for audit log. Possible values `API` and `GIT`
          required: false
          schema:
            type: string
        - name: clusterNodeId
          in: query
          description: Cluster node id filter for audit log
          required: false
          schema:
            type: string
        - name: sort
          in: query
          description: Sort result set by specified field. Possible values `date`.
          required: false
          schema:
            type: string
        - name: order
          in: query
          description: Order in sorted result. Posible values `ASC` and `DESC`
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  auditLog:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuditLog'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /audit/{id}:
    get:
      tags:
        - audit
      summary: Get audiy log entry
      operationId: getAuditLogById
      parameters:
        - name: id
          in: path
          description: The log entry ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  auditLog:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuditLog'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /monitoring/version:
    get:
      tags:
        - monitoring
      summary: Get the current version information
      operationId: getVersion
      parameters:
        - name: token
          in: query
          description: Management token - not required for authenticated users
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  version:
                    $ref: '#/components/schemas/VersionItem'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /monitoring/status:
    get:
      tags:
        - monitoring
      summary: Get the current status information
      operationId: getStatus
      parameters:
        - name: token
          in: query
          description: Management token - not required for authenticated users
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  status:
                    $ref: '#/components/schemas/StatusItem'
        '202':
          description: Replica responding status OK. Primary will respond with status 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  status:
                    $ref: '#/components/schemas/ClusterStatusItem'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /monitoring/memory:
    get:
      tags:
        - monitoring
      summary: Get the current memory information
      operationId: getMemory
      parameters:
        - name: token
          in: query
          description: Management token - not required for authenticated users
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  memory:
                    $ref: '#/components/schemas/MemoryItem'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /monitoring/log:
    get:
      tags:
        - monitoring
      summary: Get the log events for a specific time period
      operationId: getLogEvents
      parameters:
        - name: since
          in: query
          description: The time in milliseconds from which events should be fetched
          required: true
          schema:
            type: integer
            format: int64
        - name: token
          in: query
          description: Management token - not required for authenticated users
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/LogEvent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /cmis/list:
    get:
      tags:
        - cmis
      summary: List files and folders in a CMIS repository with an optional range for pagination
      operationId: cmisList
      description: 'Required permissions: "list_cmis"'
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: cmisRepoId
          in: query
          description: CMIS repository ID as specified in Site Config CMIS Config (cmis-config.xml)
          required: true
          schema:
            type: string
        - name: path
          in: query
          description: path to look under. Note this will be under the `base path` specified in cmis-config.xml
          required: false
          schema:
            type: string
        - name: offset
          in: query
          description: start offset
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: number of records to retrieve
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of the first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/CmisItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '408':
          $ref: '#/components/responses/RequestTimeout'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /cmis/search:
    get:
      tags:
        - cmis
      summary: Search files and folders in a CMIS repository with an optional range for pagination
      operationId: cmisSearch
      description: 'Required permissions: "search_cmis"'
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: cmisRepoId
          in: query
          description: CMIS repository ID as specified in Site Config CMIS Config (cmis-config.xml)
          required: true
          schema:
            type: string
        - name: searchTerm
          in: query
          description: CMIS search term to use
          required: true
          schema:
            type: string
        - name: path
          in: query
          description: path to look under. Note this will be under the `base path` secified in cmis-config.xml
          required: false
          schema:
            type: string
        - name: offset
          in: query
          description: start offset
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: number of records to retrieve
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of the first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/CmisItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '408':
          $ref: '#/components/responses/RequestTimeout'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /cmis/clone:
    post:
      tags:
        - cmis
      summary: Clone a file from a CMIS repository to Studio provided paths
      operationId: cmisClone
      description: 'Required permissions: "clone_content_cmis"'
      requestBody:
        description: cmis clone request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: site ID
                cmisRepoId:
                  type: string
                  description: CMIS repository ID as specified in Site Config CMIS Config (cmis-config.xml)
                cmisPath:
                  type: string
                  description: path to read the asset from CMIS repo (source)
                studioPath:
                  type: string
                  description: path to save the asset in Studio (destination)
              required:
                - siteId
                - cmisRepoId
                - cmisPath
                - studioPath
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '408':
          $ref: '#/components/responses/RequestTimeout'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /cmis/upload:
    post:
      tags:
        - cmis
      summary:  Upload an asset file to CMIS repository
      operationId: cmisUpload
      description: 'Required permissions: "upload_content_cmis"'
      requestBody:
        description: cmis upload request body
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: site ID
                cmisRepoId:
                  type: string
                  description: CMIS repository ID as specified in Site Config CMIS Config (cmis-config.xml)
                cmisPath:
                  type: string
                  description: path to upload the asset to CMIS repo (destination)
                file:
                  type: string
                  format: binary
              required:
                - siteId
                - cmisRepoId
                - cmisPathId
                - file
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  item:
                    type: object
                    properties:
                      name:
                        type: string
                        description: filename of the uploaded content
                      url:
                        type: string
                        description: url of uploaded content
                      folder:
                        type: boolean
                        description: true if content is folder
                      fileExtension:
                        type: string
                        description: file extension of uploaded content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '408':
          $ref: '#/components/responses/RequestTimeout'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /repository/add_remote:
    post:
      tags:
        - repository
      summary: Add remote repository to the site content repository
      description: 'Required permission "add_remote"'
      operationId: addRemoteRepository
      requestBody:
        description: Remote repository entity
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoteRepository'
      responses:
        '201':
          description: Added
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /repository/pull_from_remote:
    post:
      tags:
        - repository
      summary: Pull content from remote repository to site content repository
      description: 'Required permission "pull_from_remote"'
      operationId: pullFromRemoteRepository
      requestBody:
        description: pull from remote repository request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: Site ID
                remoteName:
                  type: string
                  description: Remote repository name to pull from
                remoteBranch:
                  type: string
                  description: Remote repository branch to pull from
                mergeStrategy:
                  type: string
                  format: theirs, ours, none
                  description: Merge strategy to use when pulling content from remote repository
              required:
                - siteId
                - remoteName
                - remoteBranch
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /repository/push_to_remote:
    post:
      tags:
        - repository
      summary: Push content to remote repository from site content repository
      description: 'Required permission "push_to_remote"'
      operationId: pushToRemoteRepository
      requestBody:
        description: push to remote repository request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: Site ID
                remoteName:
                  type: string
                  description: Remote repository name to push to
                remoteBranch:
                  type: string
                  description: Remote repository branch to push to
                force:
                  type: boolean
                  description: Indicates whether to force push to remote or not
              required:
                - siteId
                - remoteName
                - remoteBranch
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /repository/rebuild_database:
    post:
      tags:
        - repository
      summary: Rebuild Crafter Studio’s database and object state with the underlying repository
      description: 'Required permission "rebuild_database"'
      operationId: rebuildDatabase
      requestBody:
        description: rebuild database request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: Site ID
              required:
                - siteId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /repository/remove_remote:
    post:
      tags:
        - repository
      summary: Remove remote repository from site content repository
      description: 'Required permission "remove_remote"'
      operationId: removeRemoteRepository
      requestBody:
        description: remove remote repository request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: Site ID
                remoteName:
                  type: string
                  description: Remote repository name of remote to be removed
              required:
                - siteId
                - remoteName
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /repository/list_remotes:
    get:
      tags:
        - repository
      summary: List remote repositories for a site
      description: 'Required permission "list_remote"'
      operationId: listRemoteRepositories
      parameters:
        - name: siteId
          in: query
          description: Site ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  remotes:
                    type: array
                    items:
                      $ref: '#/components/schemas/RemoteRepositoryInfo'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /repository/status:
    get:
      tags:
        - repository
      summary: Get status of repository for a site
      description: 'Required permission "site_status"'
      operationId: repositoryStatus
      parameters:
        - name: siteId
          in: query
          description: Site ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  repositoryStatus:
                    $ref: '#/components/schemas/RepositoryStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /repository/resolve_conflict:
    post:
      tags:
        - repository
      summary: Resolve a conflict for a file by accepting ours or theirs
      description: 'Required permission "resolve_conflict"'
      operationId: resolveConflict
      requestBody:
        description: resolve conflict request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: site ID
                path:
                  type: string
                  description: Conflicted file path
                resolution:
                  type: string
                  description: resolution mechanism to use (ours, theirs)
              required:
                - siteId
                - path
                - resolution
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  repositoryStatus:
                    $ref: '#/components/schemas/RepositoryStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /repository/diff_conflicted_file:
    get:
      tags:
        - repository
      summary: Get the difference between ours and theirs for a conflicted file for a site
      description: 'Required permission "site_diff_conflicted_file"'
      operationId: diffConflictedFile
      parameters:
        - name: siteId
          in: query
          description: Site ID
          required: true
          schema:
            type: string
        - name: path
          in: query
          description: Path of conflicted file
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  diff:
                    type: object
                    properties:
                      diff:
                        type: string
                        description: difference between ours and theirs
                      studioVersion:
                        type: string
                        description: studio's version of the file content
                      remoteVersion:
                        type: string
                        description: remote repository version of the file content

        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /repository/commit_resolution:
    post:
      tags:
        - repository
      summary: Commit a resolved set of conflicts for a site
      description: 'Required permission "commit_resolution"'
      operationId: commitResolution
      requestBody:
        description: Commit resolution request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: site ID
                commit_message:
                  type: string
                  description: Commit message
              required:
                - siteId
                - commitMessage
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  repositoryStatus:
                    $ref: '#/components/schemas/RepositoryStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /repository/cancel_failed_pull:
    post:
      tags:
        - repository
      summary: Cancel a failed/conflicted pull for a site
      description: 'Required permission "cancel_failed_pull"'
      operationId: cancelFailedPull
      requestBody:
        description: cancel failed pull request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: site ID
              required:
                - siteId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  repositoryStatus:
                    $ref: '#/components/schemas/RepositoryStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /repository/unlock:
    post:
      tags:
        - repository
      summary: Unlock local git repository
      description: 'Required role "system_admin" for global, "admin" for site sandbox or published'
      operationId: unlockRepository
      requestBody:
        description: Unlock local git repository request
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: site ID, do not send if unlocking the GLOBAL repository
                repositoryType:
                  type: string
                  format: GLOBAL, SANDBOX or PUBLISHED
              required:
                - repositoryType
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  repositoryStatus:
                    $ref: '#/components/schemas/RepositoryStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /configuration/get_configuration:
    get:
      tags:
        - configuration
      summary: Get configuration content for site and configuration location
      description: 'Required permission "read_configuration"'
      operationId: getConfiguration
      parameters:
        - name: siteId
          in: query
          description: Site ID
          required: true
          schema:
            type: string
        - name: module
          in: query
          description: Module name (e.g. studio, engine)
          required: true
          schema:
            type: string
        - name: path
          in: query
          description: Configuration file path, relative to /config/<module>
          required: true
          schema:
            type: string
        - name: environment
          in: query
          description: environment to use
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  content:
                    type: string
                    description: configuration file content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /configuration/write_configuration:
    post:
      tags:
        - configuration
      summary: Write configuration content for site
      description: 'Required permission "write_configuration"'
      operationId: writeConfiguration
      requestBody:
        description: write configuration request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: site ID
                module:
                  type: string
                  description: Module name (e.g. studio, engine)
                path:
                  type: string
                  description: Configuration file path, relative to /config/<module>
                environment:
                  type: string
                  description: environment to use
                content:
                  type: string
                  description: configuration file content
              required:
                - siteId
                - module
                - path
                - content
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /configuration/clear_cache:
    get:
      tags:
        - configuration
      summary: Clear all configuration cache for a given site
      description: 'Required Permission: "LOGGED_IN"'
      operationId: clearConfigurationCache
      parameters:
        - name: siteId
          in: query
          description: Site ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /configuration/get_configuration_history:
    get:
      tags:
        - configuration
      summary: Get configuration history for site and configuration location
      description: 'Required permission "read_configuration"'
      operationId: getConfigurationHistory
      parameters:
        - name: siteId
          in: query
          description: Site ID
          required: true
          schema:
            type: string
        - name: module
          in: query
          description: Module name (e.g. studio, engine)
          required: true
          schema:
            type: string
        - name: path
          in: query
          description: Configuration file path, relative to /config/<module>
          required: true
          schema:
            type: string
        - name: environment
          in: query
          description: environment to use
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  history:
                    $ref: '#/components/schemas/History'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /configuration/translation:
    get:
      tags:
        - configuration
      summary: Get translation configuration for a given site
      operationId: getTranslationConfig
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  config:
                    $ref: '#/components/schemas/TranslationConfig'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /configuration/content-type/usage:
    get:
      tags:
        - configuration
      summary: Get all usage of a given content-type
      operationId: getContentTypeUsage
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: contentType
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  dependencies:
                    type: object
                    properties:
                      templates:
                        type: array
                        items:
                          type: string
                        description: All templates associated with the given content-type
                      scripts:
                        type: array
                        items:
                          type: string
                        description: All scripts associated with the given content-type
                      content:
                        type: array
                        items:
                          type: string
                        description: All content types instantiated from the given content-type
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /configuration/content-type/delete:
    post:
      tags:
        - configuration
      summary: Delete files related to a given content-type
      operationId: deleteContentType
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: The id of the site
                contentType:
                  type: string
                  description: The content-type to delete
                deleteDepedencies:
                  type: boolean
                  description: Indicates if all depdendencies of the content-type should be deleted (defaults to false)
              required:
                - siteId
                - contentType
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'


  /plugin/file:
    # Override the server to change the prefix
    servers:
      - url: http://localhost:8080/studio/1
    get:
      # Override the security because this requires login instead of JWT or Http Basic
      security: []
      tags:
        - plugin
      summary: Get a file for a given plugin
      operationId: getPluginFile
      parameters:
        - name: siteId
          in: query
          description: The site ID
          required: true
          schema:
            type: string
        - name: type
          in: query
          description: The plugin type (e.g. control, data-source)
          required: true
          schema:
            type: string
        - name: name
          in: query
          description: The plugin name (e.g. custom-input)
          required: true
          schema:
            type: string
        - name: filename
          in: query
          description: The name of the file (e.g. input.js, style/main.css)
          required: true
          schema:
            type: string
        - name: pluginId
          in: query
          description: |-
            The id of the plugin (e.g. org.craftercms.plugin). This is only needed for plugins installed from the
            marketplace
          schema:
            type: string
      responses:
        '200':
          description: 'OK'
          content:
            '*/*':
              schema:
                type: string
                format: binary
                description: The content of the file
          headers:
            Content-Type:
              description: The MIME type of the file
              schema:
                type: string
            Content-Length:
              description: The size in bytes of the file
              schema:
                type: integer
                format: int64
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /plugin/get_configuration:
    get:
      tags:
        - plugin
      summary: Get configuration for the given site and plugin
      description: 'Required permission "site member"'
      operationId: getPluginConfiguration
      parameters:
        - name: siteId
          in: query
          description: The id of the site
          required: true
          schema:
            type: string
        - name: pluginId
          in: query
          description: The id of the plugin
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  content:
                    type: string
                    description: configuration file content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /plugin/write_configuration:
    post:
      tags:
        - plugin
      summary: Write configuration content a given site and plugin
      description: 'Required permission "write_configuration" and "site member"'
      operationId: writePluginConfiguration
      requestBody:
        description: write configuration request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: The id of the site
                pluginId:
                  type: string
                  description: The id of the plugin
                content:
                  type: string
                  description: configuration file content
              required:
                - siteId
                - pluginId
                - content
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /content/list_quick_create_content:
    get:
      tags:
        - content
      summary: Get list of content types available for Quick Create functionality
      description: 'Required permission "create content"'
      operationId: quickCreateContent
      parameters:
        - name: siteId
          in: query
          description: Site ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/QuickCreateItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /content/get_delete_package:
    post:
      tags:
        - content
      summary: Get a list of delete children (will be deleted) and dependent items (will have broken references) for a given list of items to be deleted
      description: 'Required permission "delete_content"'
      operationId: getDeletePackage
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  description: Site ID
                  type: string
                paths:
                  description: Content paths to get a delete package for
                  type: array
                  items:
                    type: string
              required:
                - siteId
                - paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  items:
                    type: object
                    properties:
                      childItems:
                        type: array
                        items:
                          type: string
                      dependentItems:
                        type: array
                        items:
                          type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /content/delete:
    post:
      tags:
        - content
      summary: Delete content
      description: 'Required permission "content_delete"'
      operationId: contentDelete
      requestBody:
        description: parameters for delete content
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: site identifier
                items:
                  type: array
                  description: path(s) of content item(s)
                  items:
                    type: string
                optionalDepepndencies:
                  type: array
                  description: optional (soft) dependencies
                  items:
                    type: string
                comment:
                  type: string
                  description: deletion comment by the user performing the delete
              required:
                - siteId
                - items
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /content/children_by_id:
    post:
      tags:
        - content
      summary: Get list of children for given item id
      description: 'Required permission "get_children" and "site member"'
      operationId: getChildrenById
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  description: Site ID
                  type: string
                id:
                  description: item id to get children for
                  type: integer
                  format: int64
                localeCode:
                  description: |-
                    filter children by locale code, or show source items (not translation) if translatation to
                    specified locale code does not exist
                  type: string
                sortStrategy:
                  description: >-
                    sort strategy (sort order)
                    Possible values:
                      - alphabetical (default)
                      - foldersFirst (order by: folders alphabetical, files alphabetical)
                  type: string
                order:
                  description: order for srot strategy ascending or descending (ASC / DESC)
                  type: string
                  format: ASC, DESC
                offset:
                  description: offset of first child in response - default 0
                  type: integer
                limit:
                  description: number of children to return
                  type: integer
                keyword:
                  description: filter children by keyword
                  type: string
                exclude:
                  description: exclude items by regular expression
                  type: array
                  items:
                    type: string
              required:
                - siteId
                - id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  levelDescriptor:
                    $ref: '#/components/schemas/SandboxItem'
                  children:
                    type: array
                    items:
                      $ref: '#/components/schemas/SandboxItem'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /content/children_by_path:
    post:
      tags:
        - content
      summary: Get list of children for given item path
      description: 'Required permission "get_children" and "site member"'
      operationId: getChildrenByPath
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  description: Site ID
                  type: string
                path:
                  description: item path to get children for
                  type: string
                localeCode:
                  description: |-
                    filter children by locale code, or show source items (not translation) if translatation to
                    specified locale code does not exist
                  type: string
                sortStrategy:
                  description: >-
                    sort strategy (sort order)
                    Possible values:
                      - alphabetical (default)
                      - foldersFirst (order by: folders alphabetical, files alphabetical)
                  type: string
                order:
                  description: order for srot strategy ascending or descending (ASC / DESC)
                  type: string
                  format: ASC, DESC
                offset:
                  description: offset of first child in response - default 0
                  type: integer
                limit:
                  description: number of children to return
                  type: integer
                keyword:
                  description: filter children by keyword
                  type: string
                exclude:
                  description: exclude items by regular expression
                  type: array
                  items:
                    type: string
              required:
                - siteId
                - path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  levelDescriptor:
                    $ref: '#/components/schemas/SandboxItem'
                  children:
                    type: array
                    items:
                      $ref: '#/components/schemas/SandboxItem'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /content/item_by_id:
    get:
      tags:
        - content
      summary: Get content item for given item id
      description: 'Required permission "get_detailed_item" and "read_item" and "site member"'
      operationId: getDetailedItemById
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: item identifier
          required: true
          schema:
            type: integer
            format: int64
        - name: preferContent
          in: query
          description: when set to true, return an item instead of a folder if the path can match either
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  item:
                    $ref: '#/components/schemas/DetailedItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /content/item_by_path:
    get:
      tags:
        - content
      summary: Get item details for given an item path
      description: 'Required permission "get_detailed_item" and "read_item" and "site member"'
      operationId: getDetailedItemByPath
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: path
          in: query
          description: item path
          required: true
          schema:
            type: string
        - name: preferContent
          in: query
          description: when set to true, return an item instead of a folder if the path can match either
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  item:
                    $ref: '#/components/schemas/DetailedItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /content/sandbox_items_by_id:
    post:
      tags:
        - content
      summary: Get list of items for given list of item ids
      description: 'Required permission "get_children" and "site member"'
      operationId: getSandboxItemsById
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  description: Site ID
                  type: string
                ids:
                  description: item ids to get
                  type: array
                  items:
                    type: integer
                    format: int64
                preferContent:
                  description: when set to true, return an item instead of a folder if the path can match either
                  type: boolean
              required:
                - siteId
                - ids
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/SandboxItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /content/sandbox_items_by_path:
    post:
      tags:
        - content
      summary: Get list of items for given item paths
      description: 'Required permission "get_children" and "site member"'
      operationId: getSandboxItemsByPath
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  description: Site ID
                  type: string
                paths:
                  description: item paths to get
                  type: array
                  items:
                    type: string
                preferContent:
                  description: when set to true, return an item instead of a folder if the path can match either
                  type: boolean
              required:
                - siteId
                - paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/SandboxItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /content/descriptor:
    get:
      tags:
        - content
      summary: Get the XML descriptor for a given path
      operationId: getDescriptor
      parameters:
        - name: siteId
          in: query
          description: The site ID
          required: true
          schema:
            type: string
        - name: path
          in: query
          description: The path of the descriptor
          required: true
          schema:
            type: string
        - name: flatten
          in: query
          description: Indicates if included descriptors should be flattened
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  xml:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /content/paste:
    post:
      tags:
        - content
      summary: |-
        Paste a tree of items to a target path (copy content or move content).
        To be used by the UI in the clipboard implementation.
      description: 'Required permission "Write"'
      operationId: pasteItems
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasteRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  items:
                    description: The list of pasted items
                    type: array
                    items:
                      type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /content/duplicate:
    post:
      tags:
        - content
      summary: Duplicate the given item in the same location
      description: 'Required permission "Write"'
      operationId: duplicateItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: The id of the site
                path:
                  type: string
                  description: The path of the item to duplicate
              required:
                - siteId
                - path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  item:
                    description: the path of the new item
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /content/items_lock_by_path:
    post:
      tags:
        - content
      summary: Lock items by path
      description: 'Required permission "content_write"'
      operationId: itemsLockByPath
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: The id of the site
                paths:
                  type: array
                  items:
                    type: string
                    description: Paths of items to lock
              required:
                - siteId
                - paths
      responses:
        '200':
          description: OK

        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /content/items_lock_by_id:
    post:
      tags:
        - content
      summary: Lock items by id
      description: 'Required permission "content_write"'
      operationId: itemsLockById
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: The id of the site
                itemIds:
                  type: array
                  items:
                    type: integer
                    format: int64
                  description: Ids of items to lock
              required:
                - siteId
                - itemIds
      responses:
        '200':
          description: OK

        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /content/item_unlock_by_path:
    post:
      tags:
        - content
      summary: Unlock item by path
      description: 'Required permission "item_unlock" or lock owner'
      operationId: itemUnlockByPath
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: The id of the site
                path:
                  type: string
                  description: The path of the item to unlock
              required:
                - siteId
                - path
      responses:
        '200':
          description: OK

        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /content/item_unlock_by_id:
    post:
      tags:
        - content
      summary: Unlock item by id
      description: 'Required permission "item_unlock" or lock owner'
      operationId: itemUnlockById
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: The id of the site
                itemId:
                  type: integer
                  format: int64
                  description: The id of the item to unlock
              required:
                - siteId
                - itemId
      responses:
        '200':
          description: OK

        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /content/get_content_by_commit_id:
    get:
      tags:
        - content
      summary: Get content for commit id
      description: 'Required permission "site member"'
      operationId: getContentByCommitId
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: path
          in: query
          description: path of the content
          required: true
          schema:
            type: string
        - name: commitId
          in: query
          description: commit id of the content version
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  content:
                    type: string
                    description: requested content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /dependency/dependencies:
    post:
      tags:
        - dependency
      summary: Get list of dependencies for given content paths
      description: 'Required permission "site member"'
      operationId: getDependencies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  description: Site ID
                  type: string
                paths:
                  description: Content paths to get dependencies for
                  type: array
                  items:
                    type: string
              required:
                - siteId
                - paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  items:
                    type: object
                    properties:
                      hardDependencies:
                        type: array
                        items:
                          type: string
                      softDependencies:
                        type: array
                        items:
                          type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /marketplace/search:
    get:
      tags:
        - marketplace
      summary: Search for compatible plugins in the marketplace
      operationId: searchPlugins
      parameters:
        - name: type
          in: query
          description: Plugin type to search (e.g. blueprint, control, datasource)
          schema:
            type: string
        - name: keywords
          in: query
          description: The keywords to filter plugins
          schema:
            type: string
        - name: showPending
          description: Include plugins pending of approval (default to false)
          in: query
          required: false
          schema:
            type: boolean
        - name: offset
          in: query
          description: Offset for pagination
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: Limit for pagination
          schema:
            type: integer
            format: int64
        - name: showIncompatible
          in: query
          description: Include incompatible plugins (defaults to false)
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  items:
                    type: array
                    items:
                      anyOf:
                        - $ref: '#/components/schemas/MarketplacePlugin'
                        - $ref: '#/components/schemas/GitMarketplacePlugin'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /marketplace/installed:
    get:
      tags:
        - marketplace
      summary: Get the list of plugins installed in the given site
      description: 'Required permission "list_plugins"'
      operationId: getInstalledPlugins
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  plugins:
                    type: array
                    items:
                      $ref: '#/components/schemas/PluginRecord'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /marketplace/install:
    post:
      tags:
        - marketplace
      summary: Install a plugin in the given site
      description: 'Required permission "install_plugins"'
      operationId: installPlugin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  description: The id of the site
                  type: string
                pluginId:
                  description: The id of the plugin
                  type: string
                pluginVersion:
                  $ref: '#/components/schemas/Version'
                parameters:
                  type: object
                  description: Object containing all parameters for the plugin. It should include all required parameters from the descriptor
                  additionalProperties:
                    type: string
              required:
                - siteId
                - pluginId
                - pluginVersion
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /marketplace/copy:
    post:
      tags:
        - marketplace
      summary: Copy a local plugin to a given site
      description: 'Required permission "install_plugins"'
      operationId: copyPlugin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  description: The id of the site
                  type: string
                path:
                  description: The path of the local plugin source folder
                  type: string
                parameters:
                  type: object
                  description: Object containing all parameters for the plugin. It should include all required parameters from the descriptor
                  additionalProperties:
                    type: string
              required:
                - siteId
                - path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /marketplace/remove:
    post:
      tags:
        - marketplace
      summary: Remove a plugin from the given site
      description: 'Required permission "remove_plugins"'
      operationId: removePlugin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  description: The id of the site
                  type: string
                pluginId:
                  description: The id of the plugin
                  type: string
                force:
                  description: Indicates if the plugin should be removed even if there are dependant items
              required:
                - siteId
                - pluginId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /marketplace/usage:
    get:
      tags:
        - marketplace
      summary: List dependant items for a plugin
      description: 'Required permission "remove_plugins"'
      operationId: pluginUsage
      parameters:
        - name: siteId
          description: The id of the site
          schema:
            type: string
          required: true
          in: query
        - name: pluginId
          description: The id of the plugin
          schema:
            type: string
          required: true
          in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  items:
                    type: array
                    items:
                      type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /publish/packages:
    get:
      tags:
        - publishing
      summary: Get the list of packages in the publishing queue
      description: 'Required permission "get_publishing_queue"'
      operationId: PublishingPackages
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: publishingTarget
          in: query
          description: filter by publishing target
          required: false
          schema:
            type: string
        - name: path
          in: query
          description: regular expression to filter by path
          required: false
          schema:
            type: string
        - name: states
          in: query
          description: filter by package state(s)
          required: false
          schema:
            type: array
            items:
              type: string
        - name: offset
          in: query
          description: Offset for pagination
          required: false
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: Limit for pagination
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  packages:
                    type: array
                    items:
                      $ref: '#/components/schemas/PublishingPackage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /publish/package:
    get:
      tags:
        - publishing
      summary: Get package details
      description: 'Required permission "get_publishing_queue"'
      operationId: getPublishingPackageDetails
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: packageId
          in: query
          description: package ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  package:
                    $ref: '#/components/schemas/PublishingPackageDetails'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /publish/cancel:
    post:
      tags:
        - publishing
      summary: Cancel publishing packages
      description: 'Required permission "cancel_publish"'
      operationId: cancelPublishingPackages
      requestBody:
        description: cancel publishing packages request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: site ID
                packageIds:
                  type: array
                  description: packageIds
                  items:
                    type: string
              required:
                - siteId
                - packageIds
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /publish/status:
    get:
      tags:
        - publishing
      summary: Get publishing status for site
      description: 'Required permission "publish_status"'
      operationId: getPublishingStatus
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  publishingStatus:
                    $ref: '#/components/schemas/PublishingStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /publish/clear_lock:
    post:
      tags:
        - publishing
      summary: Clear publishing lock for site
      description: 'Required permission "publish_clear_lock"'
      operationId: clearPublishingLock
      requestBody:
        description: clear publishing lock request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: site ID
              required:
                - siteId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /publish/history:
    get:
      tags:
        - publishing
      summary: Get publishing history for site
      description: 'Required permission "publish"'
      operationId: getPublishingHistory
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: days
          in: query
          description: number of days to display history for
          required: true
          schema:
            type: integer
            format: int32
        - name: num
          in: query
          description: number of items to fetch
          required: true
          schema:
            type: integer
            format: int32
        - name: filterType
          in: query
          description: filter items by type (all, page, component, asset)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  publishingStatus:
                    $ref: '#/components/schemas/DeploymentHistoryGroup'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /publish/available_targets:
    get:
      tags:
        - publishing
      summary: Get available publishing targets for site
      description: 'Required permission "publish"'
      operationId: getAvailablePublishingTargets
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  publishingTargets:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          description: Target name
                        order:
                          type: integer
                          format: int32
                          description: order for display in the dropdown
                  published:
                    type: boolean
                    description: true if site has been published at least once (initial publish; published repository exist), otherwise false
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /security/encrypt:
    post:
      tags:
        - security
      summary: Encrypt a text value
      operationId: encrypt
      description: Required permission "encryption_tool"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
              required:
                - text
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  item:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /security/tokens:
    get:
      tags:
        - security
      summary: Get all existing tokes for the current user
      operationId: getAccessTokens
      description: Required permission "manage_access_token"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  tokens:
                    type: array
                    items:
                      $ref: '#/components/schemas/AccessToken'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - security
      summary: Creates a new access token for the current user
      operationId: createAccessToken
      description: Required permission "manage_access_token"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                label:
                  type: string
                  description: The label for the access token
                expiresAt:
                  type: string
                  format: date-time
                  description: The date of expiration for the access token
              required:
                - label
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  token:
                    $ref: '#/components/schemas/AccessToken'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /security/tokens/{id}:
    post:
      tags:
        - security
      summary: Updates an access token for the current user
      operationId: updateAccessToken
      description: Required permission "manage_access_token"
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            format: int64
          description: The id of the access token to update
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enabled:
                  type: boolean
                  description: Indicates if the access token is enabled
              required:
                - enabled
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  token:
                    $ref: '#/components/schemas/AccessToken'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - security
      summary: Deletes an access token for the current user
      operationId: deleteAccessToken
      description: Required permission "manage_access_token"
      parameters:
       - name: id
         in: path
         schema:
           type: integer
           format: int64
         description: The id of the access token to delete
         required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /dashboard/activity:
    get:
      tags:
        - dashboard
      summary: Get user activities
      description: 'Required permission "site_member"'
      operationId: getDashboardActivities
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: usernames
          in: query
          description: filter activities for given users only
          required: false
          schema:
            type: array
            items:
              type: string
        - name: dateFrom
          in: query
          description: lower boundary to filter by date-time range
          required: false
          schema:
            type: string
            format: date-time
        - name: dateTo
          in: query
          description: upper boundary to filter by date-time range
          required: false
          schema:
            type: string
            format: date-time
        - name: offset
          in: query
          description: offset of the first result item, default 0
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: number of results to return, default 10
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  activities:
                    type: array
                    items:
                      $ref: '#/components/schemas/Activity'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /dashboard/activity/me:
    get:
      tags:
        - dashboard
      summary: Get current user's activities
      description: 'Required permission "site_member"'
      operationId: getDashboardMyActivities
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: dateFrom
          in: query
          description: lower boundary to filter by date-time range
          required: false
          schema:
            type: string
            format: date-time
        - name: dateTo
          in: query
          description: upper boundary to filter by date-time range
          required: false
          schema:
            type: string
            format: date-time
        - name: offset
          in: query
          description: offset of the first result item, default 0
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: number of results to return, default 10
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  activities:
                    type: array
                    items:
                      $ref: '#/components/schemas/Activity'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /dashboard/content/pending_approval:
    get:
      tags:
        - dashboard
      summary: Get publishing packages that are pending for approval
      description: 'Required permission "site_member"'
      operationId: getDashboardContentPendingApproval
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: offset
          in: query
          description: offset of the first result item, default 0
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: number of results to return, default 10
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  publishingPackages:
                    type: array
                    items:
                      $ref: '#/components/schemas/DashboardPublishingPackage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /dashboard/content/pending_approval/{id}:
    get:
      tags:
        - dashboard
      summary: Get content items of the package that is pending for approval
      description: 'Required permission "site_member"'
      operationId: getDashboardContentPendingApprovalDetail
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: package ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  publishingPackageItems:
                    type: array
                    items:
                      $ref: '#/components/schemas/SandboxItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /dashboard/content/unpublished:
    get:
      tags:
        - dashboard
      summary: Get unpublished items for site
      description: 'Required permission "site_member"'
      operationId: getDashboardContentUnpublished
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: offset
          in: query
          description: offset of the first result item, default 0
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: number of results to return, default 10
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  unPublishedItems:
                    type: array
                    items:
                      $ref: '#/components/schemas/SandboxItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /dashboard/publishing/scheduled:
    get:
      tags:
        - dashboard
      summary: Get scheduled publishing packages
      description: 'Required permission "site_member"'
      operationId: getDashboardPublishingScheduled
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: publishingTarget
          in: query
          description: publishing target to filter results
          required: false
          schema:
            type: string
        - name: approver
          in: query
          description: apporver user to filter results
          required: false
          schema:
            type: string
        - name: dateFrom
          in: query
          description: lower boundary to filter by date-time range
          required: false
          schema:
            type: string
            format: date-time
        - name: dateTo
          in: query
          description: upper boundary to filter by date-time range
          required: false
          schema:
            type: string
            format: date-time
        - name: offset
          in: query
          description: offset of the first result item, default 0
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: number of results to return, default 10
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  publishingPackages:
                    type: array
                    items:
                      $ref: '#/components/schemas/DashboardPublishingPackage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /dashboard/publishing/scheduled/{id}:
    get:
      tags:
        - dashboard
      summary: Get content items of the package that is scheduled
      description: 'Required permission "site_member"'
      operationId: getDashboardPublishingScheduledDetail
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: package ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  publishingPackageItems:
                    type: array
                    items:
                      $ref: '#/components/schemas/SandboxItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /dashboard/publishing/history:
    get:
      tags:
        - dashboard
      summary: Get history of published packages
      description: 'Required permission "site_member"'
      operationId: getDashboardPublishingHistory
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: publishingTarget
          in: query
          description: publishing target to filter results
          required: false
          schema:
            type: string
        - name: approver
          in: query
          description: apporver user to filter results
          required: false
          schema:
            type: string
        - name: dateFrom
          in: query
          description: lower boundary to filter by date-time range
          required: false
          schema:
            type: string
            format: date-time
        - name: dateTo
          in: query
          description: upper boundary to filter by date-time range
          required: false
          schema:
            type: string
            format: date-time
        - name: offset
          in: query
          description: offset of the first result item, default 0
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: number of results to return, default 10
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  publishingPackages:
                    type: array
                    items:
                      $ref: '#/components/schemas/DashboardPublishingPackage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /dashboard/publishing/history/{id}:
    get:
      tags:
        - dashboard
      summary: Get content items of the package that was published
      description: 'Required permission "site_member"'
      operationId: getDashboardPublishingHistoryDetail
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: package ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  publishingPackageItems:
                    type: array
                    items:
                      $ref: '#/components/schemas/SandboxItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /dashboard/publishing/stats:
    get:
      tags:
        - dashboard
      summary: Get publishing stats
      description: 'Required permission "site_member"'
      operationId: getDashboardPublishingStats
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: days
          in: query
          description: number of days to display stats for
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  publishingStats:
                    type: array
                    items:
                      $ref: '#/components/schemas/PublishingStats'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /dashboard/content/expiring:
    get:
      tags:
        - dashboard
      summary: Get content that is expiring
      description: 'Required permission "site_member"'
      operationId: getDashboardContentExpiring
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: dateFrom
          in: query
          description: lower boundary to filter by date-time range
          required: false
          schema:
            type: string
            format: date-time
        - name: dateTo
          in: query
          description: upper boundary to filter by date-time range
          required: false
          schema:
            type: string
            format: date-time
        - name: offset
          in: query
          description: offset of the first result item, default 0
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: number of results to return, default 10
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        itemName:
                          type: string
                          description: internal name
                        itemPath:
                          type: string
                          description: content path
                        expireDateTime:
                          type: string
                          format: date-time
                          description: date and time when content expires
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /dashboard/content/expired:
    get:
      tags:
        - dashboard
      summary: Get content that expired
      description: 'Required permission "site_member"'
      operationId: getDashboardContentExpired
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: offset
          in: query
          description: offset of the first result item, default 0
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: number of results to return, default 10
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        itemName:
                          type: string
                          description: internal name
                        itemPath:
                          type: string
                          description: content path
                        expiredDateTime:
                          type: string
                          format: date-time
                          description: date and time when content expired
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /translation/list:
    get:
      tags:
        - translation
      summary: Get items for translation
      description: 'Required permission "get_items_for_translation"'
      operationId: getItemsForTranslation
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: path
          in: query
          description: filter results by path regexes
          schema:
            type: array
            items:
              type: string
        - name: locale
          in: query
          description: filter results by locales
          schema:
            type: array
            items:
              type: string
        - name: markedForTranslation
          in: query
          description: Include only items marked for translation and exclude everything else (default true)
          schema:
            type: boolean
        - name: notTranslated
          in: query
          description: Include only items that have not been translated yet (default true)
          schema:
            type: boolean
        - name: translationOutOfDate
          in: query
          description: Include items with translation out of date, otherwise exclude them (default true)
          schema:
            type: boolean
        - name: offset
          in: query
          description: offset of the first result item, default 0
          schema:
            type: integer
        - name: limit
          in: query
          description: number of results to return, default 10
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/LocalizationItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /translation/item_by_id:
    post:
      tags:
        - translation
      summary: Get transaltion item(s) detail
      description: 'Required permission "get_translation_item_detail"'
      operationId: getTranslationItemById
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  description: site ID
                  type: string
                id:
                  description: Id(s) of item(s) to retrieve
                  type: array
                  items:
                    type: string
              required:
                - siteId
                - id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/LocalizationItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /translation/item_by_path:
    post:
      tags:
        - translation
      summary: Get transaltion item(s) detail
      description: 'Required permission "get_translation_item_detail"'
      operationId: getTranslationItemByPath
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  description: site ID
                  type: string
                path:
                  description: Path(s) to item(s) to retrieve
                  type: array
                  items:
                    type: string
              required:
                - siteId
                - path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/LocalizationItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /translation/list_target_locales:
    get:
      tags:
        - translation
      summary: Get list of target translation locales
      description: 'Required permission "get_translation_target_locales"'
      operationId: getTranslationTargetLocales
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: path
          in: query
          description: item path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/LocalizationItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /translation/mark_for_translation_by_id:
    post:
      tags:
        - translation
      summary: Mark item to be translated to specific locales
      description: 'Required permission "mark_for_translation"'
      operationId: markForTranslationById
      requestBody:
        description: Item and list of locales to translate to
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: site ID
                id:
                  type: array
                  description: id(s) of the item(s)
                  items:
                    type: string
                locales:
                  type: array
                  description: locale codes
                  items:
                    type: string
              required:
                - siteId
                - path
                - locales
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /translation/mark_for_translation_by_path:
    post:
      tags:
        - translation
      summary: Mark item to be translated to specific locales
      description: 'Required permission "mark_for_translation"'
      operationId: markForTranslationByPath
      requestBody:
        description: Item and list of locales to translate to
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: site ID
                path:
                  type: array
                  description: path(s) of the item(s)
                  items:
                    type: string

                locales:
                  type: array
                  description: locale codes
                  items:
                    type: string
              required:
                - siteId
                - path
                - locales
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /workflow/item_states:
    get:
      tags:
        - workflow
      summary: Get item workflow states for site
      description: 'Required permission "get_item_states"'
      operationId: getItemStates
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: path
          in: query
          description: path regex
          required: false
          schema:
            type: string
        - name: states
          in: query
          description: states bitmap mask
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/SandboxItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - workflow
      summary: Set item workflow states for site
      description: 'Required permission "set_item_states"'
      operationId: setItemStates
      requestBody:
        description: List of items to set workflow state(s)
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId: 
                  type: string
                  description: site ID
                items:
                  type: array
                  description: path(s) of item(s)
                  items:
                    type: string
                clearSystemProcessing:
                  type: boolean
                  description: true if system processing is to be cleared
                clearUserLocked:
                  type: boolean
                  description: true if user lock is to be cleared
                live:
                  type: boolean
                  description: true if item is to be set as live, otherwise false
                staged:
                  type: boolean
                  description: true if item is to be set as staged, otherwise false
              required:
                - siteId
                - items
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /workflow/update_item_states_by_query:
    post:
      tags:
        - workflow
      summary: Set item workflow states for site using query
      description: 'Required permission "set_item_states"'
      operationId: updateItemStates
      requestBody:
        description: List of items to set workflow state(s)
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: object
                  properties:
                    siteId: 
                      type: string
                      description: site ID
                    path:
                      type: string
                      description: path regex of item(s)
                    states:
                      type: integer
                      format: int64
                      description: state bitmap mask to filter by state
                  required:
                    - siteId
                    - paths
                update:
                  type: object
                  properties:
                    clearSystemProcessing:
                      type: boolean
                      description: true if system processing is to be cleared
                    clearUserLocked:
                      type: boolean
                      description: true if user lock is to be cleared
                    live:
                      type: boolean
                      description: true if item is to be set as live, otherwise false
                    staged:
                      type: boolean
                      description: true if item is to be set as staged, otherwise false
              required:
                - query
                - update
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /workflow/affected_paths:
    get:
      tags:
        - workflow
      summary: Get workflow affected paths
      description: 'Required permission "site member"'
      operationId: getWorkflowAffectedPaths
      parameters:
        - name: siteId
          in: query
          description: site ID
          required: true
          schema:
            type: string
        - name: path
          in: query
          description: path of the content
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/SandboxItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /workflow/request_publish:
    post:
      tags:
        - workflow
      summary: Request publish for content
      description: 'Required permission "site_member"'
      operationId: workflowRequestPublish
      requestBody:
        description: parameters for request publish
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                siteId:
                  type: string
                  description: site identifier
                items:
                  type: array
                  description: path(s) of content item(s)
                  items:
                    type: string
                optionalDependencies:
                  type: array
                  description: optional (soft) dependencies
                  items:
                    type: string
                publishingTarget:
                  type: string
                  description: target to publish content to
                schedule:
                  type: string
                  format: datetime
                  description: schedule when to publish content
                comment:
                  type: string
                  description: comment about publish request
                sendEmailNotifications:
                  type: boolean
                  description: if true, send email notifications
              required:
                - siteId
                - items
                - publishingTarget
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /workflow/publish:
    post:
      tags:
        - workflow
      summary: Publish content
      description: 'Required permission "publish"'
      operationId: workflowPublish
      requestBody:
        description: parameters for publish content
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                siteId:
                  type: string
                  description: site identifier
                items:
                  type: array
                  description: path(s) of content item(s)
                  items:
                    type: string
                optionalDependencies:
                  type: array
                  description: optional (soft) dependencies
                  items:
                    type: string
                publishingTarget:
                  type: string
                  description: target to publish content to
                schedule:
                  type: string
                  format: datetime
                  description: schedule when to publish content
                comment:
                  type: string
                  description: submission comment by publisher
              required:
                - siteId
                - items
                - publishingTarget
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /workflow/approve:
    post:
      tags:
        - workflow
      summary: Approve request publish submission
      description: 'Required permission "publish"'
      operationId: workflowApprove
      requestBody:
        description: parameters for apporve request publish submission
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                siteId:
                  type: string
                  description: site identifier
                items:
                  type: array
                  description: path(s) of content item(s)
                  items:
                    type: string
                optionalDependencies:
                  type: array
                  description: optional (soft) dependencies
                  items:
                    type: string
                publishingTarget:
                  type: string
                  description: target to publish content to
                schedule:
                  type: string
                  format: datetime
                  description: schedule when to publish content
                comment:
                  type: string
                  description: Reviewer's comment
              required:
                - siteId
                - items
                - publishingTarget
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /workflow/reject:
    post:
      tags:
        - workflow
      summary: Reject request publish submission
      description: 'Required permission "publish"'
      operationId: workflowReject
      requestBody:
        description: parameters for reject request publish submission
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                siteId:
                  type: string
                  description: site identifier
                items:
                  type: array
                  description: path(s) of content item(s)
                  items:
                    type: string
                comment:
                  type: string
                  description: Reviewer's rejection comment
              required:
                - siteId
                - items
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /workflow/packages:
    get:
      tags:
        - workflow
      summary: List workflow packages order by scheduled date
      description: Required permission "request_publish, publish"
      operationId: workflowListPackage
      parameters:
        - name: siteId
          in: query
          description: filter workflow packages by site
          required: true
          schema:
            type: string
        - name: dateFrom
          in: query
          description: lower boundary for filtering results by scheduled date
          required: false
          schema:
            type: string
            format: date
        - name: dateTo
          in: query
          description: upper boundary for filtering results by scheduled date
          required: false
          schema:
            type: string
            format: date
        - name: offset
          in: query
          description: Offset of the first package in the response
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Number of packages to return
          required: false
          schema:
            type: integer
            format: int32
        - name: order
          in: query
          description: ascending or descending (ASC | DESC). Default ascending
          required: false
          schema:
            type: string       
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  total:
                    type: integer
                    format: int32
                    description: Total records in the system
                  offset:
                    type: integer
                    format: int32
                    description: Offset of first record in this response
                  limit:
                    type: integer
                    format: int32
                    description: Number of records returned in this response
                  packages:
                    type: array
                    items:
                      $ref: '#/components/schemas/WorkflowPackage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - workflow
      summary: Create workflow package
      description: Required permission "request_publish, publish"
      operationId: workflowCreatePackage
      requestBody:
        description: parameters to create new workflow package
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: site identifier
                paths:
                  type: array
                  description: paths of content items to add to package
                  items:
                    type: string
                publishingTarget:
                  type: string
                  description: target where to publish content
                schedule:
                  type: string
                  format: datetime
                  description: schedule when publishing should be performed
                authorComment:
                  type: string
                  description: author's comment about the package
                label:
                  type: string
                  description: user friendly name for the package
              required:
                - siteId
                - paths
                - publishingTarget   
      responses:
        '201':
          description: CREATED
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - workflow
      summary: Update workflow package
      description: Required permission "request_publish, publish"
      operationId: workflowUpdatePackage
      requestBody:
        description: Workflow package entity to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowPackage'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  package:
                    $ref: '#/components/schemas/WorkflowPackage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /workflow/packages/{id}:
    get:
      tags:
        - workflow
      summary: Get workflow package by id
      description: Required permission "request_publish, publish"
      operationId: workflowGetPackage
      parameters:
        - name: id
          in: path
          description: The workflow package ID
          required: true
          schema:
            type: string
            format: UUID                
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
                  package:
                    $ref: '#/components/schemas/WorkflowPackage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /workflow/packages/approve:
    post:
      tags:
        - workflow
      summary: Approve workflow package
      description: Required permission "publish"
      operationId: workflowApprovePackage
      requestBody:
        description: parameters to approve a workflow package
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: site identifier
                packages:
                  type: array
                  items:
                    type: object
                    properties:
                      packageId:
                        type: string
                        description: Id of the workflow package to approve
                      approverComment:
                        type: string
                        description: approver's comment about approved workflow package
                    required:
                      - packageId
                      - approverComment
                schedule:
                  type: string
                  format: datetime
                  description: approved scehedule when to publish package
              required:
                - siteId
                - packages
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /workflow/packages/reject:
    post:
      tags:
        - workflow
      summary: Create workflow package
      description: Required permission "request_publish, publish"
      operationId: workflowRejectPackage
      requestBody:
        description: parameters to create new workflow package
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteId:
                  type: string
                  description: site identifier
                packages:
                  type: array
                  items:
                    type: object
                    properties:
                      packageId:
                        type: string
                        description: Id of the workflow package to approve
                      rejectionComment:
                        type: string
                        description: approver's comment about approved workflow package
                    required:
                      - packageId
                      - rejectionComment
              required:
                - siteId
                - packages              
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    ApiResponse:
      type: object
      description: |-
        The response of an API operation. Possible responses are:
          * `CODE:` 0, `MESSAGE:` OK
          * `CODE:` 1, `MESSAGE:` Created
          * `CODE:` 2, `MESSAGE:` Deleted
          * `CODE:` 1000, `MESSAGE:` Internal system failure, `REMEDIAL ACTION:` Contact support
          * `CODE:` 1001, `MESSAGE:` Invalid parameter(s), `REMEDIAL ACTION:` Check API and make sure you're sending the correct parameters
          * `CODE:` 2000, `MESSAGE:` Unauthenticated, `REMEDIAL ACTION:` Please login first
          * `CODE:` 2001, `MESSAGE:` Unauthorized, `REMEDIAL ACTION:` You don't have permission to perform this task, please contact your administrator
          * `CODE:` 3000, `MESSAGE:` Organization not found, `REMEDIAL ACTION:` Check if you sent in the right Org Id
          * `CODE:` 3001, `MESSAGE:` Organization already exists, `REMEDIAL ACTION:` Try a different organization name
          * `CODE:` 4000, `MESSAGE:` Group not found, `REMEDIAL ACTION:` Check if you sent in the right Group Id
          * `CODE:` 5000, `MESSAGE:` Site not found, `REMEDIAL ACTION:` Check if you sent in the right Site Id
          * `CODE:` 5001, `MESSAGE:` Site already exists, `REMEDIAL ACTION:` Try a different site name
          * `CODE:` 6000, `MESSAGE:` User not found, `REMEDIAL ACTION:` Check if you're using the correct User ID
          * `CODE:` 6001, `MESSAGE:` User already exists, `REMEDIAL ACTION:` Try a different username
          * `CODE:` 6002, `MESSAGE:` User is externally managed, `REMEDIAL ACTION:` Update the user in the main identity system (e.g. LDAP)
          * `CODE:` 6003, `MESSAGE:` User password does not fullfill requirements, `REMEDIAL ACTION:` Use password that will fullfill password requirements
          * `CODE:` 6004, `MESSAGE:` User current password does not match, `REMEDIAL ACTION:` Use correct current password
          * `CODE:` 7000, `MESSAGE:` Content not found, `REMEDIAL ACTION:` Check if you sent in the right Content Id
          * `CODE:` 7001, `MESSAGE:` Content already exists, `REMEDIAL ACTION:` Advise the user that the content already exists
          * `CODE:` 8000, `MESSAGE:` Publishing is disabled, `REMEDIAL ACTION:` Advise the user to enable publishing
          * `CODE:` 9000, `MESSAGE:` Search is unreachable, `REMEDIAL ACTION:` Advise the user that the search engine is not reachable
          * `CODE:` 10000, `MESSAGE:` LoV not found, `REMEDIAL ACTION:` Check if you sent in the right LoV Id
          * `CODE:` 11000, `MESSAGE:` Cluster member not found, `REMEDIAL ACTION:` Check if you sent in the right Cluster Member Id
          * `CODE:` 11001, `MESSAGE:` Cluster member already exists, `REMEDIAL ACTION:` Get the list of cluster members to validate
          * `CODE:` 12000, `MESSAGE:` Remote repository not found, `REMEDIAL ACTION:` Check if you sent in the right remote repository name
          * `CODE:` 12001, `MESSAGE:` Remote repository already exists, `REMEDIAL ACTION:` Get the list of remote repositories to validate
          * `CODE:` 12002, `MESSAGE:` Pull from remote repository resulted in conflict, `REMEDIAL ACTION:` Resolve conflicts before continuing work with repository
          * `CODE:` 12003, `MESSAGE:` Remote is invalid. Not added to remote repositories, `REMEDIAL ACTION:` Add new remote repository with valid parameters.
          * `CODE:` 12004, `MESSAGE:` Failed to remove remote repository, `REMEDIAL ACTION:` Contact your system administrator.
          * `CODE:` 12005, `MESSAGE:` Push to remote repository failed, `REMEDIAL ACTION:` Check your repository settings or contact your system administrator.
          * `CODE:` 12006, `MESSAGE:` Remove remote repository failed, `REMEDIAL ACTION:` The remote repository is a cluster node repository. It can't be removed.
          * `CODE:` 12007, `MESSAGE:` Remote repository authentication failed, `REMEDIAL ACTION:` Recreate the remote repository with the correct authentication credentials and make sure you have write access.
          * `CODE:` 40000, `MESSAGE:` Marketplace service is not initialized, `REMEDIAL ACTION:` Contact your system administrator.
          * `CODE:` 40001, `MESSAGE:` Marketplace server is unreachable, `REMEDIAL ACTION:` Check the configuration to make sure the Marketplace URL is correct
          * `CODE:` 40002, `MESSAGE:` Plugin is already installed, `REMEDIAL ACTION:` Check that the site id, plugin id and plugin version are correct
          * `CODE:` 40003, `MESSAGE:` Error installing plugin, `REMEDIAL ACTION:` Check the plugin requirements
          * `CODE:` 50000, `MESSAGE:` CMIS server is unreachable, `REMEDIAL ACTION:` Advise the user that the CMIS server is not reachable
          * `CODE:` 50001, `MESSAGE:` Request to CMIS server timed out, `REMEDIAL ACTION:` Advise the user that the request to CMIS server timed out
          * `CODE:` 50002, `MESSAGE:` CMIS server was not found, `REMEDIAL ACTION:` Advise the user that the CMIS server was not found
          * `CODE:` 50003, `MESSAGE:` Target path does not exist in site repository, `REMEDIAL ACTION:` Check if you sent in the right Studio Path
          * `CODE:` 51000, `MESSAGE:` Box is unreachable, `REMEDIAL ACTION:` Advise the user that Box is not reachable
          * `CODE:` 52000, `MESSAGE:` AWS is unreachable, `REMEDIAL ACTION:` Advise the user that AWS engine is not reachable
      properties:
        code:
          type: integer
          format: int32
          description: The response code
        message:
          type: string
          description: The detailed message of the response
        remedialAction:
          type: string
          description: What the user can do in order to address the issue indicated by the response
        documentationUrl:
          type: string
          description: A URL to documentation related to the response
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: 'User ID, unique and immutable'
        username:
          type: string
          description: Username, unique
        password:
          type: string
          description: User's password (not returned to caller)
        firstName:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
        email:
          type: string
          description: User's email address
        enabled:
          type: boolean
          description: Indicates if the user is enabled
        externallyManaged:
          type: boolean
          description: Indicates if a user is managed in by an external system (LDAP, SAML, etc.)
      required:
        - id
        - username
        - password
        - firstName
        - lastName
        - email
        - enabled
        - externallyManaged

    AuthenticatedUser:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: 'User ID, unique and immutable'
        username:
          type: string
          description: Username, unique
        firstName:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
        email:
          type: string
          description: User's email address
        enabled:
          type: boolean
          description: Indicates if the user is enabled
        externallyManaged:
          type: boolean
          description: Indicates if a user is managed in by an external system (LDAP, SAML, etc.)
        authenticationType:
          type: string
          description: |-
            The authentication type used to log in the user. Possible values are: DB, LDAP, AUTH_HEADERS
      required:
        - id
        - username
        - password
        - firstName
        - lastName
        - email
        - enabled
        - externallyManaged
        - authenticationType

    Group:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: 'Group ID, unique and immutable'
        name:
          type: string
          description: 'Group name, unique'
        desc:
          type: string
          description: Group description
      required:
        - id
        - name

    Site:
      type: object
      properties:
        siteId:
          type: string
          description: 'Site ID, unique and immutable'
        uuid:
          type: string
          description: Site UUID unique and immutable
        name:
          type: string
          description: site name 
        desc:
          type: string
          description: Site description
      required:
        - siteId

    MenuItem:
      type: object
      properties:
        id:
          type: string
          description: 'Menu item ID, unique and immutable'
        label:
          type: string
          description: 'Menu item label'
        icon:
          type: string
          description: 'Menu item icon as a Font Awesome id, example: fa-smile'
      required:
        - id
        - label
        - icon

    S3Item:
      type: object
      properties:
        name:
          type: string
          description: 'Name of the item'
        url:
          type: string
          description: 'URL of the item'
        folder:
          type: boolean
          description: 'Indicates if the item is a folder'
      required:
        - name
        - url
        - folder

    MediaConvertResult:
      type: object
      properties:
        jobId:
          type: string
          description: 'The id of the triggered job'
        jobArn:
          type: string
          description: 'The full ARN of the triggered job'
        urls:
          type: array
          description: 'The list of files that will be generated by the triggered job'
          items:
            type: string
      required:
        - jobId
        - jobArn
        - urls

    WebDavItem:
      type: object
      properties:
        name:
          type: string
          description: 'Name of the item'
        url:
          type: string
          description: 'URL of the item'
        folder:
          type: boolean
          description: 'Indicates if the item is a folder'
      required:
        - name
        - url
        - folder

    ClusterMember:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: 'Cluster Member ID, unique and immutable'
        localAddress:
          type: string
          description: 'Cluster Member local IP address, immutable'
        state:
          type: string
          description: 'Cluster Member state'
        heartbeat:
          type: string
          format: date-time
          description: 'Timestamp of last heartbeat update of cluster member'
        gitUrl:
          type: string
          description: 'Git URL, unique'
        gitRemoteName:
          type: string
          description: 'Git Remote Name, unique'
        gitAuthType:
          type: string
          description: 'Git Auth Type'
        gitUsername:
          type: string
          description: 'Git Username'
        gitPassword:
          type: string
          description: 'Git Password (not returned to caller)'
        gitToken:
          type: string
          description: 'Git Token (not returned to caller)'
        gitPrivateKey:
          type: string
          description: 'Git Private Key (not returned to caller)'
      required:
        - id
        - localAddress
        - state
        - heartbeat
        - gitUrl
        - gitRemoteName
        - gitAuthType

    Version:
      type: object
      properties:
        major:
          type: integer
          format: int32
          description: The major version
        minor:
          type: integer
          format: int32
          description: The minor version
        patch:
          type: integer
          format: int32
          description: The patch version
      required:
        - major
        - minor

    Link:
      type: object
      properties:
        name:
          type: string
          description: The name of the link
        url:
          type: string
          description: The URL of the link
      required:
        - name
        - url

    Asset:
      type: object
      properties:
        title:
          type: string
          description: The title of the asset
        description:
          type: string
          description: The description of the asset
        url:
          type: string
          description: The URL of the asset
      required:
        - title
        - url

    Parameter:
      type: object
      properties:
        label:
          type: string
          description: The label to use for the parameter
        name:
          type: string
          description: The name of the parameter (must be camelCase)
        description:
          type: string
          description: The description of the parameter
        defaultValue:
          type: string
          description: The default value of the parameter
        type:
          type: string
          description: The type of the parameter. Currently supported values are STRING, PASSWORD
        required:
          type: boolean
          description: Indicates if the parameter is required

    PluginDescriptor:
      type: object
      properties:
        descriptorVersion:
          type: integer
          description: The version of the plugin descriptor
        plugin:
          $ref: '#/components/schemas/Plugin'

    Plugin:
      type: object
      properties:
        type:
          type: string
          description: The type of plugin
        id:
          type: string
          format: package name
          description: The plugin id
        name:
          type: string
          description: The plugin name
        tags:
          type: array
          description: The plugin tags
          items:
            type: string
        version:
          $ref: '#/components/schemas/Version'
        description:
          type: string
          description: The plugin description
        website:
          $ref: '#/components/schemas/Link'
        media:
          type: object
          properties:
            screenshots:
              type: array
              description: The screenshots of the plugin
              items:
                $ref: '#/components/schemas/Asset'
            videos:
              type: array
              description: The videos of the plugin
              items:
                $ref: '#/components/schemas/Asset'
        developer:
          type: object
          properties:
            people:
              type: array
              description: The people that worked on the plugin
              items:
                $ref: '#/components/schemas/Link'
            company:
              $ref: '#/components/schemas/Link'
        license:
          $ref: '#/components/schemas/Link'
        crafterCmsVersions:
          type: array
          description: The supported CrafterCMS versions of the plugin
          items:
            $ref: '#/components/schemas/Version'
        crafterCmsEditions:
          type: array
          description: The supported CrafterCMS editions of the plugin
          items:
            type: string
        parameters:
          type: array
          description: The parameters supported by the plugin
          items:
            $ref: '#/components/schemas/Parameter'

    MarketplacePlugin:
      allOf:
        - $ref: '#/components/schemas/Plugin'
        - type: object
          properties:
            status:
              description: The status of this version of the plugin (possible values are 'PENDING' approval and 'APPROVED')
              type: string
            source:
              description: The source of the plugin
              type: string
            compatible:
              description: Indicates if the plugin is compatible
              type: boolean


    MarketplaceRemotePlugin:
      allOf:
        - $ref: '#/components/schemas/MarketplacePlugin'
        - type: object
          properties:
            url:
              type: string

    GitMarketplacePlugin:
      allOf:
        - $ref: '#/components/schemas/MarketplaceRemotePlugin'
        - type: object
          properties:
            ref:
              type: string

    CreateSiteFromMarketplace:
      type: object
      properties:
        siteId:
          type: string
          description: Site ID to use
        description:
          type: string
          description: Site description
        sandboxBranch:
          type: string
          description: Name for sandbox branch (default master)
        remoteName:
          type: string
          description: Remote repository name (default origin)
        blueprintId:
          type: string
          description: The ID of the blueprint to use
        blueprintVersion:
          $ref: '#/components/schemas/Version'
        siteParams:
          type: object
          description: Object containing all parameters for the blueprint. It should include all required parameters from the descriptor
          additionalProperties:
            type: string
      required:
        - siteId
        - blueprintId
        - blueprintVersion

    PluginRecord:
      type: object
      properties:
        id:
          type: string
          description: The id of the plugin
        version:
          $ref: '#/components/schemas/Version'
        pluginUrl:
          type: string
          description: The URL of the plugin
        installationDate:
          type: string
          format: date-time
          description: The date when the plugin was installed
        files:
          type: array
          description: The list of installed files
          items:
            $ref: '#/components/schemas/FileRecord'

    FileRecord:
      type: object
      properties:
        path:
          type: string
          description: The path where the file was copied during installation

    SearchParams:
      type: object
      properties:
        query:
          type: string
          description: The main Lucene query to execute
        keywords:
          type: string
          description: The keywords to search in the files
        path:
          type: string
          description: Regular expression to filter the paths
        offset:
          type: integer
          format: int64
          description: The offset to paginate the results (defaults to 0)
        limit:
          type: integer
          format: int64
          description: The limit to paginate the results (defaults to 10)
        sortBy:
          type: string
          description: The name of the field to sort the results (defaults to sort by relevance)
        sortOrder:
          type: string
          description: The order to sort the results (defaults to DESC)
        orOperator:
          type: boolean
          description: Indicates if the filters should use an OR instead of an AND operator (defaults to false)
        filters:
          type: object
          description: >-
            Object containing facets to filter the search results. Facets can be simple key-value pairs like "MIME
            Type":"text/css" or nested objects for range facets like "Width": { "min": 0, "max": 150 }. Both keys and
             values can be taken from the facets object of a previous search.
          additionalProperties: true

    SearchResult:
      type: object
      properties:
        total:
          type: integer
          format: int64
          description: Total number of results found
        items:
          type: array
          description: List of items based on the pagination parameters
          items:
            $ref: '#/components/schemas/SearchResultItem'
        facets:
          type: array
          description: List of facets based on the results found
          items:
            $ref: '#/components/schemas/SearchFacet'

    SearchResultItem:
      type: object
      properties:
        path:
          type: string
          description: The path of the file
        name:
          type: string
          description: The internal name of the file
        type:
          type: string
          description: The type of the file
        mimeType:
          type: string
          description: The MIME type of the file
        previewUrl:
          type: string
          description: The preview URL of the file
        lastModifier:
          type: string
          description: The last user that modified the file
        lastModified:
          type: string
          format: date-time
          description: The last date that the file was modified
        size:
          type: integer
          format: int64
          description: The size of the file, in bytes
        snippets:
          type: array
          description: Snippets relevant to the search query
          items:
            type: string

    SearchFacet:
      type: object
      properties:
        name:
          type: string
          description: The label of the facet
        range:
          type: boolean
          description: Indicates if the values of the facet are ranges
        date:
          type: boolean
          description: Indicates if the values of the facet are dates
        values:
          type: object
          description: >-
            The values and counts of the facet. If the facet is a range
            the values will be of type SearchFacetRange, otherwise it will
            be a single integer.
          properties:
            facet1:
              type: object
              properties:
                value1:
                  type: integer
            facet2:
              $ref: '#/components/schemas/SearchFacetRange'

    SearchFacetRange:
      type: object
      properties:
        count:
          type: integer
          format: int64
          description: The number of files that match the range
        from:
          type: object
          description: The starting limit of the range
        to:
          type: object
          description: The ending limit of the range

    AuditLog:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Audit log entry ID
        organizationId:
          type: integer
          format: int64
          description: Organization ID
        siteId:
          type: string
          format: string
          description: Site Identifier
        siteName:
          type: string
          format: string
          description: Site name
        operation:
          type: string
          description: Operation that was executed
        operationTimestamp:
          type: string
          description: Timestamp when operation was executed
        origin:
          type: string
          description: Origin of operation (UI/API or Git)
        primaryTargetId:
          type: string
          description: Target ID upon which operation was executed
        primaryTargetType:
          type: string
          description: Type of the target
        primaryTargetSubtype:
          type: string
          description: Subtype of the target
        primaryTargetValue:
          type: string
          description: Value of the target (e.g. content's path)
        actorId:
          type: string
          description: Actor ID which invoked operation
        actorDetails:
          type: string
          description: Details of the actor which invoked
        clusterNodeId:
          type: string
          description: Cluster node Id
        parameters:
          type: array
          description: Additional parameters of audit log
          items:
            type: object
            properties:
              targetId:
                type: string
                description: Target ID upon which operation was executed
              targetType:
                type: string
                description: Type of the target
              targetSubtype:
                type: string
                description: Subtype of the target
              targetValue:
                type: string
                description: Value of the target (e.g. content's path)
            required:
              - targetId
              - targetType
              - targetValue
      required:
        - id
        - organizationId
        - siteId
        - siteName
        - operation
        - operationTimestamp
        - origin
        - primaryTargetId
        - primaryTargetType
        - promaryTargetValue
        - actorId

    VersionItem:
      type: object
      properties:
        packageName:
          type: string
          description: The name of the current package
        packageVersion:
          type: string
          description: The version of the current package
        packageBuild:
          type: string
          description: The build of the current package
        packageBuildDate:
          type: string
          format: date-time
          description: The build date of the current package
        osName:
          type: string
          description: The name of the operating system
        osVersion:
          type: string
          description: The version of the operating system
        osArch:
          type: string
          description: The architecture of the operating system
        javaVersion:
          type: string
          description: The version of java being used
        javaVendor:
          type: string
          description: The name of the JVM vendor
        javaVm:
          type: string
          description: The name of the JVM

    StatusItem:
      type: object
      properties:
        uptime:
          type: integer
          format: int64
          description: The time in seconds that the JVM has been up
        startup:
          type: string
          format: date-time
          description: The date and time when the JVM started

    ClusterStatusItem:
      type: object
      properties:
        uptime:
          type: integer
          format: int64
          description: The time in seconds that the JVM has been up
        startup:
          type: string
          format: date-time
          description: The date and time when the JVM started
        age:
          type: integer
          format: int64
          description: The time in seconds that the cluster node has been up
        role:
          type: string
          description: Role that the node has in the cluster. Possible values PRIMARY, REPLICA, UNASSIGNED
        readyToTakeTraffic:
          type: boolean
          description: True if the cluster node is ready to take traffic. Typically it is a Primary node
        readyToBecomePrimary:
          type: boolean
          description: True if the cluster node is a Replica and in sync with the Primary node

    MemoryItem:
      type: object
      properties:
        totalJvmMemory:
          type: integer
          format: int64
          description: The memory in bytes used by the JVM
        freeJvmMemory:
          type: integer
          format: int64
          description: The remaining memory in bytes for the JVM
        maxJvmMemory:
          type: integer
          format: int64
          description: The maximum memory in bytes available to the JVM
        totalOsMemory:
          type: integer
          format: int64
          description: The total memory in bytes available for the operating system
        freeOsMemory:
          type: integer
          format: int64
          description: The remaining memory in bytes for the operating system
        totalSwapMemory:
          type: integer
          format: int64
          description: The total memory in bytes available for swap space
        freeSwapMemory:
          type: integer
          format: int64
          description: The remaining memory in bytes for swap space

    LogEvent:
      type: object
      properties:
        exception:
          type: string
          description: The exception message if any
        site:
          type: string
          description: The site name
        level:
          type: string
          description: The level of the log event
        thread:
          type: string
          description: The name of the thread
        message:
          type: string
          description: The message of the log event
        timestamp:
          type: string
          format: datetime
          description: The timestamp of the log event
        timestampm:
          type: integer
          format: int64
          description: The time in milliseconds of the log event

    CmisItem:
      type: object
      properties:
        itemId:
          type: string
          description: Item id inside CMIS repository
        itemName:
          type: string
          description: Item name
        mimeType:
          type: string
          description: Item mime type
        size:
          type: integer
          format: int32
          description: Item size

    RemoteRepository:
      type: object
      properties:
        siteId:
          type: string
          description: site identifier
        remoteName:
          type: string
          description: remote repository name
        remoteUrl:
          type: string
          format: URL
          description: URL to access remote repository
        authenticationType:
          type: string
          description: >-
            Authentication type to use to access remote repository

            Possible values:

              - none: no authentication

              - basic: username and password authentication

              - token: token authentication

              - key: key-based authentication
        remoteUsername:
          type: string
          description: username to use to access remote repository
        remotePassword:
          type: string
          description: password to use to access remote repository
        remoteToken:
          type: string
          description: token to use to access remote repository
        remotePrivateKey:
          type: string
          description: private key to access
      required:
        - siteId
        - remoteName
        - remoteUrl
        - autheticationType

    RemoteRepositoryInfo:
      type: object
      properties:
        name:
          type: string
          description: remote repository name
        url:
          type: string
          description: remote repository url
        fetch:
          type: string
          description: remote repository fetch references
        push_url:
          type: string
          description: remote repository push url
        branches:
          type: array
          items:
            type: string
            description: remote repository branch name
        reachable:
          type: boolean
          description: true if remote repository is reachable, otherwise false
        unreachableReason:
          type: string
          description: reason why remote is unreachable
        removable:
          type: boolean
          description: true if remote repository can be removed, otherwise false

    QuickCreateItem:
      type: object
      properties:
        siteId:
          type: string
          description: site id
        label:
          type: string
          description: user friendly label for content type name
        contentTypeId:
          type: string
          description: content type id
        path:
          type: string
          description: path expression to generate path for quick create

    RepositoryStatus:
      type: object
      properties:
        conflicting:
          type: array
          description: list of conficting files
          items:
            type: string
        uncommittedChanges:
          type: array
          description: list of added files
          items:
            type: string
        clean:
          type: boolean
          description: true if there are no conflicts or uncommited changes

    History:
      type: object
      properties:
        item:
          $ref: '#/components/schemas/ContentItem'
        versions:
          type: array
          description: list of versions
          items:
            $ref: '#/components/schemas/ContentItemVersion'

    ContentItemVersion:
      type: object
      properties:
        versionNumber:
          type: string
          description: version label
        lastModifiedDate:
          type: string
          format: datetime
          description: last modified date and time of version
        lastModifier:
          type: string
          description: user that modified item
        comment:
          type: string
          description: commit message

    ContentItem:
      type: object
      description: API v1 object

    PublishingPackage:
      type: object
      properties:
        id:
          type: string
          description: package ID
        siteId:
          type: string
          description: site ID
        schedule:
          type: string
          format: datetime
          description: scheduled date and time
        approver:
          type: string
          description: user that approved publishing package
        state:
          type: string
          description: package state
        publishingTarget:
          type: string
          description: publishing target where package will be published
        comment:
          type: string
          description: submission comment
      required:
        - id
        - siteId
        - schedule
        - approver
        - state
        - publishingTarget

    PublishingPackageDetails:
      type: object
      properties:
        id:
          type: string
          description: package ID
        siteId:
          type: string
          description: site ID
        schedule:
          type: string
          format: datetime
          description: scheduled date and time
        approver:
          type: string
          description: user that approved publishing package
        state:
          type: string
          description: package state
        publishingTarget:
          type: string
          description: publishing target where package will be published
        comment:
          type: string
          description: submission comment
        items:
          type: array
          items:
            type: object
            properties:
              path:
                type: string
                description: content item path
              contentTypeClass:
                type: string
                description: content type class
              mimeType:
                type: string
                description: mime-type
      required:
        - id
        - schedule
        - approver
        - state
        - publishingTarget
        - items

    PublishingStatus:
      type: object
      properties:
        enabled:
          type: boolean
          description: true if publishing for site is enabled, otherwise false
        status:
          type: string
          description: publishing status for site
        lockOwner:
          type: string
          description: studio instance owner of publishing lock
        lockTTL:
          type: string
          description: TTL timestamp for publishing lock
        totalItems:
          type: integer
          format: int32
          description: total number of item being published right now
        numberOfItems:
          type: integer
          format: int32
          description: number of items published so far
        submissionId:
          type: string
          description: identifier of a submission being published
        publishingTarget:
          type: string
          description: publishing target for package
        published:
          type: boolean
          description: true if site has been published at least once (initial publish; published repository exist), otherwise false

      required:
        - enabled
        - status
        - message
        - lockOwner
        - lockTTL

    DeploymentHistoryGroup:
      type: object
      properties:
        internalName:
          type: string
          description: user friendly label
        numberOfChildren:
          type: integer
          format: int32
          description: number of items in the group
        children:
          type: array
          items:
            $ref: '#/components/schemas/ContentItem'
        publishingTarget:
          type: string
          description: publishing target where item was published
      required:
        - internalName
        - numberOfChildren
        - children
        - publishingTarget


    SandboxItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: content item ID
        label:
          type: string
          description: user friendly display name for content item
        parentId:
          type: integer
          format: int64
          description: parent item ID
        contentTypeId:
          type: string
          description: content type of content item
        path:
          type: string
          description: path where content item is stored inside repository (with filename)
        previewUrl:
          type: string
          description: url for previewing content item
        systemType:
          type: string
          description: one of predifined type values (page, component, asset, levelDescriptor, folder ...)
        mimeType:
          type: string
          description: mime-type of content item file
        state:
          type: integer
          format: int64
          description: >-
            bitmap of states
              * `BIT ORDER (little-endian)`: 0, `FLAG`: New, `DESCRIPTION`: The item is new and never been published
              * `BIT ORDER (little-endian)`: 1: `FLAG`: Modified, `DESCRIPTION`: The item has been published in the past and has been modified in the sandbox
              * `BIT ORDER (little-endian)`: 2: `FLAG`: Deleted, `DESCRIPTION`: The item is deleted
              * `BIT ORDER (little-endian)`: 3: `FLAG`: User Locked, `DESCRIPTION`: The item is locked by a user
              * `BIT ORDER (little-endian)`: 4, `FLAG`: System Processing, `DESCRIPTION`: The item is locked by the system for processing
              * `BIT ORDER (little-endian)`: 5, `FLAG`: In Workflow, `DESCRIPTION`: The item has been submitted for review
              * `BIT ORDER (little-endian)`: 6, `FLAG`: Scheduled, `DESCRIPTION`: The item has been scheduled for review or publishing ounce approved
              * `BIT ORDER (little-endian)`: 7, `FLAG`: Publishing, `DESCRIPTION`: The item is being published
              * `BIT ORDER (little-endian)`: 8, `FLAG`: Destination, `DESCRIPTION`: If the item is being published, the destination is staging if 0, and live if 1
              * `BIT ORDER (little-endian)`: 9, `FLAG`: Staged, `DESCRIPTION`: The item has been pushed to the staging publishing target
              * `BIT ORDER (little-endian)`: 10, `FLAG`: Live, `DESCRIPTION`: The item has been pushed to the live publishing target
              * `BIT ORDER (little-endian)`: 11, `FLAG`: Disabled, `DESCRIPTION`: The item has been disabled
              * `BIT ORDER (little-endian)`: 12, `FLAG`: Reserved 12, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 13, `FLAG`: Reserved 11, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 14, `FLAG`: Reserved 10, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 15, `FLAG`: Reserved 9, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 16, `FLAG`: Reserved 8, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 17, `FLAG`: Reserved 7, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 18, `FLAG`: Reserved 6, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 19, `FLAG`: Reserved 5, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 20, `FLAG`: Reserved 4, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 21, `FLAG`: Reserved 3, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 22, `FLAG`: Reserved 2, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 23, `FLAG`: Reserved 1, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 24, `FLAG`: Translation Up To Date, `DESCRIPTION`: This item is a translation of another and it’s up to date
              * `BIT ORDER (little-endian)`: 25, `FLAG`: Translation Pending, `DESCRIPTION`: This item is a translation of another and it’s pending translation
              * `BIT ORDER (little-endian)`: 26, `FLAG`: Translation in Progress, `DESCRIPTION`: This item is a translation of another and is currently being translated
        lockOwner:
          type: string
          description: username of user that locked item for editing
        localeCode:
          type: string
          description: locale of content item
        translationSourceId:
          type: string
          description: ID of content item that is original for translation that current item represents
        creator:
          type: string
          description: username of user that created item
        dateCreated:
          type: string
          format: datetime
          description: timestamp when item was created
        modifier:
          type: string
          description: username of last user that modified item
        dateModified:
          type: string
          format: datetime
          description: timestamp when was item last modified
        commitId:
          type: string
          description: commit id of last modification in the repository for item
        sizeInBytes:
          type: integer
          format: int64
          description: size of content item in the repository
        expiresOn:
          type: string
          format: datetime
          description: timestamp when the item will expire, can be null if not present/set
        availableActions:
          type: integer
          format: int64
          description: >-
            available actions bitmap
              * `BIT ORDER (little-endian)`: 0, `FLAG`: Content: Read, `DESCRIPTION`: Read content
              * `BIT ORDER (little-endian)`: 1, `FLAG`: Content: Copy, `DESCRIPTION`: Copy content
              * `BIT ORDER (little-endian)`: 2, `FLAG`: Content: Read Version History, `DESCRIPTION`: Read version history for content
              * `BIT ORDER (little-endian)`: 3, `FLAG`: Content: Get Dependencies, `DESCRIPTION`: Get content dependencies
              * `BIT ORDER (little-endian)`: 4, `FLAG`: Publish: Request, `DESCRIPTION`: Request publish for content
              * `BIT ORDER (little-endian)`: 5, `FLAG`: Content: Create, `DESCRIPTION`: Create content
              * `BIT ORDER (little-endian)`: 6, `FLAG`: Content: Paste, `DESCRIPTION`: Paste content
              * `BIT ORDER (little-endian)`: 7, `FLAG`: Content: Edit, `DESCRIPTION`: Update content
              * `BIT ORDER (little-endian)`: 8, `FLAG`: Content: Rename, `DESCRIPTION`: Rename or move content
              * `BIT ORDER (little-endian)`: 9, `FLAG`: Content: Cut, `DESCRIPTION`: Cut content
              * `BIT ORDER (little-endian)`: 10, `FLAG`: Content: Upload, `DESCRIPTION`: Upload content
              * `BIT ORDER (little-endian)`: 11, `FLAG`: Content: Duplicate, `DESCRIPTION`: Duplicate content
              * `BIT ORDER (little-endian)`: 12, `FLAG`: Content: Change Type, `DESCRIPTION`: Change content type
              * `BIT ORDER (little-endian)`: 13, `FLAG`: Content: Revert, `DESCRIPTION`: Revert content
              * `BIT ORDER (little-endian)`: 14, `FLAG`: Content: Edit controller, `DESCRIPTION`: Edit controller for content type
              * `BIT ORDER (little-endian)`: 15, `FLAG`: Content: Edit template, `DESCRIPTION`: Edit rendering template
              * `BIT ORDER (little-endian)`: 16, `FLAG`: Content: Create folder, `DESCRIPTION`: Create folder
              * `BIT ORDER (little-endian)`: 17, `FLAG`: Content: Delete, `DESCRIPTION`: Delete content
              * `BIT ORDER (little-endian)`: 18, `FLAG`: Content: Delete controller, `DESCRIPTION`: Delete content type controller
              * `BIT ORDER (little-endian)`: 19, `FLAG`: Content: Delete template, `DESCRIPTION`: Delete rendering template
              * `BIT ORDER (little-endian)`: 20, `FLAG`: Publish: Publish, `DESCRIPTION`: Publish content
              * `BIT ORDER (little-endian)`: 21, `FLAG`: Publish: Approve, `DESCRIPTION`: Approve publish request
              * `BIT ORDER (little-endian)`: 22, `FLAG`: Publish: Schedule, `DESCRIPTION`: Schedule publish
              * `BIT ORDER (little-endian)`: 23, `FLAG`: Publish: Reject, `DESCRIPTION`: Reject publish request
              * `BIT ORDER (little-endian)`: 24, `FLAG`: Content: Unlock, `DESCRIPTION`: Unlock content item
        childrenCount:
          type: integer
          format: int32
          description: number of children of the item
      required:
        - id
        - label
        - contentTypeId
        - path
        - previewUrl
        - systemType
        - mimeType
        - state
        - lockOwner
        - createdDate
        - creator
        - modifier
        - lastModifiedDate
        - commitId
        - availableActions

    DetailedItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: content item ID
        label:
          type: string
          description: user friendly display name for content item
        parentId:
          type: integer
          format: int64
          description: parent item ID
        contentTypeId:
          type: string
          description: content type of content item
        path:
          type: string
          description: path where content item is stored inside repository (with filename)
        previewUrl:
          type: string
          description: url for previewing content item
        systemType:
          type: string
          format: page, component, asset, levelDescriptor, folder
          description: type of item in CrafterCMS domain
        mimeType:
          type: string
          description: mime-type of content item file
        state:
          type: integer
          format: int64
          description: >-
            bitmap of states
              * `BIT ORDER (little-endian)`: 0, `FLAG`: New, `DESCRIPTION`: The item is new and never been published
              * `BIT ORDER (little-endian)`: 1: `FLAG`: Modified, `DESCRIPTION`: The item has been published in the past and has been modified in the sandbox
              * `BIT ORDER (little-endian)`: 2: `FLAG`: Deleted, `DESCRIPTION`: The item is deleted
              * `BIT ORDER (little-endian)`: 3: `FLAG`: User Locked, `DESCRIPTION`: The item is locked by a user
              * `BIT ORDER (little-endian)`: 4, `FLAG`: System Processing, `DESCRIPTION`: The item is locked by the system for processing
              * `BIT ORDER (little-endian)`: 5, `FLAG`: In Workflow, `DESCRIPTION`: The item has been submitted for review
              * `BIT ORDER (little-endian)`: 6, `FLAG`: Scheduled, `DESCRIPTION`: The item has been scheduled for review or publishing ounce approved
              * `BIT ORDER (little-endian)`: 7, `FLAG`: Publishing, `DESCRIPTION`: The item is being published
              * `BIT ORDER (little-endian)`: 8, `FLAG`: Destination, `DESCRIPTION`: If the item is being published, the destination is staging if 0, and live if 1
              * `BIT ORDER (little-endian)`: 9, `FLAG`: Staged, `DESCRIPTION`: The item has been pushed to the staging publishing target
              * `BIT ORDER (little-endian)`: 10, `FLAG`: Live, `DESCRIPTION`: The item has been pushed to the live publishing target
              * `BIT ORDER (little-endian)`: 11, `FLAG`: Disabled, `DESCRIPTION`: The item has been disabled
              * `BIT ORDER (little-endian)`: 12, `FLAG`: Reserved 12, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 13, `FLAG`: Reserved 11, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 14, `FLAG`: Reserved 10, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 15, `FLAG`: Reserved 9, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 16, `FLAG`: Reserved 8, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 17, `FLAG`: Reserved 7, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 18, `FLAG`: Reserved 6, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 19, `FLAG`: Reserved 5, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 20, `FLAG`: Reserved 4, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 21, `FLAG`: Reserved 3, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 22, `FLAG`: Reserved 2, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 23, `FLAG`: Reserved 1, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 24, `FLAG`: Translation Up To Date, `DESCRIPTION`: This item is a translation of another and it’s up to date
              * `BIT ORDER (little-endian)`: 25, `FLAG`: Translation Pending, `DESCRIPTION`: This item is a translation of another and it’s pending translation
              * `BIT ORDER (little-endian)`: 26, `FLAG`: Translation in Progress, `DESCRIPTION`: This item is a translation of another and is currently being translated
        lockOwner:
          type: string
          description: username of user that locked item for editing
        localeCode:
          type: string
          description: locale of content item
        translationSourceId:
          type: string
          description: ID of content item that is original for translation that current item represents
        expiresOn:
          type: string
          format: datetime
          description: timestamp when the item will expire, can be null if not present/set
        availableActions:
          type: integer
          format: int64
          description: >-
            available actions bitmap
              * `BIT ORDER (little-endian)`: 0, `FLAG`: Content: Read, `DESCRIPTION`: Read content
              * `BIT ORDER (little-endian)`: 1, `FLAG`: Content: Copy, `DESCRIPTION`: Copy content
              * `BIT ORDER (little-endian)`: 2, `FLAG`: Content: Read Version History, `DESCRIPTION`: Read version history for content
              * `BIT ORDER (little-endian)`: 3, `FLAG`: Content: Get Dependencies, `DESCRIPTION`: Get content dependencies
              * `BIT ORDER (little-endian)`: 4, `FLAG`: Publish: Request, `DESCRIPTION`: Request publish for content
              * `BIT ORDER (little-endian)`: 5, `FLAG`: Content: Create, `DESCRIPTION`: Create content
              * `BIT ORDER (little-endian)`: 6, `FLAG`: Content: Paste, `DESCRIPTION`: Paste content
              * `BIT ORDER (little-endian)`: 7, `FLAG`: Content: Edit, `DESCRIPTION`: Update content
              * `BIT ORDER (little-endian)`: 8, `FLAG`: Content: Rename, `DESCRIPTION`: Rename or move content
              * `BIT ORDER (little-endian)`: 9, `FLAG`: Content: Cut, `DESCRIPTION`: Cut content
              * `BIT ORDER (little-endian)`: 10, `FLAG`: Content: Upload, `DESCRIPTION`: Upload content
              * `BIT ORDER (little-endian)`: 11, `FLAG`: Content: Duplicate, `DESCRIPTION`: Duplicate content
              * `BIT ORDER (little-endian)`: 12, `FLAG`: Content: Change Type, `DESCRIPTION`: Change content type
              * `BIT ORDER (little-endian)`: 13, `FLAG`: Content: Revert, `DESCRIPTION`: Revert content
              * `BIT ORDER (little-endian)`: 14, `FLAG`: Content: Edit controller, `DESCRIPTION`: Edit controller for content type
              * `BIT ORDER (little-endian)`: 15, `FLAG`: Content: Edit template, `DESCRIPTION`: Edit rendering template
              * `BIT ORDER (little-endian)`: 16, `FLAG`: Content: Create folder, `DESCRIPTION`: Create folder
              * `BIT ORDER (little-endian)`: 17, `FLAG`: Content: Delete, `DESCRIPTION`: Delete content
              * `BIT ORDER (little-endian)`: 18, `FLAG`: Content: Delete controller, `DESCRIPTION`: Delete content type controller
              * `BIT ORDER (little-endian)`: 19, `FLAG`: Content: Delete template, `DESCRIPTION`: Delete rendering template
              * `BIT ORDER (little-endian)`: 20, `FLAG`: Publish: Publish, `DESCRIPTION`: Publish content
              * `BIT ORDER (little-endian)`: 21, `FLAG`: Publish: Approve, `DESCRIPTION`: Approve publish request
              * `BIT ORDER (little-endian)`: 22, `FLAG`: Publish: Schedule, `DESCRIPTION`: Schedule publish
              * `BIT ORDER (little-endian)`: 23, `FLAG`: Publish: Reject, `DESCRIPTION`: Reject publish request
              * `BIT ORDER (little-endian)`: 24, `FLAG`: Content: Unlock, `DESCRIPTION`: Unlock content item
        sandbox:
          type: object
          description: metadata of content item version stored in sandbox repository
          properties:
            creator:
              type: string
              description: username of user that created item
            dateCreated:
              type: string
              format: datetime
              description: timestamp when item was created
            modifier:
              type: string
              description: username of last user that modified sandbox version of item
            dateModified:
              type: string
              format: datetime
              description: timestamp when was item last modified in sandbox
            commitId:
              type: string
              description: commit id of last modification in the sandbox repository
            sizeInBytes:
              type: integer
              format: int64
              description: size of content item in the repository
        staging:
          type: object
          description: metadata of content item version stored in staging repository
          properties:
            dateScheduled:
              type: string
              format: datetime
              description: timestamp when is item scheduled for publishing to staging repository
            datePublished:
              type: string
              format: datetime
              description: timestamp when was item last time published to staging repository
            publisher:
              type: string
              description: username of last user that published item to staging repository
            commitId:
              type: string
              description: commit id of last modification in the staging repository
        live:
          type: object
          description: metadata of content item version stored in live repository
          properties:
            dateScheduled:
              type: string
              format: datetime
              description: timestamp when is item scheduled for publishing to live repository
            datePublished:
              type: string
              format: datetime
              description: timestamp when was item last time published to live repositroy
            publisher:
              type: string
              description: username of last user that published item to live repository
            commitId:
              type: string
              description: commit id of last modification in the live repository
        childrenCount:
          type: integer
          format: int32
          description: number of children of the item
      required:
        - id
        - label
        - contentTypeId
        - path
        - previewUrl
        - systemType
        - mimeType
        - state
        - lockOwner
        - staging
        - availableActions

    LocalizationItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: content item ID
        label:
          type: string
          description: user friendly display name for content item
        parentId:
          type: integer
          format: int64
          description: parent item ID
        path:
          type: string
          description: path where content item is stored inside repository (with filename)
        previewUrl:
          type: string
          description: url for previewing content item
        systemType:
          type: string
          description: one of predifined type values (page, component, asset, level descriptor, folder ...)
        mimeType:
          type: string
          description: mime-type of content item file
        state:
          type: integer
          format: int64
          description: >-
            bitmap of states
              * `BIT ORDER (little-endian)`: 0, `FLAG`: New, `DESCRIPTION`: The item is new and never been published
              * `BIT ORDER (little-endian)`: 1: `FLAG`: Modified, `DESCRIPTION`: The item has been published in the past and has been modified in the sandbox
              * `BIT ORDER (little-endian)`: 2: `FLAG`: Deleted, `DESCRIPTION`: The item is deleted
              * `BIT ORDER (little-endian)`: 3: `FLAG`: User Locked, `DESCRIPTION`: The item is locked by a user
              * `BIT ORDER (little-endian)`: 4, `FLAG`: System Processing, `DESCRIPTION`: The item is locked by the system for processing
              * `BIT ORDER (little-endian)`: 5, `FLAG`: In Workflow, `DESCRIPTION`: The item has been submitted for review
              * `BIT ORDER (little-endian)`: 6, `FLAG`: Scheduled, `DESCRIPTION`: The item has been scheduled for review or publishing ounce approved
              * `BIT ORDER (little-endian)`: 7, `FLAG`: Publishing, `DESCRIPTION`: The item is being published
              * `BIT ORDER (little-endian)`: 8, `FLAG`: Destination, `DESCRIPTION`: If the item is being published, the destination is staging if 0, and live if 1
              * `BIT ORDER (little-endian)`: 9, `FLAG`: Staged, `DESCRIPTION`: The item has been pushed to the staging publishing target
              * `BIT ORDER (little-endian)`: 10, `FLAG`: Live, `DESCRIPTION`: The item has been pushed to the live publishing target
              * `BIT ORDER (little-endian)`: 11, `FLAG`: Disabled, `DESCRIPTION`: The item has been disabled
              * `BIT ORDER (little-endian)`: 12, `FLAG`: Reserved 12, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 13, `FLAG`: Reserved 11, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 14, `FLAG`: Reserved 10, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 15, `FLAG`: Reserved 9, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 16, `FLAG`: Reserved 8, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 17, `FLAG`: Reserved 7, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 18, `FLAG`: Reserved 6, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 19, `FLAG`: Reserved 5, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 20, `FLAG`: Reserved 4, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 21, `FLAG`: Reserved 3, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 22, `FLAG`: Reserved 2, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 23, `FLAG`: Reserved 1, `DESCRIPTION`: Reserved value for future use
              * `BIT ORDER (little-endian)`: 24, `FLAG`: Translation Up To Date, `DESCRIPTION`: This item is a translation of another and it’s up to date
              * `BIT ORDER (little-endian)`: 25, `FLAG`: Translation Pending, `DESCRIPTION`: This item is a translation of another and it’s pending translation
              * `BIT ORDER (little-endian)`: 26, `FLAG`: Translation in Progress, `DESCRIPTION`: This item is a translation of another and is currently being translated
        lockOwner:
          type: string
          description: username of user that locked item for editing
        localeCode:
          type: string
          description: locale of content item
        translationSourceId:
          type: string
          description: ID of content item that is original for translation that current item represents
      required:
        - id
        - label
        - contentTypeId
        - path
        - previewUrl
        - systemType
        - mimeType
        - state
        - lockOwner
        - localeCode

    TranslationConfig:
      type: object
      properties:
        localeCodes:
          type: array
          description: List of codes for the supported locales
          items:
            type: string
        defaultLocaleCode:
          type: string
          description: The code of the default locale for all new content

    ContentValidationRequest:
      type: object
      properties:
        actions:
          type: array
          description: The list of actions to verify
          items:
            type: object
            properties:
              type:
                type: string
                description: >
                  The type of action, possible values: CREATE, RENAME, MOVE, COPY
              source:
                type: string
                description: The source value, only needed for recursive COPY, MOVE and RENAME actions
              target:
                type: string
                description: The target value
              recursive:
                type: boolean
                description: Indicates if all child items should be verified too
                default: false
              contentMetadata:
                type: object
                properties:
                  fileSize:
                    type: integer
                    format: int64
                    description: The size of the file in bytes, only needed for CREATE actions
                  contentType:
                    type: string
                    description: The id of the crafter content type, only needed for CREATE actions
            required:
              - type
              - target
      required:
        - siteId
        - actions

    ContentValidationResult:
      type: object
      properties:
        actions:
          type: array
          description: The list of results
          items:
            type: object
            properties:
              type:
                type: string
                description: The type of action
              target:
                type: string
                description: The target value
              allowed:
                type: boolean
                description: Indicates if the operation is allowed
              modifiedValue:
                type: string
                description: The adjusted value if available

    PasteItem:
      type: object
      properties:
        path:
          type: string
          description: The path of the item
        children:
          type: array
          description: The child items
          items:
            $ref: '#/components/schemas/PasteItem'
      required:
        - path

    PasteRequest:
      type: object
      properties:
        siteId:
          type: string
          description: The id of the site
        operation:
          type: string
          description: Indicate the type of operation
          enum:
            - COPY
            - CUT
        targetPath:
          type: string
          description: The target path for the operation
        item:
          $ref: '#/components/schemas/PasteItem'
      required:
        - siteId
        - target
        - item

    AccessToken:
      type: object
      properties:
        token:
          type: string
          description: Value of the access token, only visible when the token is created
        expiresAt:
          type: string
          format: date-time
          description: Date of expiration of the access token
        id:
          type: integer
          format: int64
          description: Id of the access token
        label:
          type: string
          description: The label of the access token
        enabled:
          type: boolean
          description: Indicates if the access token is enabled
        createdOn:
          type: string
          format: date-time
          description: Date of creation of the access token

    WorkflowPackage:
      type: object
      properties:
        id:
          type: string
          description: workflow package ID
        siteId:
          type: string
          description: site identifier 
        status:
          type: string
          description: workflow package status
        author:
          type: string
          description: username of the author
        reviewer:
          type: string
          description: username of the reviewer
        schedule:
          type: string
          format: datetime
          description: scheduled date and time to publish the package
        publishingTarget:
          type: string
          description: name of the publishing target where package will be published
        authorComment:
          type: string
          description: author's comment
        reviewerComment: 
          type: string
          description: reviewer's comment
        label: 
          type: string
          description: user friendly label for package
      required:
        - id
        - siteId
        - status
        - author
        - publishingTarget

    Activity:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: activity ID
        person:
          $ref: '#/components/schemas/Person'
        action:
          type: string
          description: >-
            operation performed by user
              * CREATE
              * UPDATE
              * DELETE
              * MOVE
              * REQUEST_PUBLISH
              * APPROVE
              * APPROVE_SCHEDULED
              * REJECT
              * REVERT
              * PUBLISH
              * INITIAL_PUBLISH
              * UNKNOWN
        itemId:
          type: integer
          format: int64
          description: item ID that operation was performed against
        packageId:
          type: string
          format: UUID
          description: package ID that operation was performed against
      required:
        - id
        - person
        - action

    Person:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: user ID
        username:
          type: string
          description: user's username
        firstName:
          type: string
          description: user's first name
        lastName:
          type: string
          description: user's last name
        avatar:
          type: string
          format: CLOB
          description: user's avatar
      required:
        - id
        - username
        - firstName
        - lastName

    DashboardPublishingPackage:
      type: object
      properties:
        id:
          type: string
          format: UUID
          description: package id
        label:
          type: string
          description: user friendly name of the package
        submitter:
          $ref: '#/components/schemas/Person'
        size:
          type: integer
          format: int32
          description: number of items in the package
        publishingTarget:
          type: string
          description: publishing target where package will be published
        schedule:
          type: string
          format: date-time
          description: date and time when package will be published
      required:
        - id
        - label
        - submitter
        - size
        - publishingTarget

    PublishingStats:
      type: object
      properties:
        numberOfPublishes:
          type: integer
          format: int32
          description: Number of published content for given unit of time
        numberOfNewAndPublishedItems:
          type: integer
          format: int32
          description: Number of newly created and published items for given unit of time
        numberOfEditedAndPublishedItems:
          type: integer
          format: int32
          description: Number of editied and published items for given unit of time
      required:
        - numberOfPublishes
        - numberOfNewAndPublishedItems
        - numberOfEditedAndPublishedItems

  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              response:
                $ref: '#/components/schemas/ApiResponse'
    Conflict:
      description: Resource already exists
      content:
        application/json:
          schema:
            type: object
            properties:
              response:
                $ref: '#/components/schemas/ApiResponse'
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            type: object
            properties:
              result:
                type: object
                properties:
                  response:
                    $ref: '#/components/schemas/ApiResponse'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              response:
                $ref: '#/components/schemas/ApiResponse'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              response:
                $ref: '#/components/schemas/ApiResponse'
    RequestTimeout:
      description: Request Timeout (408)
      content:
        application/json:
          schema:
            type: object
            properties:
              response:
                $ref: '#/components/schemas/ApiResponse'
    InternalServerError:
      description: Internal system failure
      content:
        application/json:
          schema:
            type: object
            properties:
              response:
                $ref: '#/components/schemas/ApiResponse'
    ServiceUnavailable:
      description: Service unavailable (503)
      content:
        application/json:
          schema:
            type: object
            properties:
              response:
                $ref: '#/components/schemas/ApiResponse'
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    basicAuth:
      type: http
      scheme: basic
  links: {}
  callbacks: {}
security:
  - jwtAuth: []
  - basicAuth: []
