<!--
  ~ Copyright (C) 2007-2019 Crafter Software Corporation. All Rights Reserved.
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->

<!--

	Asset processing configuration file. You can define in this file one or multiple pipelines to process static assets when they're
	uploaded. A pipeline configuration supports the following elements:

	<pipeline>
		<inputPathPattern/>
		<keepOriginal/>
		<processors>
			<processor>
				<type/>
				<params/>
				<outputPathFormat/>
			</processor>
		</processors>
	</pipeline>

    - inputPathPattern: regex that the assets need to match in order to be processed by the pipeline. Groups that are captured by this
      regex are available later to the outputPathFormat.
    - keepOriginal (optional): if the original asset (without changes) should be saved.
    - type: the type of the processor. Right now 3 types are supported:
		- ImageMagickTransformer: runs ImageMagick from the command line, with params.options as the command line params.
		- TinifyTransformer: uses the Java client of TinyPNG to compress JPEG/PNG images (see https://tinypng.com/developers/reference).
		  The Tinify API key must be specified in the studio-config-overrides.yaml.
		- FileEncodingConverter: converts a file written in a certain encoding (params.inputEncoding) into another encoding
		  (params.outputEncoding).
	- outputPathFormat (optional): the format of the output path. Variables that have a dollar sign ($) and an index are later replaced
	  by groups that resulted during input path matching, to form the final output path. If not specified, then the same input path is used
	  as the output path.

-->
<assetProcessing>
    <pipelines>

        <!-- Web transformer pipeline -->
        <pipeline>
            <inputPathPattern>^/static-assets/images/upload/(.+)\.jpg$</inputPathPattern>
            <keepOriginal>false</keepOriginal>
            <processors>
                <processor>
                    <type>ImageMagickTransformer</type>
                    <params>
                        <options>-level 0,100%,1.3 -gaussian-blur 0.05 -quality 20% -strip</options>
                    </params>
                    <outputPathFormat>/static-assets/images/compressed/web/$1-compressed.jpg</outputPathFormat>
                </processor>
            </processors>
        </pipeline>

        <!-- Mobile transformer pipeline -->
        <pipeline>
            <inputPathPattern>^/static-assets/images/upload/(.+)\.jpg$</inputPathPattern>
            <keepOriginal>false</keepOriginal>
            <processors>
                <processor>
                    <type>ImageMagickTransformer</type>
                    <params>
                        <options>-level 0,100%,1.3 -gaussian-blur 0.05 -quality 20% -strip -resize 226x164</options>
                    </params>
                    <outputPathFormat>/static-assets/images/compressed/mobile/$1-compressed.png</outputPathFormat>
                </processor>
                <processor>
                    <type>TinifyTransformer</type>
                </processor>
            </processors>
        </pipeline>

        <!-- File encoding converter pipeline -->
        <pipeline>
            <inputPathPattern>^/static-assets/tmpl/euc-jp/(.+)$</inputPathPattern>
            <keepOriginal>false</keepOriginal>
            <processors>
                <processor>
                    <type>FileEncodingConverter</type>
                    <params>
                        <inputEncoding>EUC-JP</inputEncoding>
                        <outputEncoding>UTF-8</outputEncoding>
                    </params>
                    <outputPathFormat>/static-assets/tmpl/utf-8/$1</outputPathFormat>
                </processor>
            </processors>
        </pipeline>

    </pipelines>
</assetProcessing>